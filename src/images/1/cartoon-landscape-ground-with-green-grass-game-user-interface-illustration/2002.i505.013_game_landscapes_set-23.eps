%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 2002.i505.013.P.m005.c25.game landscapes set-23.eps
%%Creator: Adobe Illustrator(R) 19.2
%%For: MSI
%%CreationDate: 4/24/2021
%%BoundingBox: 0 0 450 303
%%HiResBoundingBox: 0 0 450 302.5645
%%CropBox: 0 0 450 302.5645
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.2.1 x147 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 23 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=100 RasterRes=1200 GradRes=300 Text=0 Stroke=0 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c111 79.158366, 2015/09/25-01:12:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">2002.i505.013.P.m005.c25.game landscapes set</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2021-04-24T18:38:35+03:00</xmp:CreateDate>
         <xmp:ModifyDate>2021-04-24T18:38:35+03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2021-04-24T18:38:35+03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qxP8AMXzYNC0gx27s&#xA;NSutrbhSqhWHJ2rvSm3TNT2vrxgx0PrlySE18q+Y7XzDo8WoQDg9fTuYT/uuVQCy17jcEHwOZeh1&#xA;cdRjEx8fIoTfMtXYq7FXYq7FXm/mfzJd3t1JDGzRWaH0zEG+0UO9eJIPxeG2eXdudsZdRllAXHGN&#xA;uH3fzqJB3/Q2AJr5N8wzPN+j7lg4k5NHM7fFXb4d/tE5tvZjtiZn4GQ3dkSJ3vu352iQZnndsHYq&#xA;7FXYq7FWOzazd2fm+Sylb/cZNZfWQ81I1SWJuLLC7UD8lILKT8NK98he7OtmOaT5wmu/Meqais7N&#xA;DBImnR6P6JS4CQusk9zPVysawid0qaV4+OxiJbsjDZ6LlrU7FXYq7FVG8vLaztpLq5cRwRDlI56A&#xA;ZDJMQiZHkEgEmg84tfzthn1MRNoV1BpXPidRmkjQ0Kllb0jtvT+f8SAdR/LeO+W34/HNlHGT5M1u&#xA;vOXlO0W2a71iztheIJbb1p44+aMKhhyI2zZjU46B4hv5sCm8ciSIskbB43AZHU1BB3BBGXg2reKu&#xA;xV2KrZZY4onlkYJHGpZ2PQKBUk4CQBZVIdX876Hp1nDciQ3K3HMQiKnVPtcixHHrmt1PauHFASvi&#xA;u6ry582QikWq/mZE2noNMhZb92Kskgr6dCe4DK1eOYWftwGNY4njujty/XyZjHuzuPl6a8mDNQcm&#xA;UUBNOoFT+vN+OTUuwq+X/PnmW41fzhqkzcJYo5mgiWKQlRHF+7UqTXZuPLoOucP2jM5M0pHvodRt&#xA;3LbJPyU80w2fmiTTLkpGNUTjC5oSJYqsqFiwpzDeG5AGZvYmUQyGJ/i+9SXvmdWrsVdirsVdirwn&#xA;znBqnl7VprdIX+oc2+rzOGCtGVVvganElQ1DTvnnOq7EEM0o71/Ce/8AFuw0WnGYkX6qsMg/K7T7&#xA;/UdQ/SF7E8dtbIJIAwfjI7syqUYgK3Dga++Z/YvY0fH4yLjCq25n9hHzaNVCMJmMTdPVs7dxnYq7&#xA;FXYq7FWO3XkLy7fC7XUoW1BLovxW5kkkEPqAc/RDMVjYvVuSAHf2yHAGfGWA+SvLfmDVZtatLu9E&#xA;mkWerXFvfUPoz3ssNwJC8jxqSo4rH79QCASchGJJ8mcpADzewZc0uxV2KuxVjH5lWl3deStTitRy&#xA;l9PkUrQFQfiqT0AHxH5ZgdpwMsEqZ4+bwu0N3fyyJYCKWWN2kUhmACyBJFMdaEenIgWvjtnFjEb2&#xA;/HubQb5fj3e5DaxbSxSxC9AeB+HBJq3JFZPjRKqFrHHHuvX4q98zIE1+CyJvn+t7N+St9e3Pk/07&#xA;hSsdrKIbeq8fhMMchVRU/CrOQDX7qZ0vZUicW/QtOTp7mfZsmt2KuxVD6jbtc6fdW6qrtNDJGEf7&#xA;JLKRRqdjXfK8seKBHeCkPBpbm4VYrWcMDbj0mVgyfFU8t0+Ebcl3984Ocpg0eQHu/Z5fNyCUXomo&#xA;6ZZ3y3t3Zi+kgQi1t2+wJGYfH1YHhxaikd69ct0+ohCQkY8RHIfjnW+zGQt655S8yp5g0x7wQ+g0&#xA;UphkjqWHIIr7EhezjOu7P1n5jHx1R/YD5d7SRSbzwRTwSQTLzilUpIh7qwoRt7ZmEAiih4B+Zn5M&#xA;SaPbjU/L0M+pLPc+n+jIonkeFJObKwZS7FEAVNxWu9d80Oo7JreB27qbMWITNE8LMPIX5K6dpFxY&#xA;61f3cs99EIriG19NYVik41ZZKmRnKsdqcemZGl7KEJCcjZDWY0XqWbdXYq7FXYq7FWBfnPdWsflI&#xA;WszDndzokaV3IAJY/IDv7jNf2lIDH527XsiBOW+lMw0OaGfRbCWGnpPbxFKdhwG30ZmYiDAEdzr8&#xA;4InIHvKNyxqdirsVdirsVQuqX66dp1zfNDLcLbRtK0EAVpWCipCKxQE+1d8BKQHl/wCUmv8AmqTz&#xA;DrkOo6LcQadq93cajaTAxlIXEvpTKzkp6g+wKpXpWlDXIQJtnMCnrWWNbsVdirsVcQCKHcHqMVec&#xA;x/lBJb6ldXtprbxfWeQEDQco0VnL0VVkToSafM5r5dnYyKGzd4xUbv8AJ+8uikU+rxvBGDxZrbka&#xA;sOJ+Av4E78v144+zscNgFGUVyZz5a0G20HRbfS7chkgDcpAoTmzsWZiB3JOZmLGIRoNUjZtM8sQ7&#xA;FXYq7FWN+eoNTu9HewsNJOpvc/ab1Y4ViK0IYlnjYk9Ph+nwOPqcIyQMSLBZwq93mcX5eeeGmijk&#xA;01ktmZRKy3FspC8l5GgZ+RCg5ov5B5C/T/Y2GUa5vYtF0ax0fT47GyTjDHuSTVmY9WY/5+HTN/gw&#xA;RxREY8mkm0dlyHYq7FXYq7FXYq7FXYqtkiikp6iK/E1XkAaGhFRX2JGAi0gkNoiooRAFRQAqgUAA&#xA;6ADCglvFXYq7FXYq7FXYq4AAAAUA6DFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYqlt9r1jY6na2F03pteKxhlP2eSkDifCvLbMPPrseLLHHPbj5Hz7k0u13WrTRtPe8uNwPhijG&#xA;xdz0UY6/Ww02Mzl8B3nuQAqaNqceqaVa6hGOK3MauUrXiT9pa7Vodss0ucZsUZj+IKjMyFdirsVd&#xA;irsVdirsVdirsVdirsVdiriwUVY0A6k4CQOauqCaV3xtXYVdirsVdirsVULi/srZgs86RsRUKzAN&#xA;StK06098iZAc0iJPJdDd2k5pDNHKaVojBtq0rscIkCpBCrhQ7FXYq7FXYq7FXYq7FWA/m1aOLPTt&#xA;RXpbStFIf8mYAgn2rHnL+1Gn4sUZ/wA018/7GUWI+ZfMs2paNYJJJza2jZGdvtFmJoSe/wACrv41&#xA;zmdXrp6iGKMjZgDfvv8AVX2pZFpnn2w8veWNPs0iN3cxxAyfF6aKZCX41oxJWtDtT3ze4O3senwx&#xA;xRHHMDfoB1rzr8FFM90S6vrvS7e6vYlguJ19RoVr8KsaqDXvxpXOo0mSc8QlMVI9GKNzJV2KuxVC&#xA;avqtlpOm3Go3rlLW2XlIwBJ60AAHck0yvNljjiZS5BXnup/m1qX18W+m6WVhkCiB7qodyftHgCOP&#xA;H3Ocrq/acC/C4SB1P7GXCxeTzb5q0rXV1K4uPrDlXCRyszRFSKFaDhSlQfDNFpe18pyeLxGUh3+f&#xA;kE09m0LV7fVtLgvYZEcuoEwjJIWSg5LvvsTnoGi1Uc+ITBHnXQ9QwKPzLV2KuxVpmVVLMQqjck7A&#xA;YCQBZVifnvUbV9Mt44n9QTOxV0YFP3dAeVK13Ocd7VazHLBGMTxcZO4O3p53382UQk3krVra31WZ&#xA;ru4oDDwDu22zKFH0AfQM0/s3rY4tQZZZUDCtz5ih+ruCZB6MCD0Nadc9Jtg7CrsVdirF/wAx9Z1j&#xA;SvLbS6RbS3N7NKkSiFJHKKaszn09wKLxr75XkJrZnjAJ3eNp5+1Az+he2EpuiTyTk6MSe/EqzV+e&#xA;YZDlhHfp3WZpG9PTpLWBiyxTSIZpT/K3AAen4/EDgV6F+UnnJte0m5sLu5a61TSpOE87ji0kbkmN&#xA;j4laFT8vfMzFOw42WNFnmWtTsVdiqG1LUrPTbKW9vZPStoaepIQSByYKK09z17d8BNJAt5rrX5yG&#xA;O9mt7JIobZlItruQC4JIG7lYZNvi2A9sx5Zj0b44R1YLq3n3VXtp4bzVkv5JgTGaOqqzbggEpGAP&#xA;ADKjIltEQHpX5K6rql35clt70yzQ2zKbS7kSRUaOSv7uN5AvqemUrUfzUzIwk04+UC2WebLNr3QL&#xA;qzWykv2uF4LDC0SMG6q/KZkUcWAPf5ZXrcXiYjCuK/d+lqeJy/lz+Z7pwGloqbbfWLfsSf8Afnvn&#xA;Jx7AyDfh394/Wm2ZeRvy5uhefWfNVhIZ7ejWq+tFJa1U7VjQ8uQ96r45sOzew445Xkj7uVfH8Ur1&#xA;HOmQ7FXYq7FWJ+ePIjeaJ7CQX4tEsi/qRND6yyhmRuLUeI0+D3zW9odn/mAPVw0D9qQUvk/LG5bZ&#xA;dWVEGyqLY7DwB9XOdHsdH/VP9j/x5PEoXf5SvdW3oS6stRukgtiGHb/f2+xyeP2SEZWMv+x/48vE&#xA;yfyf5bk8u6SdPe7F5+8aRZREIaBgBQgM/I7dSc6Ls7Q/lsfBd73ypBKeZnodirsVSDzlaa3f6W2n&#xA;6bbxSrcbTSyScCgVgwotN6061+jNX2thy5sRxwiCJc9+SQwhvIvnVo0jZYyqbj98P6ZyB9mNR8Pe&#xA;P1suJSi/L3zhHJzEUPy9UZKXsznIqvtC8TNfJei6vpoujqKqhk4BFV+ZPHlUnw65vPZ/srNpDM5D&#xA;9VV8LQSybOlYuxV2KuxVLNc8uaTrcUceoRMxhbnDJHI8Tq1CuzxlT0PQ7ZGUQebKMiOTHbj8pfLt&#xA;x8Mt5qRhOzwfWm4MD1BqOVPpyHgxZ+MWQ6B5X8v+X7Y2+j2MVmjU5sgq706c3art9JywRA5NZkTz&#xA;TTCh2KuxV2KpVrnlTy7rvpnVrCK6aL+7kYEOo8A6lWpv0rTImIPNIkRyQ1l5C8l2TK9volmJFIKy&#xA;vCkjgjoQ8gZh9+IgB0SZlPskxdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirEtc/MCz0rzGmnTBfqcSr9fuN+Uby/YoO&#xA;lFFC3Xr7b1Sy1Km2OO42yuOSORFkjYOjCqupqCD3BGWtS7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUBr2s2miaNd6rdmkFpGZGHQseioPdmIUe5w&#xA;SNC0gWafNM2s6ndatPPfQevNckXLW5YrVmJO/EGv2umYJc16h+Vmv3di8lvr8xil1a4VdPhf4UVw&#xA;rfAqk1HPoPo9suwzA2acsb3eq5kuO7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYqk/m/RBrflrUNM48pJ4qwKSAPWjIkiqT29RFrkZCxTKJo2+d9a8j+f&#xA;NJvre8vdIuDbMOEskXG54oSVbn6Bl47NtXMU4yHJEwU/8l/lP5h1m7t76+E2j6bAyvHI9Vum4nkP&#xA;RRv7vpsx+YByUMZLGeQB9A5lOM7FXYq7FXYq7FXYq7FXYq7FXYqw9vzI02PVrzT5Yir20jQI3Lq6&#xA;OUqxI+FTTr2982o7LkYCQPMW8+e3oxyyxmP0kgb9Qa+A/G6jF+a2h1InieMCoqrCQFgaChFAQfHJ&#xA;HsidXEgtUfabFfqiR9q1fzUsDE8gspCqMEJV6gV6cjx2r2yX8jyuuJhH2ngQTwH5/sVLD8ztPu9S&#xA;trIW5jNzIsSsXDfE7BR0A8cjl7JlCBlfLds0/tFHJkjDgriIHPvLNM1D0jsVdirsVdirsVdirsVd&#xA;irsVS2/8x6PYSNHdzNGyMEakcj0LLyFeCtTbKzliDRLIQJcPMWjH/j43oDTg/f8A2OR/MQ70+HJQ&#xA;/wAX6ByCpch2LFVC9SV+0N6dO+A6iCfCkhIvzA8vSXCW6u3qyV4LWMkha1IAcmnwnemD8zFPgyq2&#xA;SZkNTsVdirsVdirsVdirDW8o+dmnDnzZSP4v3S2jjqSRubk9Kj7szBqo/wAyLqJdm5Cf76amfJvn&#xA;r0yi+cKEmoc2blqb7f71e+S/Nxv6IsR2XlqvGyLn8n+d/Udk82lVYEBTaO3EnuP9JGD83Gq4IpHZ&#xA;mW/77IiNO8reb7a8tJrnzObqKFw1xCbZ1EqVJK1+sNx22rQ4J6qJBHBEWzxdnZITEjlnIDoerLMw&#xA;3auxV2KvItX/ACj843mtatewavaR22ozzSJFxmDKkjsyhiNiQrffm0HacuAQ7hXJ57J2DCWSU7Pq&#xA;JPPvNpVb/kZ55iVEOuWUiIKKDFJ0G3XJY+1ZxAHQeTVk9msUvL4lHf8AKnvOj2Zs5dT04wli/KOO&#xA;VJKkAU5nnttjk7VlK+l939rAezMAKv8AHyX6T+T3nCy8waZqEmr2jWljcQSyw8XZ2SJ1ZwG4ruwX&#xA;IS7SmYGN7VXIN+n9n8eOYl1EgeZ6G3sOax6J2KuxVjt1ZeeTd3DWmo2q2zsTAksZJRa7D4VHbxJy&#xA;kxnexbAY9yGj0z8w0fkdXtJASWKtFQb9qcSaDtQjBwT708UO5zaX+Yhcv+l7QGlAixUHjX4lf9WP&#xA;BPvXih3L3038wJHSuq2kSKQWCQsSadt8eCfevFDuZRl7U7FXYqwPzP5A1jVtXu7y3vo4ILgoyxEy&#xA;A8kiWOp4inY0zHyYeI23wy0KSkflLrhR1fUom9XiZamU8inQHbcfPI/l2XjtJ+UOro/MahByJrsH&#xA;BFd+o60Ix/Lr46xPyZ1BHV0v4F4jdeDb/M4/l0nUW9WzKcV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KvF3/AOclbJS7&#xA;/wCG7xrcqxt5VlQ82BoFYcfhrXrv9Oa0dpYz3X73oT7OZhzv/S/o5qEv/OTUaXRjHlmX0QAxla7R&#xA;TxO/wqYqMaHpy+WEdpY6tI9mtQZUAfl+1ddf85M2ywRm08vPLcnl60U12kSoBuKSLHKCT7gYB2nD&#xA;ryZf6Gc/S/8ASn+xPvI354QeZ/MNvokujvYz3XL0ZVnE6D04WlcOeEYBHGlAScnh18ckhEDm4+s7&#xA;Cy6fGZy/hroeprnyen5nujdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVS5ddt2uZoPq9wv&#xA;oMUeVo+KEj+Spq491BzIOmNA2N/P8U4A7QjxmPDL0nnW3w6n4BDHzXZr6oNnfcotuItZWLb/ALPE&#xA;EfTln5KW3qh/pg1HtaAv0ZNv6B39yJi1+wdVYrcIW/Za2nBHzohGVnSzHd/ph+ttj2jiIv1D/Ml+&#xA;pbJ5k0mNFYySFnJEcXpSiRiu5ohUHCNJkJ/aES7UwgXZ36cMr+VJnmM7B2KuxV2KuxV2KuxV8pH/&#xA;AJxU/NIwpD+n9NVFRVostyoAU7ABYR08cxfykLuhbvT25l4RHilQAHwHJef+cVvzMaGWOXWtLmMq&#xA;cKvLdfBxYMpX9ya1471/HI/k42CNqLYO35mEoy4pcQob8uX6lGT/AJxN/MqS3Fu+uaWycmkZ/Uuu&#xA;Ts3H7dYjypw2ycdNES4g0z7ZnKHASeZPvuuffyZf+VP/ADj/AOffKPnXS9a1TWLG502xad5beBp2&#xA;kYzW0sIoZI1FA0galfxwx00Iz4gN2rUdrZMmE4iSYk3v+PwX0DmQ6l2KuxV49J5a/wCcl2c/87Np&#xA;JUVUfscgdqkLYfCf9kadjmIcebpIfJ3EdRoq3xSv+st/wz/zkyYki/xLpCqoA5BiWJUDcsdP5GpG&#xA;++Ph5v54+SjUaLril/p/2OTy1/zkyjNx8yaPRzyNWLGtANuWnsFGx2A74jHm/n/Yj8xov9Sl/p/2&#xA;I3QPLn/OQNvrdhLq/mHTZ9LilQX0cbM0j24dWdVX6nGpcqCvLkDv1wxx5bsy29zHLn0fCRDHK6NE&#xA;y+T1bMp1TsVdiqWTR6+ZHMckKx8m9Mct+HVa1ibftmTE4q3v8fFwJx1JJoxqz16dP4Vgh8xAECaJ&#xA;qrUFmFQ38u0IHH3pXDxYe4/j/OYDHqh1j8/+OcnCHzEHB9aIrWjKWFOO24pCDXrtXHiw1yP4/wA5&#xA;fD1V/VH5/wDHF8MOveshmmQRgguEYGoDdKGEdV9xglLFWw/H+mZQhqeIcRFe/wD453eaZ5jOwdir&#xA;sVYjqXlnzFcayl3FPbi2jdmVWaTnRnJP7BA+Gg65tcWswxx8JBv4frea1PZWpnm44yjwgmufU+7u&#xA;VNV0HzNPEEtZ7dSyOjMzuhBYAAqUjJNPfI4dThibkD+Piy1HZ2rmKjKPLzH3RUbny95wfToraG9t&#xA;0mUR+rLzfrGKmn7v9p+te2ThqtOJkmJrfu/Wxydm6w4xEThe2+/T/N70edG15whkuY1PArJGpPEs&#xA;eNCDwB+GhA+eU/mMQ5A/j4t50GpI3lHl+P4fxbIc17vnYq7FWNa1F+YT38n6Hk09NP2MXrvIsx+A&#xA;VDUhlUfHXx2zDzY85PokIj8eTmYZ4APWCT+PNB+n+bJhKl9HEm4EglnO3bb6v1GQ8LUV9Q/HwZ8e&#xA;mvlL8fF0cX5rqzBm0h0P2CZpuQNe9LZQRTBHFqQN5j5fsWU9MeUZD8e9akP5tK6kyaRItf3imWZR&#xA;Sv7NLao28ScRi1N/WPl+xJyaavpl+PizPNg692KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVCjVb&#xA;AkgTDbrs39MxRrcX85u/Lz7kFP5r0OFijXFXBoVCN99SAMpn2pgjtxfe3w7PzS3pXtfMGi3RIgvI&#xA;yw/ZY8D9AbiTluLXYZ8pD7vva8mkyw5xP3/ciP0hZGRYxOjO5ooU8tz8ss/M47A4hZa/BnV0iMva&#xA;nYq7FUvk8w6HHM0D30KyqSrIXFQVJVh8wQQc1+TtXTQkYynEEc00VWXWNKiiMr3kIjUEk81PTwAO&#xA;/wBGTl2lpox4jkhX9YLSXt518sKATegggkFUkYUAqeinpmIe39GP8p9kv1LRX2fm/wAv3cixxXYD&#xA;vIIYlcFC7MNuIIrQ9N+/0ZPT9t6XLLhjLe6HmtFOM2qHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;85bX/wA62AX/AAxaIaCsi3UOx77NIc00/wA8Rtwj4f8AH3M8HD/P/wBiWo9f/O1YgH8sWcj13YXU&#xA;Kmn/ACNIrhvXVXp+X/H1OHD0n9hai1387UZ+Xlq0lUiqBrmEEHwqsoqPowQ/PDnwn3j9Ugk4cH8/&#xA;/YlMfL2q/mnca5aprWi29lpL8/rUiTxSslI2KcQj8t5Ao6H+lumGr8T94Rw+Qr9JLCePEI2J3Luo&#xA;s3zaOK7FXYq8Vl0H871mdo443SRieLPaAKppSnfb/MZz57Omf4ft/a9B+a0/f96GHln88RJJIY45&#xA;HbjxDNZ8NhQ/CG2+jwwfyZL+b9rL85g/nfeo3vk787Lv034ei6EnjDcW8Yp2BCnf6ScMezZD+H7l&#xA;/PYO/wC9kXlvTPzdh1awGqWdr9SWeM3lwHj9T0wat8KOF6eC9cswaCUZg1172jPqcMoEA71+Oj1f&#xA;N46R2KuxV8+6x+WH5mHzTreo6bbyLBd31zcWjpcwIGWSZmUlTIOqnoRnO6vss5ZkmAO57ncY56Qg&#xA;Gf1cIHX9CVj8qvzjikLQpPxrXe8gJIr7zEZUexoyG+OP2NssujJ/YVz/AJU/m9cS8rhLgpShX65B&#xA;v9AlAwR7GERtjj9iYZdGNunuKK8vflF5/tfNej6hdaeVtrO/t55ZGuYH4xRyqzkASMei1oBmXptD&#xA;OEh6aFjuXLqdKMZjDqO59FZvXQuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV//9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:OriginalDocumentID>uuid:C1BCCE1871B8DB11993190FCD52B4E9F</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:6927fc17-8a50-a040-843d-8525b9ce64ed</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:6927fc17-8a50-a040-843d-8525b9ce64ed</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:8295970e-30ca-4d1f-9c74-a569a6771336</stRef:instanceID>
            <stRef:documentID>xmp.did:9d73fd6f-93f9-bf44-8e2f-fc3927313f42</stRef:documentID>
            <stRef:originalDocumentID>uuid:C1BCCE1871B8DB11993190FCD52B4E9F</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:fd19f92a-95f3-584b-9acf-de7e81889ed4</stEvt:instanceID>
                  <stEvt:when>2020-02-07T18:00:09+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:7585c6b4-a3a8-0c43-ac13-b2296f3b278a</stEvt:instanceID>
                  <stEvt:when>2020-02-16T20:56:35+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9d73fd6f-93f9-bf44-8e2f-fc3927313f42</stEvt:instanceID>
                  <stEvt:when>2021-04-24T18:16:37+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:6927fc17-8a50-a040-843d-8525b9ce64ed</stEvt:instanceID>
                  <stEvt:when>2021-04-24T18:38:35+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Mobile</illustrator:StartupProfile>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
         <pdfx:CreatorVersion>21.0.0</pdfx:CreatorVersion>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>302.564422</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=241 G=191 B=178</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>241</xmpG:red>
                           <xmpG:green>191</xmpG:green>
                           <xmpG:blue>178</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=113 G=88 B=68</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>113</xmpG:red>
                           <xmpG:green>88</xmpG:green>
                           <xmpG:blue>68</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=159 G=133 B=112</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>159</xmpG:red>
                           <xmpG:green>133</xmpG:green>
                           <xmpG:blue>112</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=164 G=138 B=115</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>164</xmpG:red>
                           <xmpG:green>138</xmpG:green>
                           <xmpG:blue>115</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=136 G=115 B=96</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>136</xmpG:red>
                           <xmpG:green>115</xmpG:green>
                           <xmpG:blue>96</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=151 G=128 B=106</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>151</xmpG:red>
                           <xmpG:green>128</xmpG:green>
                           <xmpG:blue>106</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=164 G=143 B=122</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>164</xmpG:red>
                           <xmpG:green>143</xmpG:green>
                           <xmpG:blue>122</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=174 G=155 B=135</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>174</xmpG:red>
                           <xmpG:green>155</xmpG:green>
                           <xmpG:blue>135</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=197 G=177 B=153</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>197</xmpG:red>
                           <xmpG:green>177</xmpG:green>
                           <xmpG:blue>153</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=151 G=136 B=116</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>151</xmpG:red>
                           <xmpG:green>136</xmpG:green>
                           <xmpG:blue>116</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=238 G=212 B=168</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>238</xmpG:red>
                           <xmpG:green>212</xmpG:green>
                           <xmpG:blue>168</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=213 G=195 B=160</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>213</xmpG:red>
                           <xmpG:green>195</xmpG:green>
                           <xmpG:blue>160</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=238 G=238 B=187</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>238</xmpG:red>
                           <xmpG:green>238</xmpG:green>
                           <xmpG:blue>187</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=222 G=253 B=255</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>222</xmpG:red>
                           <xmpG:green>253</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=130 G=241 B=255</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>130</xmpG:red>
                           <xmpG:green>241</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=196 G=248 B=255</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>196</xmpG:red>
                           <xmpG:green>248</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=52 G=200 B=227</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>52</xmpG:red>
                           <xmpG:green>200</xmpG:green>
                           <xmpG:blue>227</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=107 G=228 B=255</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>107</xmpG:red>
                           <xmpG:green>228</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=239 G=252 B=255</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>239</xmpG:red>
                           <xmpG:green>252</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=40 G=204 B=250</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>40</xmpG:red>
                           <xmpG:green>204</xmpG:green>
                           <xmpG:blue>250</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=139 B=189</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>139</xmpG:green>
                           <xmpG:blue>189</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=180 B=245</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>180</xmpG:green>
                           <xmpG:blue>245</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=255 B=255</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=137 G=47 B=30</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>137</xmpG:red>
                           <xmpG:green>47</xmpG:green>
                           <xmpG:blue>30</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=180 G=170 B=166</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>180</xmpG:red>
                           <xmpG:green>170</xmpG:green>
                           <xmpG:blue>166</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=166 G=75 B=37</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>166</xmpG:red>
                           <xmpG:green>75</xmpG:green>
                           <xmpG:blue>37</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=128 G=52 B=18</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>128</xmpG:red>
                           <xmpG:green>52</xmpG:green>
                           <xmpG:blue>18</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=147 G=139 B=135</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>147</xmpG:red>
                           <xmpG:green>139</xmpG:green>
                           <xmpG:blue>135</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=215 G=237 B=52</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>215</xmpG:red>
                           <xmpG:green>237</xmpG:green>
                           <xmpG:blue>52</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=180 G=204 B=3</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>180</xmpG:red>
                           <xmpG:green>204</xmpG:green>
                           <xmpG:blue>3</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=195 G=222 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>195</xmpG:red>
                           <xmpG:green>222</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=161 G=183 B=3</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>161</xmpG:red>
                           <xmpG:green>183</xmpG:green>
                           <xmpG:blue>3</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=81 G=115 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>81</xmpG:red>
                           <xmpG:green>115</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=196 G=75 B=37</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>196</xmpG:red>
                           <xmpG:green>75</xmpG:green>
                           <xmpG:blue>37</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=125 G=61 B=34</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>125</xmpG:red>
                           <xmpG:green>61</xmpG:green>
                           <xmpG:blue>34</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=214 G=121 B=75</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>214</xmpG:red>
                           <xmpG:green>121</xmpG:green>
                           <xmpG:blue>75</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=204 G=102 B=51</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>204</xmpG:red>
                           <xmpG:green>102</xmpG:green>
                           <xmpG:blue>51</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=176 B=92</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>176</xmpG:green>
                           <xmpG:blue>92</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=245 G=164 B=74</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>245</xmpG:red>
                           <xmpG:green>164</xmpG:green>
                           <xmpG:blue>74</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=235 G=151 B=54</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>235</xmpG:red>
                           <xmpG:green>151</xmpG:green>
                           <xmpG:blue>54</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=252 G=191 B=103</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>252</xmpG:red>
                           <xmpG:green>191</xmpG:green>
                           <xmpG:blue>103</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=205 B=122</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>205</xmpG:green>
                           <xmpG:blue>122</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=252 G=223 B=169</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>252</xmpG:red>
                           <xmpG:green>223</xmpG:green>
                           <xmpG:blue>169</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=224 B=150</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>224</xmpG:green>
                           <xmpG:blue>150</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=43 G=3 B=3</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>43</xmpG:red>
                           <xmpG:green>3</xmpG:green>
                           <xmpG:blue>3</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=191 G=6 B=6</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>191</xmpG:red>
                           <xmpG:green>6</xmpG:green>
                           <xmpG:blue>6</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=217 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>217</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=230 G=33 B=7</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>230</xmpG:red>
                           <xmpG:green>33</xmpG:green>
                           <xmpG:blue>7</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=52 B=7</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>52</xmpG:green>
                           <xmpG:blue>7</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=86 B=25</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>86</xmpG:green>
                           <xmpG:blue>25</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=139 B=23</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>139</xmpG:green>
                           <xmpG:blue>23</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=43 G=7 B=15</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>43</xmpG:red>
                           <xmpG:green>7</xmpG:green>
                           <xmpG:blue>15</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=71 G=23 B=33</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>71</xmpG:red>
                           <xmpG:green>23</xmpG:green>
                           <xmpG:blue>33</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=110 G=3 B=25</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>110</xmpG:red>
                           <xmpG:green>3</xmpG:green>
                           <xmpG:blue>25</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=87 G=22 B=35</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>87</xmpG:red>
                           <xmpG:green>22</xmpG:green>
                           <xmpG:blue>35</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=61 G=20 B=28</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>61</xmpG:red>
                           <xmpG:green>20</xmpG:green>
                           <xmpG:blue>28</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=117 G=45 B=59</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>117</xmpG:red>
                           <xmpG:green>45</xmpG:green>
                           <xmpG:blue>59</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -302.564 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 302.564 li
450 302.564 li
450 0 li
cp
clp
385.36 202.792 mo
386.377 200.303 386.888 197.621 385.708 195.796 cv
383.307 195.822 379.655 198.321 378.023 200.687 cv
379.352 197.85 380.658 195.094 381.557 192.042 cv
382.275 189.602 385.275 182.318 382.159 179.919 cv
376.241 175.362 370.764 194.738 369.595 197.503 cv
369.127 196.155 368.556 194.073 367.168 193.387 cv
366.281 194.891 365.885 197.259 365.951 199.62 cv
343.695 196.125 322.117 193.762 298.113 197.508 cv
281.246 200.14 264.705 203.734 247.853 206.184 cv
245.887 202.565 238.808 201.769 235.766 205.084 cv
235.624 203.375 233.929 200.222 231.668 200.13 cv
228.906 200.017 228.628 203.049 227.835 204.703 cv
224.782 202.701 222.87 196.769 219.032 196.333 cv
217.07 199.185 219.147 205.028 221.87 208.977 cv
203.641 210.705 185.461 213.063 167.241 214.887 cv
147.781 216.835 132.072 216.935 113.248 212.738 cv
108.829 211.753 104.38 210.791 99.912 209.89 cv
101.162 208.426 102.189 206.72 99.835 205.378 cv
97.5205 204.059 93.771 205.98 92.0437 207.34 cv
93.2053 205.42 94.0809 202.516 91.3915 201.96 cv
88.8189 201.427 85.4516 204.057 83.3275 206.933 cv
81.7448 206.694 80.1611 206.467 78.5771 206.258 cv
66.7955 204.71 54.3541 203.966 42.1052 204.247 cv
42.0352 204.012 41.9485 203.802 41.8666 203.64 cv
40.8766 201.687 39.3105 198.374 36.5175 198.061 cv
32.1329 197.568 33.524 201.529 35.7071 204.49 cv
31.5916 204.709 27.5137 205.044 23.5101 205.518 cv
16.7388 206.32 6.84795 208.568 0 208.624 cv
0 302.561 li
449.999 302.564 li
449.999 208.624 li
436.564 208.822 405.028 206 385.36 202.792 cv
false sop
/0 
[/DeviceRGB] /CSA add_res
.764706 .870588 0 rgb
f
449.999 215.574 mo
435.413 217.154 422.559 220.41 414.713 221.761 cv
372.997 228.94 331.864 236.373 288.604 238.79 cv
247.082 241.11 200.509 242.168 159.079 236.899 cv
127.212 232.846 95.5507 227.943 64.0473 223.03 cv
41.724 219.549 24.3976 213.694 0 215.574 cv
0 302.561 li
449.999 302.564 li
449.999 215.574 li
.537255 .184314 .117647 rgb
f
449.999 214.169 mo
447.004 214.371 442.069 215.063 436.934 215.914 cv
438.086 210.628 440.345 205.565 438.987 199.96 cv
437.613 194.291 433.32 196.621 431.094 200.292 cv
428.66 204.305 429.027 208.014 427.922 212.182 cv
428.163 207.806 427.757 203.49 423.06 204.322 cv
418.363 205.154 421.061 212.875 423.931 218.204 cv
420.32 218.863 417.109 219.458 414.851 219.852 cv
373.153 227.137 330.148 231.693 286.888 234.11 cv
255.16 235.883 222.03 236.936 189.681 234.985 cv
188.886 233.584 185.758 233.585 183.902 233.587 cv
183.544 233.587 183.234 233.587 182.997 233.578 cv
187.116 230.751 179.124 229.625 177.38 232.111 cv
176.505 229.812 176.47 220.813 173.697 220.46 cv
168.883 219.847 170.956 230.243 171.447 232.164 cv
169.553 231.284 164.147 226.979 162.255 227.595 cv
159.445 228.511 160.979 230.671 163.265 232.652 cv
162.178 232.523 161.092 232.392 160.009 232.254 cv
128.142 228.201 96.8281 222.777 65.3247 217.864 cv
43.0015 214.383 13.791 213.045 0 214.169 cv
0 228.259 li
0 228.259 9.7909 226.454 14.2386 227.553 cv
17.881 228.453 24.9334 231.321 27.0364 234.542 cv
28.2117 236.342 26.2224 239.121 27.445 240.785 cv
29.3684 243.404 33.7685 244.341 38.2586 244.669 cv
35.2985 246.852 25.508 254.376 28.7028 258.235 cv
32.009 262.228 42.6367 254.147 45.8801 253.259 cv
45.9195 258.476 48.3738 268.461 56.8551 263.418 cv
63.1705 259.663 62.3681 252.392 60.7389 245.643 cv
66.919 246.348 73.016 247.48 79.1329 248.98 cv
86.4263 250.769 93.3246 253.757 100.911 252.014 cv
103 251.534 107.724 250.172 108.896 248.511 cv
109.547 247.589 108.897 244.91 109.098 244.693 cv
114.324 239.08 131.234 240.047 139.657 241.065 cv
151.166 242.456 162.077 248.353 173.126 246.872 cv
181.071 245.807 185.344 244.578 191.746 247.612 cv
193.048 248.229 193.874 250.178 195.343 250.926 cv
197.387 251.967 200.543 251.9 203.227 251.833 cv
204.054 251.812 204.836 251.791 205.527 251.803 cv
209.118 251.863 212.691 251.572 216.259 251.281 cv
220.386 250.944 224.505 250.607 228.634 250.814 cv
232.673 251.018 254.87 250.083 256.368 249.604 cv
264.049 247.149 271.219 242.255 279.314 240.826 cv
286.612 239.539 290.69 243.06 297.518 244.335 cv
311.557 246.957 325.699 242.808 339.047 239.455 cv
342.38 238.618 345.078 238.084 347.596 237.797 cv
344.95 240.52 342.968 243.784 343.887 246.153 cv
346.686 246.867 349.104 244.294 351.321 243.031 cv
351.375 245.017 350.352 251.873 353.405 252.67 cv
355.909 253.325 358.435 247.608 359.131 245.806 cv
359.45 246.924 359.246 248.163 359.69 249.363 cv
360.395 251.266 364.787 256.493 367.318 256.152 cv
371.667 255.566 368.081 245.289 366.314 243.708 cv
367.655 245.139 373.044 246.228 373.98 244.31 cv
374.538 243.164 372.957 240.641 371.609 238.888 cv
380.756 238.836 390.531 237.36 398.4 234.844 cv
404.234 232.979 404.092 232.111 404.483 227.227 cv
411.85 226.872 419.306 227.32 426.764 227.768 cv
434.538 228.236 442.314 228.703 449.999 228.261 cv
449.999 216.737 450.001 214.169 449.999 214.169 cv
.631373 .717647 .0117647 rgb
f
0 230.686 mo
2.0317 230.751 3.96854 230.622 5.88815 230.494 cv
10.0704 230.213 14.1714 229.933 18.9965 231.661 cv
26.0359 234.183 21.8108 241.403 25.3305 242.664 cv
28.8501 243.924 30.9619 245.816 30.9619 245.816 cv
30.9619 245.816 17.5872 255.902 24.6266 260.315 cv
31.6659 264.728 44.3369 255.902 44.3369 255.902 cv
44.3369 255.902 45.0409 268.51 53.488 266.619 cv
61.9353 264.728 66.1592 254.641 62.6393 247.707 cv
84.4614 253.381 94.3165 257.163 102.06 254.641 cv
109.803 252.12 111.211 247.707 111.211 245.185 cv
111.211 242.664 128.106 239.511 148.52 244.555 cv
168.934 249.598 173.862 250.229 178.789 248.968 cv
183.717 247.707 188.645 247.707 192.868 252.12 cv
197.092 256.533 234.401 253.381 234.401 253.381 cv
234.401 253.381 234.394 274.564 246.389 257.571 cv
258.356 260.723 260.447 263.467 262.558 260.946 cv
264.67 258.424 256.223 250.859 256.223 250.859 cv
256.223 250.859 275.933 240.772 280.861 241.403 cv
285.788 242.033 294.236 247.707 302.683 247.707 cv
311.13 247.707 334.36 243.924 343.512 240.142 cv
339.288 247.076 342.808 250.229 349.143 245.816 cv
347.735 254.641 353.367 259.054 358.294 250.859 cv
361.11 257.793 373.781 265.358 370.261 247.076 cv
377.301 248.337 378.005 244.555 374.485 240.142 cv
383.636 242.664 401.939 238.881 404.754 234.468 cv
407.57 230.055 406.162 228.164 406.162 228.164 cv
406.162 228.164 448.157 230.755 449.999 230.686 cv
449.999 302.564 li
0 302.561 li
0 230.686 li
.501961 .203922 .0705882 rgb
f
0 275.017 mo
0 275.017 8.41146 274.264 12.3969 273.839 cv
24.4973 272.55 36.5683 270.137 49.0409 271.488 cv
56.6078 272.307 64.1203 272.731 71.8384 272.985 cv
82.2853 273.329 92.9969 275.223 103.319 275.16 cv
115.709 275.084 128.391 274.631 140.767 274.231 cv
153.712 273.812 165.401 269.721 178.23 269.753 cv
188.734 269.779 197.937 270.493 208.087 272.097 cv
213.865 273.01 219.072 273.533 224.995 273.71 cv
231.023 273.89 236.36 275.333 242.196 275.955 cv
257.037 277.534 269.697 275.072 283.941 272.688 cv
293.882 271.024 304.01 270.157 313.995 268.638 cv
322.287 267.378 326.629 266.681 334.996 267.864 cv
344.964 269.274 357.592 270.067 367.635 268.761 cv
384.832 266.524 400.767 268.225 418.175 268.518 cv
426.876 268.665 430.674 270.236 438.746 273.498 cv
442.005 274.815 447.388 275.26 449.999 275.017 cv
449.999 268.376 li
444.074 267.907 439.552 267.381 436.293 266.417 cv
424.744 263 426.634 256.684 418.602 258.14 cv
405.786 260.464 392.836 262.08 379.88 264.051 cv
370.099 265.539 358.59 267.964 348.402 267.759 cv
339.19 267.574 332.108 263.686 322.714 263.54 cv
314.028 263.404 305.364 263.408 296.893 264.718 cv
276.539 267.868 258.158 273.234 236.629 271.688 cv
225.978 270.922 215.846 269.255 205.465 267.813 cv
199.831 267.03 194.144 267.24 188.455 267.451 cv
184.094 267.612 179.732 267.773 175.391 267.487 cv
166.96 266.931 158.981 264.19 150.641 263.187 cv
141.847 262.13 132.88 261.165 123.909 261.054 cv
111.714 260.903 100.169 263.855 88.0199 264.244 cv
78.9817 264.532 72.2587 264.596 63.7376 266.89 cv
57.7748 268.495 52.806 268.07 47.4745 267.644 cv
44.9818 267.445 42.4097 267.246 39.6197 267.255 cv
35.1189 267.268 30.0643 267.75 25.7113 268.377 cv
17.7617 269.523 12.1276 270.094 4.13425 268.84 cv
3.17738 268.69 0 268.376 0 268.376 cv
0 275.017 li
.65098 .294118 .145098 rgb
f
130.772 295.786 mo
123.029 298.791 114.136 300.974 105.174 302.553 cv
134.343 302.553 li
138.24 301.879 142.013 301.054 145.881 300.269 cv
152.365 298.952 158.163 297.703 165.004 297.425 cv
173.821 297.066 183.574 297.428 191.947 295.784 cv
196.286 294.933 200.789 294.273 205.29 293.578 cv
216.598 291.831 228.357 290.379 239.835 289.126 cv
243.93 288.679 248.122 288.567 252.249 288.049 cv
256.693 287.491 260.57 286.225 265.078 285.818 cv
279.316 284.533 294.284 284.885 308.682 284.887 cv
318.96 284.888 328.058 286.277 338.437 285.564 cv
352.691 284.585 367.052 284.339 381.387 283.392 cv
396.692 282.381 411.883 282.495 426.876 284.753 cv
432.993 285.675 444.544 285.983 449.999 285.065 cv
449.999 282.388 li
444.829 283.296 442.002 282.822 438.019 282.281 cv
428.702 281.016 419.408 279.145 409.841 278.725 cv
395.857 278.11 381.518 280.063 367.611 280.771 cv
354.272 281.451 340.718 282.619 327.358 282.885 cv
322.807 282.975 321.887 282.232 318.437 281.182 cv
315.581 280.313 313.132 280.332 309.767 280.408 cv
294.131 280.763 278.618 283.004 263 283.405 cv
253.501 283.648 245.639 284.534 236.728 286.696 cv
231.931 287.861 227.376 288.298 222.287 288.585 cv
206.681 289.464 191.023 291.799 175.357 292.099 cv
163.718 292.322 155.9 290.221 145.887 286.984 cv
137.721 284.344 127.995 282.937 119.111 281.457 cv
107.067 279.449 89.1908 280.394 77.7949 283.529 cv
73.0176 284.843 69.7044 285.389 64.4333 285.674 cv
53.04 286.29 41.9301 288.165 30.4336 287.318 cv
22.4801 286.732 17.9635 285.67 9.97779 286.669 cv
7.88999 286.931 4.65235 287.433 0 288.548 cv
0 291.68 li
16.3945 287.162 25.6082 290.754 32.5744 293.068 cv
47.3745 297.985 63.1467 293.167 77.609 290.354 cv
85.9547 288.731 95.8305 287.53 104.621 287.648 cv
111.433 287.739 121.467 288.282 127.708 289.829 cv
133.224 291.195 136.086 293.723 130.772 295.786 cv
f
413.643 287.721 mo
393.683 286.123 373.828 286.387 353.962 288.236 cv
326.712 290.773 299.249 292.706 271.907 294.816 cv
260.498 295.697 249.148 296.304 237.968 298.086 cv
233.566 298.788 229.14 299.864 225.151 301.216 cv
224.258 301.519 222.71 301.991 221.101 302.553 cv
243.8 302.553 li
249.383 301.76 255.042 301.189 260.031 300.518 cv
275.661 298.415 292.022 297.664 307.849 296.166 cv
331.674 293.91 356.26 291.91 379.792 296.399 cv
385.539 297.496 398.091 299.211 402.185 299.352 cv
413.141 299.73 425.862 298.28 449.999 291.68 cv
449.999 288.548 li
433.012 292.945 425.576 288.677 413.643 287.721 cv
f
235.105 269.295 mo
239.323 271.655 251.295 270.608 261.15 269.295 cv
271.006 267.982 228.065 265.356 235.105 269.295 cv
f
164.764 288.53 mo
167.96 290.093 172.07 290.006 175.978 289.998 cv
181.469 289.987 186.911 289.686 192.344 289.215 cv
197.763 288.746 203.169 288.219 208.58 287.712 cv
214.369 287.171 220.231 286.689 225.709 285.344 cv
226.715 285.098 226.579 284.219 225.453 284.166 cv
215.907 283.715 206.061 285.24 196.665 286.126 cv
191.392 286.623 186.099 287.123 180.795 287.475 cv
176.477 287.763 170.228 288.576 166.084 287.467 cv
165.069 287.195 163.697 288.008 164.764 288.53 cv
f
231.482 285.045 mo
233.059 285.011 234.589 284.826 236.151 284.694 cv
237.632 284.569 238.98 284.48 240.322 284.04 cv
241.01 283.814 240.859 283.11 240.104 283 cv
237.389 282.603 233.754 283.196 231.212 283.806 cv
230.215 284.046 230.254 285.072 231.482 285.045 cv
f
127.738 292.005 mo
122.892 290.341 117.488 289.545 111.981 289.318 cv
106.443 289.09 99.9933 289.104 94.786 290.433 cv
93.5765 290.742 93.188 292.008 94.786 292.214 cv
98.1032 292.64 101.51 292.548 104.905 292.456 cv
106.652 292.408 108.396 292.361 110.124 292.384 cv
115.731 292.459 121.007 292.94 126.288 294.142 cv
128.305 294.6 129.58 292.637 127.738 292.005 cv
f
88.7897 290.573 mo
85.8583 290.67 81.9863 290.567 79.5164 291.689 cv
78.5674 292.12 78.6395 293.03 79.8472 293.264 cv
82.8075 293.837 86.3495 292.984 89.2043 292.476 cv
90.8488 292.184 90.5927 290.512 88.7897 290.573 cv
f
163.932 263.541 mo
168.583 264.965 173.331 265.679 178.499 266.061 cv
183.68 266.444 189.429 266.881 194.453 265.77 cv
195.47 265.545 195.549 264.641 194.453 264.435 cv
189.76 263.553 184.639 263.706 179.799 263.406 cv
174.625 263.085 169.554 262.624 164.369 262.537 cv
163.537 262.523 163.152 263.302 163.932 263.541 cv
cp
f
378.952 261.022 mo
374.223 261.646 369.334 262.02 364.897 263.308 cv
364.025 263.561 364.489 264.4 365.372 264.398 cv
370.423 264.382 375.022 263.115 379.543 261.894 cv
380.378 261.669 379.757 260.917 378.952 261.022 cv
f
401.899 276.625 mo
406.86 276.876 412.098 277.267 417.046 277.028 cv
418.057 276.979 418.674 276.072 417.608 275.738 cv
412.721 274.208 406.737 274.332 401.642 275.446 cv
400.599 275.674 400.803 276.569 401.899 276.625 cv
f
421.458 277.462 mo
422.257 277.803 422.977 278.088 423.88 278.312 cv
424.725 278.521 425.612 278.868 426.528 278.671 cv
427.167 278.534 427.534 278.086 427.164 277.699 cv
426.642 277.152 425.61 277.051 424.695 276.862 cv
423.749 276.666 422.849 276.605 421.858 276.544 cv
421.008 276.492 420.877 277.213 421.458 277.462 cv
cp
f
397.089 276.104 mo
394.407 276.066 390.515 276.069 388.242 277.083 cv
387.357 277.478 387.399 278.372 388.556 278.573 cv
391.257 279.044 394.853 278.371 397.49 277.948 cv
399.162 277.68 398.776 276.128 397.089 276.104 cv
f
65.0848 278.952 mo
67.8156 278.45 70.7638 278.364 73.4283 277.752 cv
74.0231 277.616 74.1927 276.976 73.4283 276.892 cv
70.4347 276.562 67.3794 277.241 64.6243 277.914 cv
63.6117 278.161 63.9911 279.154 65.0848 278.952 cv
f
65.4251 283.576 mo
73.6782 281.977 82.4819 281.472 90.6451 279.761 cv
91.415 279.6 91.6117 278.756 90.6451 278.664 cv
81.5046 277.792 72.6977 279.979 64.7767 282.62 cv
63.9415 282.898 64.5105 283.753 65.4251 283.576 cv
f
gsave
127.546 302.553 mo
98.9783 302.553 li
98.9783 302.553 li
98.9783 302.553 99.8715 298.401 101.165 292.532 cv
102.41 292.523 103.658 292.489 104.905 292.456 cv
106.337 292.417 107.767 292.378 109.188 292.378 cv
109.5 292.378 109.812 292.38 110.124 292.384 cv
113.126 292.424 116.035 292.581 118.899 292.902 cv
120.359 294.76 121.99 296.549 123.583 298.256 cv
117.73 300.037 111.469 301.444 105.174 302.553 cv
127.546 302.553 li
127.546 302.553 li
clp
98.9783 292.378 mo
127.546 292.378 li
127.546 302.553 li
98.9783 302.553 li
cp
.709804 .270588 .0901961 rgb
f
grestore
127.546 302.553 mo
105.174 302.553 li
111.469 301.444 117.73 300.037 123.583 298.256 cv
124.8 299.56 125.995 300.817 127.075 302.021 cv
127.233 302.197 127.388 302.376 127.546 302.553 cv
.796078 .392157 .188235 rgb
f
109.496 249.97 mo
109.495 249.97 109.494 249.969 109.493 249.969 cv
110.843 248.223 111.208 246.473 111.211 245.2 cv
111.208 246.473 110.846 248.224 109.496 249.97 cv
111.211 245.2 mo
111.211 245.195 111.211 245.19 111.211 245.185 cv
111.211 245.19 111.211 245.195 111.211 245.2 cv
111.211 245.181 mo
111.211 245.18 111.211 245.18 111.211 245.179 cv
111.211 245.18 111.211 245.18 111.211 245.181 cv
111.211 245.176 mo
111.211 245.175 111.211 245.175 111.211 245.174 cv
111.211 245.175 111.211 245.175 111.211 245.176 cv
111.211 245.171 mo
111.211 245.17 111.211 245.17 111.211 245.169 cv
111.211 245.17 111.211 245.17 111.211 245.171 cv
111.212 245.166 mo
111.212 245.166 111.212 245.165 111.212 245.164 cv
111.212 245.165 111.212 245.166 111.212 245.166 cv
111.212 245.161 mo
111.212 245.161 111.212 245.16 111.212 245.16 cv
111.212 245.16 111.212 245.16 111.212 245.161 cv
111.212 245.156 mo
111.212 245.156 111.212 245.155 111.212 245.155 cv
111.212 245.155 111.212 245.156 111.212 245.156 cv
111.212 245.151 mo
111.212 245.151 111.212 245.15 111.212 245.15 cv
111.212 245.15 111.212 245.151 111.212 245.151 cv
.729412 .243137 .152941 rgb
f
116.603 289.652 mo
115.077 289.491 113.533 289.382 111.981 289.318 cv
110.388 289.252 108.72 289.206 107.028 289.206 cv
105.313 289.206 103.574 289.253 101.862 289.373 cv
101.988 288.807 102.116 288.232 102.246 287.647 cv
102.638 287.642 103.028 287.64 103.417 287.64 cv
103.821 287.64 104.221 287.642 104.621 287.648 cv
107.851 287.691 111.806 287.836 115.737 288.141 cv
116.004 288.649 116.294 289.152 116.603 289.652 cv
113.819 280.792 mo
110.89 280.528 107.762 280.401 104.567 280.401 cv
104.335 280.401 104.103 280.401 103.87 280.403 cv
104.266 278.653 104.669 276.888 105.069 275.147 cv
108.207 275.119 111.362 275.068 114.524 275.001 cv
114.105 276.935 113.809 278.877 113.819 280.792 cv
108.714 262.096 mo
110.591 256.075 111.921 251.172 109.496 249.97 cv
110.846 248.224 111.208 246.473 111.211 245.2 cv
111.211 245.2 li
111.211 245.195 111.211 245.19 111.211 245.185 cv
111.211 245.185 li
111.211 245.184 111.211 245.182 111.211 245.181 cv
111.211 245.18 111.211 245.18 111.211 245.179 cv
111.211 245.178 111.211 245.177 111.211 245.176 cv
111.211 245.175 111.211 245.175 111.211 245.174 cv
111.211 245.173 111.211 245.172 111.211 245.171 cv
111.211 245.17 111.211 245.17 111.211 245.169 cv
111.211 245.168 111.211 245.167 111.212 245.166 cv
111.212 245.166 111.212 245.165 111.212 245.164 cv
111.212 245.163 111.212 245.162 111.212 245.161 cv
111.212 245.16 111.212 245.16 111.212 245.16 cv
111.212 245.158 111.212 245.157 111.212 245.156 cv
111.212 245.156 111.212 245.155 111.212 245.155 cv
111.212 245.154 111.212 245.152 111.212 245.151 cv
111.212 245.151 111.212 245.15 111.212 245.15 cv
111.265 244.307 113.193 243.4 116.491 242.754 cv
116.227 248.862 117.394 255.149 117.186 261.254 cv
114.344 261.444 111.526 261.75 108.714 262.096 cv
.709804 .270588 .0901961 rgb
f
105.069 275.147 mo
105.262 274.309 105.454 273.476 105.646 272.653 cv
106.475 269.083 107.678 265.419 108.714 262.096 cv
111.526 261.75 114.344 261.444 117.186 261.254 cv
117.136 262.739 117.004 264.215 116.75 265.674 cv
116.232 268.655 115.213 271.817 114.524 275.001 cv
111.362 275.068 108.207 275.119 105.069 275.147 cv
.796078 .392157 .188235 rgb
f
115.737 288.141 mo
111.806 287.836 107.851 287.691 104.621 287.648 cv
104.221 287.642 103.821 287.64 103.417 287.64 cv
103.028 287.64 102.638 287.642 102.246 287.647 cv
102.761 285.331 103.31 282.881 103.87 280.403 cv
104.103 280.401 104.335 280.401 104.567 280.401 cv
107.762 280.401 110.89 280.528 113.819 280.792 cv
113.826 282.106 113.978 283.408 114.334 284.685 cv
114.661 285.855 115.142 287.008 115.737 288.141 cv
f
118.899 292.902 mo
116.035 292.581 113.126 292.424 110.124 292.384 cv
109.812 292.38 109.5 292.378 109.188 292.378 cv
107.767 292.378 106.337 292.417 104.905 292.456 cv
103.658 292.489 102.41 292.523 101.165 292.532 cv
101.386 291.525 101.62 290.468 101.862 289.373 cv
103.574 289.253 105.313 289.206 107.028 289.206 cv
108.72 289.206 110.388 289.252 111.981 289.318 cv
113.533 289.382 115.077 289.491 116.603 289.652 cv
117.287 290.757 118.065 291.841 118.899 292.902 cv
f
157.015 266.767 mo
154.444 265.858 152.501 265.163 149.475 264.877 cv
146.684 264.613 144.393 264.81 141.804 265.484 cv
140.858 265.73 140.737 266.538 141.804 266.76 cv
146.706 267.779 151.421 267.681 156.478 268 cv
157.56 268.068 157.881 267.073 157.015 266.767 cv
cp
.501961 .203922 .0705882 rgb
f
134.23 264.782 mo
133.521 264.393 132.812 264.012 132.035 264.069 cv
131.316 264.121 130.742 264.588 130.188 265.191 cv
129.865 265.542 130.023 266.226 130.309 266.49 cv
130.83 266.972 131.328 267.364 131.958 267.488 cv
132.629 267.62 133.285 267.525 133.96 267.535 cv
135.178 267.552 135.237 265.336 134.23 264.782 cv
cp
f
390.769 265.762 mo
396.058 265.69 401.402 264.502 406.501 263.707 cv
411.7 262.897 417.031 262.366 421.694 260.672 cv
422.624 260.334 422.167 259.508 421.169 259.468 cv
415.754 259.25 410.579 260.321 405.369 261.155 cv
400.291 261.968 394.695 262.583 390.082 264.185 cv
388.911 264.592 389.422 265.781 390.769 265.762 cv
f
421.056 264.284 mo
421.499 264.421 421.94 264.62 422.411 264.684 cv
422.865 264.746 423.378 264.664 423.856 264.642 cv
425.247 264.578 426.091 261.753 424.782 261.57 cv
424.334 261.507 423.878 261.374 423.401 261.402 cv
422.903 261.431 422.362 261.582 421.85 261.675 cv
420.896 261.85 420.238 264.032 421.056 264.284 cv
cp
f
0 282.388 mo
0 285.065 li
0 285.065 6.51292 284.112 9.514 283.83 cv
15.9374 283.226 22.4837 283.143 28.9607 283.394 cv
35.0164 283.63 41.0197 284.539 47.1108 284.28 cv
49.8089 284.165 52.4946 283.904 55.0686 283.383 cv
58.0683 282.775 59.8654 282.027 62.092 280.658 cv
63.0471 280.07 62.0315 279.264 60.8883 279.372 cv
54.2032 280.003 47.8142 281.23 40.931 280.881 cv
34.525 280.557 28.2863 279.893 21.823 280.086 cv
15.5693 280.273 9.31787 280.864 3.26525 281.86 cv
2.24551 282.028 0 282.388 0 282.388 cv
.65098 .294118 .145098 rgb
f
449.999 246.753 mo
442.706 247.606 435.262 248.6 428.078 249.756 cv
420.07 251.043 412.167 252.565 404.359 254.261 cv
397.058 255.847 389.294 257.642 383.174 260.626 cv
382.641 260.887 383.07 261.547 383.752 261.493 cv
391.296 260.903 398.655 259.124 405.858 257.642 cv
413.705 256.027 421.655 254.603 429.657 253.316 cv
436.322 252.244 443.239 251.301 449.999 250.489 cv
449.999 246.753 li
f
63.1425 257.565 mo
63.1422 257.563 63.1419 257.561 63.1416 257.56 cv
64.22 254.337 64.1639 250.794 62.6933 247.815 cv
64.1646 250.795 64.2226 254.341 63.1425 257.565 cv
96.6368 255.438 mo
96.6295 255.438 96.6231 255.438 96.6158 255.438 cv
96.6231 255.438 96.6295 255.438 96.6368 255.438 cv
96.6368 255.438 li
96.6381 255.438 mo
98.6105 255.437 100.385 255.187 102.06 254.641 cv
100.385 255.187 98.6111 255.437 96.6381 255.438 cv
102.06 254.641 mo
105.89 253.394 108.167 251.684 109.493 249.969 cv
109.494 249.97 109.494 249.971 109.494 249.972 cv
108.168 251.686 105.888 253.395 102.06 254.641 cv
75.4719 251.147 mo
75.4667 251.146 75.4644 251.145 75.4592 251.143 cv
75.4634 251.145 75.4678 251.146 75.4719 251.147 cv
75.2683 251.092 mo
75.1463 251.058 75.0229 251.025 74.8999 250.991 cv
75.0229 251.025 75.1463 251.058 75.2683 251.092 cv
74.8676 250.983 mo
71.4708 250.059 67.6879 249.026 63.4469 247.917 cv
67.6879 249.026 71.4708 250.059 74.8676 250.983 cv
63.427 247.912 mo
63.402 247.906 63.3759 247.899 63.3509 247.892 cv
63.3759 247.899 63.402 247.906 63.427 247.912 cv
62.692 247.812 mo
62.6898 247.808 62.6876 247.803 62.6854 247.799 cv
62.6877 247.803 62.6897 247.807 62.692 247.812 cv
62.6826 247.793 mo
62.6806 247.789 62.6786 247.785 62.6766 247.781 cv
62.6787 247.785 62.6805 247.789 62.6826 247.793 cv
62.673 247.774 mo
62.6711 247.77 62.6693 247.766 62.6675 247.763 cv
62.6694 247.767 62.6711 247.77 62.673 247.774 cv
62.6631 247.754 mo
62.6615 247.751 62.6599 247.748 62.6583 247.744 cv
62.6598 247.747 62.6617 247.751 62.6631 247.754 cv
62.6526 247.733 mo
62.6513 247.731 62.6501 247.728 62.6488 247.726 cv
62.6501 247.728 62.6513 247.731 62.6526 247.733 cv
62.7152 247.727 mo
62.69 247.72 62.6646 247.713 62.6393 247.707 cv
62.6646 247.713 62.69 247.72 62.7152 247.727 cv
.611765 .2 .121569 rgb
f
98.9783 302.553 mo
85.8693 302.553 li
85.8693 302.553 83.1201 298.614 79.5729 293.194 cv
79.6568 293.221 79.7482 293.245 79.8472 293.264 cv
80.5434 293.399 81.2721 293.455 82.0161 293.455 cv
84.4358 293.455 87.0208 292.864 89.2043 292.476 cv
90.8198 292.189 90.601 290.571 88.8836 290.571 cv
88.8528 290.571 88.8215 290.571 88.7897 290.573 cv
85.8583 290.67 81.9863 290.567 79.5164 291.689 cv
79.2173 291.825 79.0196 292.009 78.9269 292.204 cv
78.5314 291.596 78.1264 290.97 77.7173 290.333 cv
85.1027 288.902 93.6763 287.804 101.629 287.656 cv
101.508 288.255 101.391 288.842 101.278 289.417 cv
99.0108 289.6 96.8052 289.918 94.786 290.433 cv
93.5765 290.742 93.188 292.008 94.786 292.214 cv
96.7038 292.46 98.6516 292.533 100.61 292.533 cv
100.633 292.533 100.657 292.533 100.681 292.533 cv
99.5702 298.487 98.9783 302.553 98.9783 302.553 cv
98.9783 302.553 li
98.9783 302.553 li
74.0258 284.469 mo
73.6031 283.781 73.1816 283.089 72.7652 282.398 cv
78.7642 281.579 84.8655 280.973 90.6451 279.761 cv
91.415 279.6 91.6117 278.756 90.6451 278.664 cv
89.2532 278.531 87.8681 278.469 86.4936 278.469 cv
81.3833 278.469 76.4082 279.322 71.666 280.555 cv
71.213 279.788 70.7687 279.025 70.3358 278.268 cv
71.3889 278.137 72.4286 277.982 73.4283 277.752 cv
74.0231 277.616 74.1927 276.976 73.4283 276.892 cv
72.8909 276.832 72.3514 276.806 71.8122 276.806 cv
71.0678 276.806 70.3234 276.857 69.5849 276.943 cv
68.7872 275.519 68.0401 274.133 67.3686 272.817 cv
68.8521 272.88 70.3413 272.936 71.8384 272.985 cv
82.1131 273.324 92.6451 275.161 102.809 275.161 cv
102.98 275.161 103.149 275.161 103.319 275.16 cv
103.697 275.158 104.075 275.155 104.454 275.152 cv
104.007 276.917 103.585 278.68 103.189 280.408 cv
94.1787 280.511 84.7727 281.609 77.7949 283.529 cv
76.4478 283.899 75.2168 284.209 74.0258 284.469 cv
64.6497 266.651 mo
64.317 265.661 64.1075 264.798 64.0473 264.098 cv
63.8623 261.942 63.5302 259.7 63.1425 257.565 cv
64.2226 254.341 64.1646 250.795 62.6933 247.815 cv
62.6928 247.814 62.6924 247.813 62.692 247.812 cv
62.6897 247.807 62.6877 247.803 62.6854 247.799 cv
62.6845 247.797 62.6836 247.795 62.6826 247.793 cv
62.6805 247.789 62.6787 247.785 62.6766 247.781 cv
62.6754 247.779 62.6742 247.776 62.673 247.774 cv
62.6711 247.77 62.6694 247.767 62.6675 247.763 cv
62.666 247.76 62.6646 247.757 62.6631 247.754 cv
62.6617 247.751 62.6598 247.747 62.6583 247.744 cv
62.6564 247.741 62.6545 247.737 62.6526 247.733 cv
62.6513 247.731 62.6501 247.728 62.6488 247.726 cv
62.6457 247.719 62.6424 247.713 62.6393 247.707 cv
62.6393 247.707 li
62.6393 247.707 li
62.6646 247.713 62.69 247.72 62.7152 247.727 cv
62.9281 247.782 63.1404 247.837 63.3509 247.892 cv
63.3759 247.899 63.402 247.906 63.427 247.912 cv
63.4349 247.914 63.439 247.915 63.4469 247.917 cv
67.6879 249.026 71.4708 250.059 74.8676 250.983 cv
74.8781 250.986 74.8894 250.989 74.8999 250.991 cv
75.0229 251.025 75.1463 251.058 75.2683 251.092 cv
75.333 251.109 75.3948 251.126 75.4592 251.143 cv
75.4644 251.145 75.4667 251.146 75.4719 251.147 cv
85.024 253.742 91.4911 255.433 96.6158 255.438 cv
96.6231 255.438 96.6295 255.438 96.6368 255.438 cv
96.6368 255.438 li
96.6368 255.438 li
96.6373 255.438 96.6376 255.438 96.6381 255.438 cv
98.6111 255.437 100.385 255.187 102.06 254.641 cv
102.06 254.641 li
102.06 254.641 li
105.888 253.395 108.168 251.686 109.494 249.972 cv
111.065 253.79 110.215 257.314 108.589 262.111 cv
101.773 262.952 94.9968 264.021 88.0199 264.244 cv
79.3066 264.522 72.745 264.591 64.6497 266.651 cv
.580392 .219608 .0745098 rgb
f
102.809 275.161 mo
92.6451 275.161 82.1131 273.324 71.8384 272.985 cv
70.3413 272.936 68.8521 272.88 67.3686 272.817 cv
66.1803 270.487 65.2285 268.375 64.6497 266.651 cv
72.745 264.591 79.3066 264.522 88.0199 264.244 cv
94.9968 264.021 101.773 262.952 108.589 262.111 cv
107.411 265.584 105.827 269.725 104.459 275.13 cv
104.457 275.137 104.456 275.144 104.454 275.152 cv
104.075 275.155 103.697 275.158 103.319 275.16 cv
103.149 275.161 102.98 275.161 102.809 275.161 cv
.705882 .317647 .152941 rgb
f
77.7173 290.333 mo
76.5134 288.461 75.2619 286.479 74.0258 284.469 cv
75.2168 284.209 76.4478 283.899 77.7949 283.529 cv
84.7727 281.609 94.1787 280.511 103.189 280.408 cv
102.614 282.921 102.093 285.365 101.629 287.656 cv
93.6763 287.804 85.1027 288.902 77.7173 290.333 cv
f
100.61 292.533 mo
98.6516 292.533 96.7038 292.46 94.786 292.214 cv
93.188 292.008 93.5765 290.742 94.786 290.433 cv
96.8052 289.918 99.0108 289.6 101.278 289.417 cv
101.065 290.501 100.866 291.544 100.681 292.533 cv
100.657 292.533 100.633 292.533 100.61 292.533 cv
f
82.0161 293.455 mo
81.2721 293.455 80.5434 293.399 79.8472 293.264 cv
79.7482 293.245 79.6568 293.221 79.5729 293.194 cv
79.3599 292.868 79.1453 292.539 78.9269 292.204 cv
79.0196 292.009 79.2173 291.825 79.5164 291.689 cv
81.9863 290.567 85.8583 290.67 88.7897 290.573 cv
88.8215 290.571 88.8528 290.571 88.8836 290.571 cv
90.601 290.571 90.8198 292.189 89.2043 292.476 cv
87.0208 292.864 84.4358 293.455 82.0161 293.455 cv
f
70.3358 278.268 mo
70.0813 277.824 69.8306 277.381 69.5849 276.943 cv
70.3234 276.857 71.0678 276.806 71.8122 276.806 cv
72.3514 276.806 72.8909 276.832 73.4283 276.892 cv
74.1927 276.976 74.0231 277.616 73.4283 277.752 cv
72.4286 277.982 71.3889 278.137 70.3358 278.268 cv
f
72.7652 282.398 mo
72.3944 281.783 72.0279 281.169 71.666 280.555 cv
76.4082 279.322 81.3833 278.469 86.4936 278.469 cv
87.8681 278.469 89.2532 278.531 90.6451 278.664 cv
91.6117 278.756 91.415 279.6 90.6451 279.761 cv
84.8655 280.973 78.7642 281.579 72.7652 282.398 cv
f
401.472 302.553 mo
368.636 302.553 li
368.636 302.553 370.225 299.539 372.345 295.193 cv
374.838 295.528 377.32 295.928 379.792 296.399 cv
385.539 297.496 398.091 299.211 402.185 299.352 cv
402.636 299.368 403.092 299.38 403.55 299.389 cv
402.291 301.368 401.472 302.553 401.472 302.553 cv
.580392 .219608 .0745098 rgb
f
376.101 246.127 mo
376.099 246.123 376.097 246.12 376.095 246.116 cv
376.095 246.116 376.095 246.116 376.095 246.115 cv
376.095 246.116 li
376.095 246.116 li
377.051 244.831 376.448 242.66 374.599 240.287 cv
376.451 242.664 377.063 244.843 376.101 246.127 cv
381.671 240.951 mo
381.671 240.951 381.671 240.951 381.67 240.951 cv
381.671 240.951 381.671 240.951 381.671 240.951 cv
381.671 240.951 li
381.685 240.951 mo
390.921 240.948 402.326 237.962 404.683 234.575 cv
402.326 237.962 390.921 240.949 381.685 240.951 cv
374.596 240.282 mo
374.593 240.279 374.59 240.275 374.587 240.271 cv
374.59 240.275 374.593 240.279 374.596 240.282 cv
374.579 240.26 mo
374.575 240.256 374.572 240.252 374.569 240.248 cv
374.572 240.252 374.575 240.256 374.579 240.26 cv
374.559 240.236 mo
374.558 240.234 374.556 240.232 374.554 240.229 cv
374.556 240.232 374.557 240.234 374.559 240.236 cv
374.54 240.211 mo
374.538 240.209 374.537 240.208 374.536 240.206 cv
374.537 240.208 374.538 240.209 374.54 240.211 cv
374.523 240.189 mo
374.522 240.188 374.521 240.187 374.52 240.186 cv
374.521 240.187 374.522 240.188 374.523 240.189 cv
374.504 240.166 mo
374.503 240.165 374.502 240.163 374.501 240.162 cv
374.502 240.163 374.503 240.165 374.504 240.166 cv
374.55 240.16 mo
374.528 240.154 374.507 240.148 374.485 240.142 cv
374.507 240.148 374.528 240.154 374.55 240.16 cv
404.69 234.564 mo
404.694 234.559 404.697 234.554 404.701 234.549 cv
404.697 234.554 404.694 234.559 404.69 234.564 cv
404.705 234.543 mo
404.707 234.541 404.708 234.538 404.71 234.536 cv
404.708 234.538 404.707 234.541 404.705 234.543 cv
404.721 234.519 mo
404.722 234.518 404.721 234.519 404.722 234.518 cv
404.721 234.519 404.722 234.518 404.721 234.519 cv
404.732 234.502 mo
404.735 234.498 404.738 234.494 404.74 234.49 cv
404.738 234.494 404.735 234.498 404.732 234.502 cv
404.768 234.447 mo
404.771 234.442 404.775 234.436 404.778 234.431 cv
404.774 234.436 404.771 234.442 404.768 234.447 cv
404.78 234.428 mo
405.823 232.784 406.277 231.493 406.439 230.521 cv
406.439 230.521 406.439 230.521 406.439 230.522 cv
406.277 231.494 405.822 232.785 404.78 234.428 cv
.611765 .2 .121569 rgb
f
410.388 287.477 mo
402.621 286.933 394.866 286.669 387.122 286.669 cv
383.5 286.669 379.879 286.727 376.259 286.841 cv
376.735 285.779 377.208 284.701 377.669 283.622 cv
378.908 283.55 380.149 283.473 381.387 283.392 cv
387.246 283.005 393.089 282.782 398.91 282.782 cv
403.433 282.782 407.943 282.917 412.439 283.212 cv
411.787 284.656 411.095 286.086 410.388 287.477 cv
379.176 279.983 mo
381.084 275.201 382.572 270.69 382.875 267.666 cv
384.271 267.637 385.664 267.623 387.055 267.623 cv
396.828 267.623 406.527 268.274 416.71 268.49 cv
416.634 270.539 416.185 272.814 415.487 275.188 cv
413.552 274.784 411.501 274.599 409.441 274.599 cv
406.783 274.599 404.109 274.906 401.642 275.446 cv
400.599 275.674 400.803 276.569 401.899 276.625 cv
405.771 276.821 409.813 277.102 413.752 277.102 cv
414.13 277.102 414.506 277.1 414.881 277.094 cv
414.665 277.729 414.434 278.369 414.191 279.01 cv
412.746 278.886 411.297 278.789 409.841 278.725 cv
407.984 278.643 406.12 278.607 404.252 278.607 cv
395.926 278.607 387.514 279.329 379.176 279.983 cv
395.719 276.093 mo
393.203 276.093 390.152 276.231 388.242 277.083 cv
387.357 277.478 387.399 278.372 388.556 278.573 cv
389.207 278.687 389.911 278.734 390.64 278.734 cv
392.936 278.734 395.489 278.269 397.49 277.948 cv
399.162 277.68 398.776 276.128 397.089 276.104 cv
396.659 276.098 396.199 276.093 395.719 276.093 cv
382.626 263.638 mo
381.665 258.376 378.623 251.35 376.101 246.127 cv
377.063 244.843 376.451 242.664 374.599 240.287 cv
374.598 240.286 374.597 240.284 374.596 240.282 cv
374.593 240.279 374.59 240.275 374.587 240.271 cv
374.584 240.267 374.581 240.264 374.579 240.26 cv
374.575 240.256 374.572 240.252 374.569 240.248 cv
374.566 240.244 374.563 240.24 374.559 240.236 cv
374.557 240.234 374.556 240.232 374.554 240.229 cv
374.549 240.223 374.544 240.217 374.54 240.211 cv
374.538 240.209 374.537 240.208 374.536 240.206 cv
374.531 240.201 374.527 240.195 374.523 240.189 cv
374.522 240.188 374.521 240.187 374.52 240.186 cv
374.515 240.179 374.509 240.173 374.504 240.166 cv
374.503 240.165 374.502 240.163 374.501 240.162 cv
374.495 240.155 374.49 240.148 374.485 240.142 cv
374.485 240.142 li
374.485 240.142 li
374.507 240.148 374.528 240.154 374.55 240.16 cv
376.571 240.707 379.032 240.951 381.67 240.951 cv
381.671 240.951 381.671 240.951 381.671 240.951 cv
381.671 240.951 li
381.671 240.951 li
381.676 240.951 381.681 240.951 381.685 240.951 cv
390.921 240.949 402.326 237.962 404.683 234.575 cv
404.686 234.571 404.688 234.568 404.69 234.564 cv
404.694 234.559 404.697 234.554 404.701 234.549 cv
404.702 234.547 404.704 234.545 404.705 234.543 cv
404.707 234.541 404.708 234.538 404.71 234.536 cv
404.714 234.53 404.718 234.524 404.721 234.519 cv
404.722 234.518 404.721 234.519 404.722 234.518 cv
404.725 234.513 404.729 234.508 404.732 234.502 cv
404.735 234.498 404.738 234.494 404.74 234.49 cv
404.745 234.482 404.75 234.475 404.754 234.468 cv
404.759 234.461 404.763 234.454 404.768 234.447 cv
404.771 234.442 404.774 234.436 404.778 234.431 cv
404.779 234.43 404.779 234.429 404.78 234.428 cv
405.822 232.785 406.277 231.494 406.439 230.522 cv
408.361 235.49 411.535 244.086 413.849 252.299 cv
410.67 252.922 407.507 253.577 404.359 254.261 cv
397.058 255.847 389.294 257.642 383.174 260.626 cv
382.661 260.877 383.038 261.496 383.674 261.496 cv
383.699 261.496 383.725 261.495 383.752 261.493 cv
391.296 260.903 398.655 259.124 405.858 257.642 cv
408.828 257.031 411.812 256.447 414.808 255.888 cv
415.047 256.838 415.27 257.777 415.473 258.694 cv
404.586 260.573 393.612 262.005 382.626 263.638 cv
.580392 .219608 .0745098 rgb
f
416.71 268.49 mo
406.527 268.274 396.828 267.623 387.055 267.623 cv
385.664 267.623 384.271 267.637 382.875 267.666 cv
382.913 267.294 382.932 266.944 382.932 266.619 cv
382.932 266.619 li
382.932 266.619 li
382.932 265.72 382.823 264.716 382.626 263.638 cv
393.612 262.005 404.586 260.573 415.473 258.694 cv
415.543 259.01 415.61 259.325 415.675 259.637 cv
412.203 259.956 408.794 260.607 405.369 261.155 cv
400.291 261.968 394.695 262.583 390.082 264.185 cv
388.92 264.589 389.414 265.762 390.738 265.762 cv
390.748 265.762 390.759 265.762 390.769 265.762 cv
396.058 265.69 401.402 264.502 406.501 263.707 cv
409.733 263.204 413.016 262.808 416.157 262.174 cv
416.515 264.289 416.721 266.226 416.721 267.88 cv
416.721 268.081 416.717 268.285 416.71 268.49 cv
.705882 .317647 .152941 rgb
f
377.669 283.622 mo
378.19 282.405 378.696 281.185 379.176 279.983 cv
387.514 279.329 395.926 278.607 404.252 278.607 cv
406.12 278.607 407.984 278.643 409.841 278.725 cv
411.297 278.789 412.746 278.886 414.191 279.01 cv
413.66 280.407 413.068 281.817 412.439 283.212 cv
407.943 282.917 403.433 282.782 398.91 282.782 cv
393.089 282.782 387.246 283.005 381.387 283.392 cv
380.149 283.473 378.908 283.55 377.669 283.622 cv
f
403.55 299.389 mo
403.092 299.38 402.636 299.368 402.185 299.352 cv
398.091 299.211 385.539 297.496 379.792 296.399 cv
377.32 295.928 374.838 295.528 372.345 295.193 cv
373.544 292.733 374.913 289.848 376.259 286.841 cv
379.879 286.727 383.5 286.669 387.122 286.669 cv
394.866 286.669 402.621 286.933 410.388 287.477 cv
407.943 292.285 405.314 296.616 403.55 299.389 cv
f
413.752 277.102 mo
409.813 277.102 405.771 276.821 401.899 276.625 cv
400.803 276.569 400.599 275.674 401.642 275.446 cv
404.109 274.906 406.783 274.599 409.441 274.599 cv
411.501 274.599 413.552 274.784 415.487 275.188 cv
415.302 275.818 415.099 276.453 414.881 277.094 cv
414.506 277.1 414.13 277.102 413.752 277.102 cv
f
390.64 278.734 mo
389.911 278.734 389.207 278.687 388.556 278.573 cv
387.399 278.372 387.357 277.478 388.242 277.083 cv
390.152 276.231 393.203 276.093 395.719 276.093 cv
396.199 276.093 396.659 276.098 397.089 276.104 cv
398.776 276.128 399.162 277.68 397.49 277.948 cv
395.489 278.269 392.936 278.734 390.64 278.734 cv
f
390.738 265.762 mo
389.414 265.762 388.92 264.589 390.082 264.185 cv
394.695 262.583 400.291 261.968 405.369 261.155 cv
408.794 260.607 412.203 259.956 415.675 259.637 cv
415.857 260.506 416.018 261.352 416.157 262.174 cv
413.016 262.808 409.733 263.204 406.501 263.707 cv
401.402 264.502 396.058 265.69 390.769 265.762 cv
390.759 265.762 390.748 265.762 390.738 265.762 cv
.580392 .219608 .0745098 rgb
f
383.674 261.496 mo
383.038 261.496 382.661 260.877 383.174 260.626 cv
389.294 257.642 397.058 255.847 404.359 254.261 cv
407.507 253.577 410.67 252.922 413.849 252.299 cv
414.19 253.508 414.512 254.707 414.808 255.888 cv
411.812 256.447 408.828 257.031 405.858 257.642 cv
398.655 259.124 391.296 260.903 383.752 261.493 cv
383.725 261.495 383.699 261.496 383.674 261.496 cv
.705882 .317647 .152941 rgb
f
238.756 264.172 mo
234.511 264.172 234.404 253.933 234.401 253.402 cv
234.404 253.928 234.512 263.954 238.779 263.953 cv
240.526 263.953 242.97 262.272 246.389 257.571 cv
242.954 262.437 240.505 264.172 238.756 264.172 cv
260.623 261.932 mo
260.61 261.932 260.598 261.932 260.586 261.932 cv
260.598 261.932 260.61 261.932 260.623 261.932 cv
260.623 261.932 li
260.624 261.932 mo
261.398 261.932 261.974 261.639 262.549 260.957 cv
261.974 261.64 261.399 261.932 260.624 261.932 cv
260.437 261.927 mo
260.415 261.926 260.392 261.924 260.369 261.923 cv
260.392 261.924 260.415 261.926 260.437 261.927 cv
260.361 261.922 mo
260.352 261.921 260.342 261.921 260.333 261.92 cv
260.342 261.921 260.352 261.921 260.361 261.922 cv
260.303 261.917 mo
260.301 261.917 260.298 261.917 260.296 261.917 cv
260.298 261.917 260.301 261.917 260.303 261.917 cv
260.258 261.913 mo
260.247 261.912 260.237 261.911 260.227 261.91 cv
260.237 261.911 260.247 261.912 260.258 261.913 cv
260.215 261.908 mo
260.206 261.907 260.196 261.906 260.187 261.905 cv
260.196 261.906 260.206 261.907 260.215 261.908 cv
260.142 261.899 mo
260.135 261.898 260.127 261.898 260.12 261.897 cv
260.127 261.898 260.135 261.898 260.142 261.899 cv
260.111 261.895 mo
258.035 261.614 254.571 259.774 246.969 257.726 cv
254.572 259.774 258.035 261.615 260.111 261.895 cv
246.961 257.724 mo
246.932 257.716 246.904 257.708 246.875 257.7 cv
246.904 257.708 246.932 257.716 246.961 257.724 cv
246.801 257.681 mo
246.676 257.647 246.55 257.614 246.422 257.58 cv
246.55 257.614 246.676 257.647 246.801 257.681 cv
209.999 254.471 mo
204.03 254.471 198.442 254.177 195.247 253.282 cv
195.246 253.281 195.246 253.28 195.246 253.28 cv
198.441 254.176 204.031 254.471 210.007 254.471 cv
221.45 254.47 234.3 253.389 234.4 253.381 cv
234.299 253.389 221.446 254.471 209.999 254.471 cv
234.401 253.4 mo
234.401 253.4 234.401 253.399 234.401 253.399 cv
234.401 253.4 234.401 253.4 234.401 253.4 cv
280.373 241.374 mo
280.373 241.374 li
280.373 241.374 li
280.373 241.374 li
.611765 .2 .121569 rgb
f
248.474 302.553 mo
209.524 302.553 li
209.524 302.553 208.342 298.565 207.566 293.231 cv
218.171 291.637 229.125 290.295 239.835 289.126 cv
243.93 288.679 248.122 288.567 252.249 288.049 cv
253.076 287.945 253.883 287.817 254.679 287.674 cv
253.224 290.917 251.928 293.978 250.901 296.472 cv
246.569 296.892 242.256 297.403 237.968 298.086 cv
233.566 298.788 229.14 299.864 225.151 301.216 cv
224.258 301.519 222.71 301.991 221.101 302.553 cv
243.8 302.553 li
245.441 302.32 247.089 302.106 248.725 301.903 cv
248.561 302.325 248.474 302.553 248.474 302.553 cv
207.15 289.774 mo
207.091 289.145 207.041 288.506 207.002 287.861 cv
207.528 287.811 208.054 287.762 208.58 287.712 cv
214.369 287.171 220.231 286.689 225.709 285.344 cv
226.715 285.098 226.579 284.219 225.453 284.166 cv
224.266 284.11 223.075 284.084 221.881 284.084 cv
216.888 284.084 211.84 284.53 206.84 285.055 cv
206.456 280.332 205.33 275.694 203.923 271.482 cv
205.297 271.67 206.683 271.875 208.087 272.097 cv
213.865 273.01 219.072 273.533 224.995 273.71 cv
231.023 273.89 236.36 275.333 242.196 275.955 cv
245.462 276.302 248.624 276.454 251.719 276.454 cv
254.628 276.454 257.479 276.32 260.305 276.088 cv
259.005 278.517 257.722 281.111 256.507 283.693 cv
249.728 284.138 243.534 285.044 236.728 286.696 cv
231.931 287.861 227.376 288.298 222.287 288.585 cv
217.247 288.869 212.2 289.304 207.15 289.774 cv
238.152 282.871 mo
235.807 282.871 233.182 283.333 231.212 283.806 cv
230.228 284.043 230.253 285.046 231.436 285.046 cv
231.451 285.046 231.467 285.046 231.482 285.045 cv
233.059 285.011 234.589 284.826 236.151 284.694 cv
237.632 284.569 238.98 284.48 240.322 284.04 cv
241.01 283.814 240.859 283.11 240.104 283 cv
239.492 282.91 238.834 282.871 238.152 282.871 cv
244.355 271.962 mo
241.819 271.962 239.249 271.876 236.629 271.688 cv
225.978 270.922 215.846 269.255 205.465 267.813 cv
204.465 267.674 203.464 267.566 202.461 267.485 cv
199.194 259.239 195.337 253.417 195.247 253.282 cv
198.442 254.177 204.03 254.471 209.999 254.471 cv
221.446 254.471 234.299 253.389 234.4 253.381 cv
234.401 253.381 234.401 253.381 234.401 253.381 cv
234.401 253.381 234.401 253.381 234.401 253.381 cv
234.401 253.381 234.401 253.381 234.401 253.381 cv
234.401 253.383 234.401 253.389 234.401 253.399 cv
234.401 253.399 234.401 253.4 234.401 253.4 cv
234.401 253.4 234.401 253.401 234.401 253.402 cv
234.404 253.933 234.511 264.172 238.756 264.172 cv
240.505 264.172 242.954 262.437 246.389 257.571 cv
246.389 257.571 li
246.4 257.574 246.411 257.577 246.422 257.58 cv
246.55 257.614 246.676 257.647 246.801 257.681 cv
246.826 257.687 246.85 257.694 246.875 257.7 cv
246.904 257.708 246.932 257.716 246.961 257.724 cv
246.964 257.724 246.966 257.725 246.969 257.726 cv
254.571 259.774 258.035 261.614 260.111 261.895 cv
260.114 261.896 260.117 261.896 260.12 261.897 cv
260.127 261.898 260.135 261.898 260.142 261.899 cv
260.157 261.901 260.172 261.903 260.187 261.905 cv
260.196 261.906 260.206 261.907 260.215 261.908 cv
260.219 261.909 260.223 261.909 260.227 261.91 cv
260.237 261.911 260.247 261.912 260.258 261.913 cv
260.27 261.914 260.283 261.915 260.296 261.917 cv
260.298 261.917 260.301 261.917 260.303 261.917 cv
260.313 261.918 260.323 261.919 260.333 261.92 cv
260.342 261.921 260.352 261.921 260.361 261.922 cv
260.364 261.922 260.366 261.922 260.369 261.923 cv
260.392 261.924 260.415 261.926 260.437 261.927 cv
260.488 261.93 260.537 261.932 260.586 261.932 cv
260.598 261.932 260.61 261.932 260.623 261.932 cv
260.623 261.932 li
260.623 261.932 li
260.623 261.932 260.623 261.932 260.624 261.932 cv
261.399 261.932 261.974 261.64 262.549 260.957 cv
262.552 260.953 262.555 260.949 262.558 260.946 cv
262.793 260.665 262.898 260.322 262.897 259.933 cv
262.894 256.833 256.223 250.859 256.223 250.859 cv
256.223 250.859 274.757 241.374 280.373 241.374 cv
280.373 241.374 li
280.549 241.374 280.712 241.384 280.861 241.403 cv
281.499 241.484 282.199 241.654 282.948 241.881 cv
280.789 246.119 273.91 259.082 267.486 265.358 cv
266.24 266.576 264.903 268.364 263.536 270.508 cv
257.287 271.381 250.947 271.961 244.355 271.962 cv
243.694 267.215 mo
237.275 267.215 232.342 267.749 235.105 269.295 cv
236.93 270.316 240.206 270.699 244.134 270.699 cv
249.286 270.699 255.559 270.04 261.15 269.295 cv
267.138 268.497 253.634 267.215 243.694 267.215 cv
.580392 .219608 .0745098 rgb
f
251.719 276.454 mo
248.624 276.454 245.462 276.302 242.196 275.955 cv
236.36 275.333 231.023 273.89 224.995 273.71 cv
219.072 273.533 213.865 273.01 208.087 272.097 cv
206.683 271.875 205.297 271.67 203.923 271.482 cv
203.461 270.099 202.968 268.763 202.461 267.485 cv
203.464 267.566 204.465 267.674 205.465 267.813 cv
215.846 269.255 225.978 270.922 236.629 271.688 cv
239.249 271.876 241.819 271.962 244.355 271.962 cv
250.947 271.961 257.287 271.381 263.536 270.508 cv
262.468 272.185 261.38 274.08 260.305 276.088 cv
257.479 276.32 254.628 276.454 251.719 276.454 cv
.705882 .317647 .152941 rgb
f
207.566 293.231 mo
207.405 292.128 207.262 290.969 207.15 289.774 cv
212.2 289.304 217.247 288.869 222.287 288.585 cv
227.376 288.298 231.931 287.861 236.728 286.696 cv
243.534 285.044 249.728 284.138 256.507 283.693 cv
255.877 285.032 255.265 286.368 254.679 287.674 cv
253.883 287.817 253.076 287.945 252.249 288.049 cv
248.122 288.567 243.93 288.679 239.835 289.126 cv
229.125 290.295 218.171 291.637 207.566 293.231 cv
f
243.8 302.553 mo
221.101 302.553 li
222.71 301.991 224.258 301.519 225.151 301.216 cv
229.14 299.864 233.566 298.788 237.968 298.086 cv
242.256 297.403 246.569 296.892 250.901 296.472 cv
249.86 299.002 249.095 300.948 248.725 301.903 cv
247.089 302.106 245.441 302.32 243.8 302.553 cv
f
244.134 270.699 mo
240.206 270.699 236.93 270.316 235.105 269.295 cv
232.342 267.749 237.275 267.215 243.694 267.215 cv
253.634 267.215 267.138 268.497 261.15 269.295 cv
255.559 270.04 249.286 270.699 244.134 270.699 cv
f
207.002 287.861 mo
206.98 287.506 206.962 287.15 206.947 286.793 cv
206.923 286.213 206.887 285.632 206.84 285.055 cv
211.84 284.53 216.888 284.084 221.881 284.084 cv
223.075 284.084 224.266 284.11 225.453 284.166 cv
226.579 284.219 226.715 285.098 225.709 285.344 cv
220.231 286.689 214.369 287.171 208.58 287.712 cv
208.054 287.762 207.528 287.811 207.002 287.861 cv
f
231.436 285.046 mo
230.253 285.046 230.228 284.043 231.212 283.806 cv
233.182 283.333 235.807 282.871 238.152 282.871 cv
238.834 282.871 239.492 282.91 240.104 283 cv
240.859 283.11 241.01 283.814 240.322 284.04 cv
238.98 284.48 237.632 284.569 236.151 284.694 cv
234.589 284.826 233.059 285.011 231.482 285.045 cv
231.467 285.046 231.451 285.046 231.436 285.046 cv
f
121.082 241.535 mo
110.567 243.375 118.806 251.522 111.211 260.315 cv
105.971 266.384 104.172 279.228 103.468 284.271 cv
102.764 289.314 99.2443 302.553 99.2443 302.553 cv
97.9139 302.553 li
97.9139 302.553 99.2443 293.097 101.356 284.271 cv
103.468 275.445 107.5 262.797 108.396 260.315 cv
109.291 257.833 110.507 249.598 106.988 252.12 cv
110.507 245.816 li
111.599 242.74 115.551 241.603 121.082 241.535 cv
cp
.537255 .184314 .117647 rgb
f
215.956 212.065 mo
223.966 215.106 231.818 218.392 239.947 221.178 cv
247.849 223.886 255.922 224.687 264.438 225.239 cv
282.718 226.424 301.124 225.431 319.228 222.975 cv
345.476 219.414 372.673 213.667 397.547 204.696 cv
393.428 204.087 389.371 203.445 385.365 202.792 cv
386.383 200.302 388.341 197.282 385.714 195.796 cv
383.087 194.31 379.661 198.321 378.029 200.687 cv
379.358 197.85 380.664 195.094 381.563 192.042 cv
382.281 189.602 385.281 182.318 382.165 179.919 cv
376.247 175.363 370.77 194.738 369.601 197.503 cv
369.133 196.155 369.867 192.936 367.174 193.387 cv
364.48 193.838 365.891 197.259 365.957 199.62 cv
343.701 196.125 322.123 193.762 298.119 197.508 cv
281.251 200.14 264.711 203.734 247.859 206.184 cv
245.893 202.565 238.814 201.769 235.772 205.084 cv
235.63 203.375 233.935 200.222 231.674 200.13 cv
228.911 200.017 228.634 203.049 227.841 204.703 cv
224.788 202.701 223.488 194.956 219.038 196.333 cv
214.588 197.71 219.153 205.028 221.876 208.977 cv
218.179 209.327 214.485 209.708 210.792 210.1 cv
212.537 210.757 214.262 211.422 215.956 212.065 cv
cp
.631373 .717647 .0117647 rgb
f
183.054 248.27 mo
195.246 248.147 205.22 272.96 205.539 280.489 cv
205.89 288.774 208.726 302.553 208.726 302.553 cv
217.233 302.553 li
217.233 302.553 206.947 303.022 206.947 278.597 cv
206.947 272.381 195.684 252.75 195.684 252.75 cv
192.268 248.682 188.181 246.792 183.054 248.27 cv
cp
.537255 .184314 .117647 rgb
f
87.6709 240.499 mo
85.2922 239.639 76.7434 231.286 80.9922 229.406 cv
83.5753 228.263 87.4517 235.187 90.0243 235.472 cv
90.109 233.08 90.9473 226.956 95.0062 227.426 cv
97.9149 227.762 97.8158 231.415 97.8108 233.364 cv
99.6001 232.006 104.737 230.003 104.937 233.671 cv
105.044 235.625 102.094 237.385 101.181 239.045 cv
98.606 239.137 96.0322 239.071 93.5164 239.494 cv
91.6956 239.8 89.8402 240.411 87.6709 240.499 cv
cp
.764706 .870588 0 rgb
f
270.502 221.271 mo
270.502 221.271 264.515 212.948 267.697 210.27 cv
270.879 207.592 272.177 214.443 273.839 216.874 cv
270.809 206.407 280.464 204.131 279.491 215.725 cv
286.588 208.572 287.083 217.262 282.948 220.851 cv
270.502 221.271 li
cp
f
196.978 228.7 mo
195.469 228.153 187.871 224.572 190.448 221.982 cv
192.334 220.088 197.075 224.809 198.728 225.463 cv
197.191 222.147 192.021 204.206 200.463 208.606 cv
204.578 210.751 205.293 220.006 205.486 223.468 cv
207.119 219.902 213.381 218.152 212.031 223.641 cv
214.603 221.868 218.313 221.85 218.845 225.54 cv
215.45 228.835 204.119 229.096 196.978 228.7 cv
cp
.631373 .717647 .0117647 rgb
f
28.9495 221.444 mo
31.5776 218.844 28.0675 218.191 26.9996 219.332 cv
27.7931 216.794 29.3943 212.308 26.2189 211.655 cv
23.0436 211.001 23.7203 217.613 24.0355 219.72 cv
22.8379 218.946 22.3307 216.414 20.5619 216.98 cv
18.7932 217.545 20.8423 220.272 22.209 221.161 cv
33.1899 222.305 li
33.514 219.764 30.8101 219.651 28.9495 221.444 cv
cp
.764706 .870588 0 rgb
f
382.565 212.407 mo
384.351 212.102 385.546 214.986 386.272 215.995 cv
385.585 213.102 387.504 207.866 389.451 208.322 cv
391.398 208.778 391.267 212.953 391.961 215.272 cv
391.711 212.57 393.756 206.895 396.544 207.931 cv
399.332 208.967 397.731 214.168 397.628 216.613 cv
397.866 213.287 402.844 213.789 401.357 216.919 cv
403.493 215.137 406.563 215.347 405.855 218.516 cv
403.008 219.052 400.123 218.544 397.248 218.76 cv
394.048 219.002 382.975 220.395 382.975 220.395 cv
382.975 220.395 379.839 212.872 382.565 212.407 cv
cp
.631373 .717647 .0117647 rgb
f
321.255 209.949 mo
321.298 209.175 321.635 207.628 320.6 207.462 cv
319.995 207.364 319.437 207.917 319.046 208.54 cv
319.831 205.776 320.944 199.41 317.494 199.41 cv
314.044 199.41 315.234 208.203 316.723 210.491 cv
314.638 209.646 312.705 206.406 310.163 208.292 cv
307.621 210.178 312.968 212.048 314.883 212.663 cv
325.059 212.841 li
325.343 212.378 325.935 211.218 325.871 210.521 cv
325.661 208.224 322.154 207.734 321.255 209.949 cv
cp
.764706 .870588 0 rgb
f
13.2941 250.74 mo
19.0238 250.591 28.2384 246.112 30.3359 245.317 cv
29.9294 245.015 29.3308 244.603 28.5647 244.161 cv
25.7936 244.878 15.168 248.473 10.5132 247.855 cv
8.40894 247.575 7.45447 245.994 0 246.753 cv
0 250.489 li
7.08398 249.819 6.95947 250.906 13.2941 250.74 cv
cp
.65098 .294118 .145098 rgb
f
136.287 228.633 mo
137.626 227.598 137.081 223.669 135.238 223.252 cv
132.321 222.591 131.841 226.013 132.041 227.704 cv
130.493 223.604 134.431 214.446 127.255 213.412 cv
120.079 212.379 126.412 226.436 130.017 229.248 cv
138.716 230.584 li
141.303 229.619 138.766 226.371 136.287 228.633 cv
cp
.631373 .717647 .0117647 rgb
f
58.5333 205.174 mo
55.099 205.099 57.101 214.598 55.8235 216.963 cv
54.98 215.906 54.8903 213.776 53.6304 212.973 cv
52.037 211.958 50.3588 213.269 50.2981 214.914 cv
50.2051 217.438 52.3815 217.542 53.9502 218.717 cv
58.4144 219.895 li
59.6646 217.904 60.7649 216.14 61.2832 213.757 cv
61.6727 211.966 62.3354 205.257 58.5333 205.174 cv
cp
f
286.588 243.219 mo
286.588 243.219 294.236 246.446 295.644 249.598 cv
297.051 252.75 294.94 254.011 295.644 258.424 cv
296.347 262.837 299.867 267.88 299.867 267.88 cv
299.867 267.88 297.051 259.054 297.755 256.533 cv
298.459 254.011 298.459 251.489 299.867 250.229 cv
301.275 248.968 318.02 246.14 318.02 246.14 cv
292.828 244.555 li
286.588 243.219 li
cp
.537255 .184314 .117647 rgb
f
318.773 246.023 mo
318.773 246.023 321.689 245.816 323.097 247.076 cv
324.505 248.337 325.913 252.12 325.913 252.12 cv
325.913 252.12 324.691 245.943 326.71 244.619 cv
328.729 243.294 318.773 246.023 318.773 246.023 cv
cp
f
181.614 248.405 mo
181.614 248.405 173.158 250.229 171.046 252.12 cv
168.934 254.011 167.526 256.533 167.526 258.424 cv
167.526 260.315 168.014 265.074 167.77 266.477 cv
167.526 267.88 167.526 271.032 167.526 273.554 cv
167.526 276.076 168.934 277.967 168.934 277.967 cv
168.934 277.967 165.443 275.888 166.119 271.032 cv
166.794 266.176 166.823 260.946 166.119 259.054 cv
165.415 257.163 168.934 252.75 168.23 250.859 cv
167.526 248.968 164.377 248.227 164.377 248.227 cv
177.382 247.707 li
181.614 248.405 li
cp
f
24.6266 240.142 mo
24.6266 235.729 li
22.7947 234.894 li
22.7947 234.894 23.2186 241.403 20.403 242.664 cv
17.5872 243.924 15.4753 247.707 14.0675 253.381 cv
13.9607 253.811 13.8999 254.236 13.8704 254.657 cv
13.8704 254.657 11.2517 259.685 11.2517 262.207 cv
11.2517 264.728 12.6597 267.88 12.6597 267.88 cv
12.6597 267.88 11.9557 264.098 12.6597 261.576 cv
13.3635 259.054 14.5474 258.98 15.3633 260.278 cv
15.3646 260.28 li
16.7709 262.763 18.6882 264.626 18.995 265.358 cv
21.1068 270.402 18.995 274.815 18.995 274.815 cv
18.995 274.815 21.1068 271.032 21.1068 267.88 cv
21.1068 264.728 17.5872 261.576 16.1793 257.793 cv
14.7715 254.011 18.995 245.185 21.8108 243.924 cv
24.6266 242.664 27.693 243.687 27.693 243.687 cv
24.6266 240.142 li
cp
f
417.857 228.164 mo
424.465 230.055 425.168 235.729 424.465 238.881 cv
423.76 242.033 424.207 250.398 424.207 250.398 cv
424.207 250.398 424.465 239.511 426.576 237.62 cv
428.688 235.729 425.168 231.947 425.168 230.055 cv
425.168 228.164 433.012 228.164 433.012 228.164 cv
417.857 228.164 li
cp
f
51.8308 266.813 mo
51.6126 266.813 51.4003 266.802 51.1946 266.78 cv
51.1942 266.779 51.1939 266.777 51.1936 266.775 cv
51.4064 266.797 51.6254 266.809 51.8512 266.809 cv
52.3614 266.809 52.9056 266.75 53.488 266.619 cv
52.8982 266.751 52.3475 266.813 51.8308 266.813 cv
53.488 266.619 mo
53.4968 266.617 53.506 266.615 53.5147 266.613 cv
53.506 266.615 53.4968 266.617 53.488 266.619 cv
53.522 266.612 mo
53.5284 266.61 53.5351 266.609 53.5415 266.607 cv
53.5348 266.609 53.5287 266.61 53.522 266.612 cv
53.55 266.605 mo
53.5562 266.604 53.5624 266.602 53.5686 266.601 cv
53.5624 266.602 53.5562 266.604 53.55 266.605 cv
53.5768 266.599 mo
53.5832 266.598 53.5895 266.596 53.5959 266.595 cv
53.5893 266.596 53.5835 266.598 53.5768 266.599 cv
53.6037 266.593 mo
53.6106 266.591 53.6176 266.59 53.6246 266.588 cv
53.6175 266.59 53.6108 266.591 53.6037 266.593 cv
53.6296 266.587 mo
53.6381 266.585 53.6467 266.583 53.6551 266.581 cv
53.6469 266.583 53.6378 266.585 53.6296 266.587 cv
53.6561 266.58 mo
58.3604 265.459 61.7272 261.786 63.1416 257.56 cv
63.1419 257.561 63.1422 257.563 63.1425 257.565 cv
61.7273 261.788 58.3586 265.46 53.6561 266.58 cv
.729412 .243137 .152941 rgb
f
85.8693 302.553 mo
49.9978 302.553 li
50.3755 301.939 50.7423 301.335 51.0825 300.746 cv
52.2102 298.794 53.2568 296.793 54.1138 294.74 cv
62.0866 293.854 70.0274 291.829 77.609 290.354 cv
77.6452 290.347 77.681 290.34 77.7173 290.333 cv
78.1264 290.97 78.5314 291.596 78.9269 292.204 cv
78.7497 292.576 78.9568 292.99 79.5729 293.194 cv
83.1201 298.614 85.8693 302.553 85.8693 302.553 cv
56.2715 286.28 mo
56.3342 285.432 56.3473 284.576 56.3044 283.712 cv
56.2946 283.514 56.2806 283.316 56.2627 283.118 cv
58.5799 282.554 60.1773 281.835 62.092 280.658 cv
62.9884 280.106 62.1487 279.362 61.0969 279.362 cv
61.0281 279.362 60.9585 279.365 60.8883 279.372 cv
59.1342 279.537 57.4003 279.744 55.6727 279.953 cv
54.9389 277.238 53.7131 274.56 52.6916 271.854 cv
57.5659 272.304 62.435 272.605 67.3686 272.817 cv
68.0401 274.133 68.7872 275.519 69.5849 276.943 cv
67.8782 277.141 66.2021 277.529 64.6243 277.914 cv
63.7038 278.138 63.9336 278.979 64.8046 278.979 cv
64.8917 278.979 64.9853 278.971 65.0848 278.952 cv
66.791 278.638 68.5821 278.487 70.3358 278.268 cv
70.7687 279.025 71.213 279.788 71.666 280.555 cv
69.3077 281.169 67.0069 281.877 64.7767 282.62 cv
64.0188 282.873 64.4174 283.6 65.1812 283.6 cv
65.259 283.6 65.3405 283.593 65.4251 283.576 cv
67.8349 283.109 70.2911 282.736 72.7652 282.398 cv
73.1816 283.089 73.6031 283.781 74.0258 284.469 cv
70.9931 285.13 68.218 285.47 64.4333 285.674 cv
61.6997 285.822 58.9817 286.042 56.2715 286.28 cv
54.6993 268.034 mo
53.6057 268.034 52.5228 267.994 51.4393 267.932 cv
51.3466 267.549 51.2645 267.166 51.1946 266.78 cv
51.4003 266.802 51.6126 266.813 51.8308 266.813 cv
52.3475 266.813 52.8982 266.751 53.488 266.619 cv
53.488 266.619 li
53.488 266.619 li
53.4968 266.617 53.506 266.615 53.5147 266.613 cv
53.5174 266.613 53.5193 266.612 53.522 266.612 cv
53.5287 266.61 53.5348 266.609 53.5415 266.607 cv
53.5444 266.607 53.5471 266.606 53.55 266.605 cv
53.5562 266.604 53.5624 266.602 53.5686 266.601 cv
53.5712 266.6 53.5742 266.6 53.5768 266.599 cv
53.5835 266.598 53.5893 266.596 53.5959 266.595 cv
53.5985 266.594 53.601 266.593 53.6037 266.593 cv
53.6108 266.591 53.6175 266.59 53.6246 266.588 cv
53.6264 266.588 53.6279 266.587 53.6296 266.587 cv
53.6378 266.585 53.6469 266.583 53.6551 266.581 cv
53.6554 266.581 53.6558 266.581 53.6561 266.58 cv
58.3586 265.46 61.7273 261.788 63.1425 257.565 cv
63.5302 259.7 63.8623 261.942 64.0473 264.098 cv
64.1075 264.798 64.317 265.661 64.6497 266.651 cv
64.3478 266.728 64.044 266.808 63.7376 266.89 cv
60.5047 267.76 57.564 268.034 54.6993 268.034 cv
.709804 .270588 .0901961 rgb
f
67.3686 272.817 mo
62.435 272.605 57.5659 272.304 52.6916 271.854 cv
52.2015 270.555 51.7585 269.25 51.4393 267.932 cv
52.5228 267.994 53.6057 268.034 54.6993 268.034 cv
57.564 268.034 60.5047 267.76 63.7376 266.89 cv
64.044 266.808 64.3478 266.728 64.6497 266.651 cv
65.2285 268.375 66.1803 270.487 67.3686 272.817 cv
.796078 .392157 .188235 rgb
f
54.1138 294.74 mo
55.2519 292.013 56.0556 289.196 56.2715 286.28 cv
58.9817 286.042 61.6997 285.822 64.4333 285.674 cv
68.218 285.47 70.9931 285.13 74.0258 284.469 cv
75.2619 286.479 76.5134 288.461 77.7173 290.333 cv
77.681 290.34 77.6452 290.347 77.609 290.354 cv
70.0274 291.829 62.0866 293.854 54.1138 294.74 cv
f
79.5729 293.194 mo
78.9568 292.99 78.7497 292.576 78.9269 292.204 cv
79.1453 292.539 79.3599 292.868 79.5729 293.194 cv
f
64.8046 278.979 mo
63.9336 278.979 63.7038 278.138 64.6243 277.914 cv
66.2021 277.529 67.8782 277.141 69.5849 276.943 cv
69.8306 277.381 70.0813 277.824 70.3358 278.268 cv
68.5821 278.487 66.791 278.638 65.0848 278.952 cv
64.9853 278.971 64.8917 278.979 64.8046 278.979 cv
f
65.1812 283.6 mo
64.4174 283.6 64.0188 282.873 64.7767 282.62 cv
67.0069 281.877 69.3077 281.169 71.666 280.555 cv
72.0279 281.169 72.3944 281.783 72.7652 282.398 cv
70.2911 282.736 67.8349 283.109 65.4251 283.576 cv
65.3405 283.593 65.259 283.6 65.1812 283.6 cv
f
56.2627 283.118 mo
56.1662 282.055 55.9561 281.001 55.6727 279.953 cv
57.4003 279.744 59.1342 279.537 60.8883 279.372 cv
60.9585 279.365 61.0281 279.362 61.0969 279.362 cv
62.1487 279.362 62.9884 280.106 62.092 280.658 cv
60.1773 281.835 58.5799 282.554 56.2627 283.118 cv
f
368.636 302.553 mo
283.289 302.553 li
286.548 301.088 289.6 299.227 292.699 297.43 cv
297.776 297.039 302.839 296.64 307.849 296.166 cv
321.236 294.899 334.866 293.712 348.412 293.712 cv
356.441 293.712 364.44 294.129 372.345 295.193 cv
370.225 299.539 368.636 302.553 368.636 302.553 cv
368.636 302.553 li
368.636 302.553 li
.709804 .270588 .0901961 rgb
f
367.308 258.476 mo
367.295 258.476 367.283 258.476 367.27 258.476 cv
367.283 258.476 367.295 258.476 367.308 258.476 cv
367.308 258.476 li
367.31 258.476 mo
370.015 258.474 371.854 255.618 370.313 247.35 cv
371.854 255.619 370.015 258.475 367.31 258.476 cv
352.937 255.193 mo
352.936 255.193 352.935 255.193 352.934 255.193 cv
352.935 255.193 352.936 255.193 352.937 255.193 cv
352.937 255.193 li
352.94 255.193 mo
354.532 255.191 356.408 253.93 358.198 251.017 cv
356.408 253.93 354.533 255.191 352.94 255.193 cv
358.198 251.016 mo
358.203 251.009 358.208 251.001 358.212 250.994 cv
358.208 251.001 358.203 251.009 358.198 251.016 cv
358.232 250.961 mo
358.243 250.943 358.255 250.923 358.267 250.904 cv
358.255 250.923 358.243 250.943 358.232 250.961 cv
358.325 250.934 mo
358.32 250.923 358.316 250.911 358.311 250.899 cv
358.316 250.911 358.32 250.923 358.325 250.934 cv
345.087 247.748 mo
345.088 247.747 345.088 247.746 345.089 247.745 cv
346.222 247.514 347.589 246.895 349.124 245.829 cv
347.589 246.895 346.22 247.517 345.087 247.748 cv
370.311 247.338 mo
370.307 247.317 370.303 247.297 370.299 247.276 cv
370.303 247.297 370.307 247.317 370.311 247.338 cv
372.734 247.322 mo
372.052 247.322 371.272 247.251 370.391 247.099 cv
371.268 247.25 372.044 247.321 372.723 247.321 cv
374.434 247.321 375.533 246.871 376.095 246.116 cv
376.097 246.12 376.099 246.123 376.101 246.127 cv
375.538 246.877 374.438 247.322 372.734 247.322 cv
370.287 247.209 mo
370.286 247.204 370.285 247.2 370.284 247.196 cv
370.285 247.2 370.286 247.204 370.287 247.209 cv
370.391 247.099 mo
370.377 247.097 370.364 247.095 370.351 247.092 cv
370.364 247.095 370.377 247.097 370.391 247.099 cv
370.327 247.088 mo
370.327 247.088 li
370.327 247.088 370.327 247.088 370.327 247.088 cv
349.108 246.043 mo
349.108 246.042 349.109 246.04 349.109 246.039 cv
349.109 246.04 349.108 246.042 349.108 246.043 cv
349.122 245.954 mo
349.129 245.908 349.136 245.862 349.143 245.816 cv
349.143 245.816 li
349.136 245.862 349.129 245.908 349.122 245.954 cv
.729412 .243137 .152941 rgb
f
303.041 292.45 mo
307.382 290.867 311.666 289.412 315.426 286.773 cv
316.155 286.262 316.866 285.723 317.561 285.162 cv
322.457 285.42 327.24 285.767 332.218 285.767 cv
334.251 285.767 336.317 285.71 338.437 285.564 cv
351.459 284.669 364.57 284.387 377.669 283.622 cv
377.208 284.701 376.735 285.779 376.259 286.841 cv
368.824 287.074 361.394 287.544 353.962 288.236 cv
337.043 289.811 320.044 291.154 303.041 292.45 cv
326.637 282.892 mo
323.974 282.892 322.654 282.564 321.071 282.045 cv
323.642 279.563 326.012 276.869 328.281 274.29 cv
330.274 272.026 332.559 270.039 334.54 267.801 cv
334.691 267.821 334.842 267.842 334.996 267.864 cv
341.417 268.772 348.944 269.424 356.17 269.424 cv
360.162 269.424 364.061 269.225 367.635 268.761 cv
372.805 268.089 377.86 267.772 382.875 267.666 cv
382.572 270.69 381.084 275.201 379.176 279.983 cv
375.299 280.287 371.438 280.577 367.611 280.771 cv
354.272 281.451 340.718 282.619 327.358 282.885 cv
327.108 282.889 326.867 282.892 326.637 282.892 cv
349.631 267.771 mo
349.219 267.771 348.81 267.767 348.402 267.759 cv
344.002 267.671 340.089 266.738 336.177 265.771 cv
338.881 262.072 340.919 257.729 342.749 253.642 cv
343.602 251.74 344.39 249.762 345.087 247.748 cv
346.22 247.517 347.589 246.895 349.124 245.829 cv
349.131 245.824 349.137 245.82 349.143 245.816 cv
349.136 245.862 349.129 245.908 349.122 245.954 cv
349.117 245.983 349.113 246.011 349.109 246.039 cv
349.109 246.04 349.108 246.042 349.108 246.043 cv
348.308 251.484 350.203 255.191 352.934 255.193 cv
352.935 255.193 352.936 255.193 352.937 255.193 cv
352.937 255.193 li
352.937 255.193 li
352.938 255.193 352.939 255.193 352.94 255.193 cv
354.533 255.191 356.408 253.93 358.198 251.017 cv
358.198 251.016 li
358.203 251.009 358.208 251.001 358.212 250.994 cv
358.219 250.983 358.225 250.972 358.232 250.961 cv
358.243 250.943 358.255 250.923 358.267 250.904 cv
358.276 250.889 358.285 250.874 358.294 250.859 cv
358.3 250.872 358.305 250.886 358.311 250.899 cv
358.316 250.911 358.32 250.923 358.325 250.934 cv
359.857 254.615 364.134 258.446 367.27 258.476 cv
367.283 258.476 367.295 258.476 367.308 258.476 cv
367.308 258.476 li
367.308 258.476 li
367.308 258.476 367.309 258.476 367.31 258.476 cv
370.015 258.475 371.854 255.619 370.313 247.35 cv
370.312 247.347 370.312 247.342 370.311 247.338 cv
370.307 247.317 370.303 247.297 370.299 247.276 cv
370.295 247.254 370.291 247.231 370.287 247.209 cv
370.286 247.204 370.285 247.2 370.284 247.196 cv
370.276 247.156 370.269 247.117 370.261 247.076 cv
370.261 247.076 li
370.283 247.08 370.305 247.084 370.327 247.088 cv
370.327 247.088 li
370.335 247.089 370.343 247.091 370.351 247.092 cv
370.364 247.095 370.377 247.097 370.391 247.099 cv
370.391 247.099 370.391 247.099 370.391 247.099 cv
371.272 247.251 372.052 247.322 372.734 247.322 cv
374.438 247.322 375.538 246.877 376.101 246.127 cv
378.623 251.35 381.665 258.376 382.626 263.638 cv
381.711 263.774 380.795 263.912 379.88 264.051 cv
370.491 265.479 359.508 267.771 349.631 267.771 cv
379.107 261.012 mo
379.056 261.012 379.005 261.016 378.952 261.022 cv
374.223 261.646 369.334 262.02 364.897 263.308 cv
364.027 263.561 364.488 264.398 365.368 264.398 cv
365.369 264.398 365.37 264.398 365.372 264.398 cv
370.423 264.382 375.022 263.115 379.543 261.894 cv
380.323 261.684 379.831 261.012 379.107 261.012 cv
.709804 .270588 .0901961 rgb
f
356.17 269.424 mo
348.944 269.424 341.417 268.772 334.996 267.864 cv
334.842 267.842 334.691 267.821 334.54 267.801 cv
335.033 267.244 335.506 266.672 335.952 266.076 cv
336.028 265.975 336.103 265.873 336.177 265.771 cv
340.089 266.738 344.002 267.671 348.402 267.759 cv
348.81 267.767 349.219 267.771 349.631 267.771 cv
359.508 267.771 370.491 265.479 379.88 264.051 cv
380.795 263.912 381.711 263.774 382.626 263.638 cv
382.823 264.716 382.932 265.72 382.932 266.619 cv
382.932 266.944 382.913 267.294 382.875 267.666 cv
377.86 267.772 372.805 268.089 367.635 268.761 cv
364.061 269.225 360.162 269.424 356.17 269.424 cv
.796078 .392157 .188235 rgb
f
332.218 285.767 mo
327.24 285.767 322.457 285.42 317.561 285.162 cv
318.776 284.182 319.943 283.134 321.071 282.045 cv
322.654 282.564 323.974 282.892 326.637 282.892 cv
326.867 282.892 327.108 282.889 327.358 282.885 cv
340.718 282.619 354.272 281.451 367.611 280.771 cv
371.438 280.577 375.299 280.287 379.176 279.983 cv
378.696 281.185 378.19 282.405 377.669 283.622 cv
364.57 284.387 351.459 284.669 338.437 285.564 cv
336.317 285.71 334.251 285.767 332.218 285.767 cv
f
292.699 297.43 mo
295.603 295.747 298.549 294.12 301.747 292.927 cv
302.179 292.766 302.611 292.607 303.041 292.45 cv
320.044 291.154 337.043 289.811 353.962 288.236 cv
361.394 287.544 368.824 287.074 376.259 286.841 cv
374.913 289.848 373.544 292.733 372.345 295.193 cv
364.44 294.129 356.441 293.712 348.412 293.712 cv
334.866 293.712 321.236 294.899 307.849 296.166 cv
302.839 296.64 297.776 297.039 292.699 297.43 cv
f
365.368 264.398 mo
364.488 264.398 364.027 263.561 364.897 263.308 cv
369.334 262.02 374.223 261.646 378.952 261.022 cv
379.005 261.016 379.056 261.012 379.107 261.012 cv
379.831 261.012 380.323 261.684 379.543 261.894 cv
375.022 263.115 370.423 264.382 365.372 264.398 cv
365.37 264.398 365.369 264.398 365.368 264.398 cv
f
376.095 246.116 mo
376.095 246.116 li
376.095 246.115 li
376.095 246.116 376.095 246.116 376.095 246.116 cv
.772549 .266667 .156863 rgb
f
403.763 231.676 mo
398.19 233.445 392.927 234.64 386.918 234.64 cv
381.394 234.64 376.201 233.967 370.96 232.442 cv
364.822 230.656 359.612 230.383 353.229 231.542 cv
344.215 233.177 335.525 236.698 326.648 238.988 cv
321.098 240.42 315.875 242.552 310.432 244.069 cv
307.345 244.929 303.655 244.291 300.471 244.396 cv
299.873 244.417 299.271 244.472 298.668 244.536 cv
312.328 246.732 326.064 242.72 339.047 239.458 cv
342.38 238.62 345.078 238.087 347.596 237.8 cv
344.95 240.523 342.968 243.787 343.887 246.156 cv
346.686 246.87 349.104 244.297 351.321 243.034 cv
351.375 245.02 350.352 251.876 353.404 252.674 cv
355.909 253.328 358.434 247.611 359.131 245.809 cv
359.45 246.927 359.246 248.166 359.69 249.365 cv
360.396 251.269 364.787 256.496 367.318 256.155 cv
371.667 255.569 368.081 245.292 366.314 243.711 cv
367.655 245.142 373.044 246.232 373.98 244.313 cv
374.538 243.167 372.957 240.644 371.609 238.891 cv
380.756 238.839 390.531 237.363 398.4 234.847 cv
401.743 233.779 403.12 233.034 403.763 231.676 cv
cp
.317647 .45098 0 rgb
f
100.911 252.017 mo
103 251.537 107.724 250.175 108.896 248.514 cv
108.967 248.387 li
105.443 249.31 102.135 250.789 98.0077 250.609 cv
93.8748 250.429 91.2101 249.476 87.5377 248.1 cv
84.0281 246.784 80.0499 246.309 76.3759 245.365 cv
71.1219 244.015 65.9918 241.902 60.8 240.657 cv
58.5581 240.119 55.5414 241.079 53.4916 240.351 cv
52.5885 240.03 52.4633 238.943 51.5259 238.668 cv
50.5808 238.39 48.7573 239.043 47.7836 239.142 cv
47.7762 237.931 48.1672 236.051 46.707 235.36 cv
45.1234 234.611 43.8495 236.609 42.4943 237 cv
41.6855 235.139 42.3409 229.044 38.917 229.191 cv
35.1827 229.351 38.0164 233.305 37.4052 234.894 cv
35.917 238.76 30.1096 233.816 28.0793 232.262 cv
24.6675 229.65 19.1735 227.32 14.5062 226.348 cv
12.4185 225.913 7.5188 225.003 0 225.003 cv
0 228.262 li
0 228.262 11.0422 227.59 15.4899 228.689 cv
19.1324 229.589 24.5792 231.568 26.6823 234.789 cv
27.8573 236.588 26.2224 239.124 27.4447 240.788 cv
29.3684 243.406 33.7686 244.344 38.2585 244.671 cv
35.2985 246.855 25.5081 254.379 28.7028 258.238 cv
32.009 262.232 42.6367 254.15 45.8801 253.261 cv
45.9196 258.479 48.3738 268.464 56.8551 263.421 cv
63.1705 259.665 62.3682 252.395 60.7389 245.646 cv
66.9189 246.351 73.016 247.483 79.1329 248.983 cv
86.426 250.772 93.3246 253.76 100.911 252.017 cv
cp
f
246.899 256.098 mo
246.899 256.098 255.376 261.713 257.384 258.668 cv
259.393 255.624 257.05 253.235 251.958 250.729 cv
253.405 250.446 254.87 250.086 256.368 249.607 cv
260.01 248.443 263.537 246.732 267.101 245.101 cv
264.03 245.471 261.089 245.6 257.94 245.6 cv
248.997 245.6 239.928 244.529 231.269 247.209 cv
229.007 247.91 227.08 248.912 224.696 249.173 cv
221.549 249.518 218.294 249.38 215.118 249.413 cv
210.482 249.46 205.589 250.016 201.076 248.876 cv
196.259 247.659 192.501 244.595 187.447 243.508 cv
180.641 242.045 173.899 242.32 167.01 241.729 cv
160.959 241.21 154.74 241.347 148.754 240.365 cv
145.49 239.829 142.289 239.185 138.961 239.167 cv
136.002 239.151 132.254 238.702 129.563 239.721 cv
129.155 239.875 128.744 240.075 128.334 240.296 cv
132.577 240.351 136.656 240.705 139.657 241.068 cv
151.166 242.459 162.077 248.355 173.126 246.875 cv
181.071 245.81 185.344 244.581 191.746 247.615 cv
193.048 248.232 193.874 250.181 195.343 250.929 cv
198.016 252.291 202.594 251.756 205.527 251.806 cv
213.271 251.936 220.936 250.43 228.634 250.817 cv
232.673 251.02 236.471 251.37 240.217 251.497 cv
238.342 252.579 234.542 257.823 237.892 260.667 cv
241.243 263.512 246.899 256.098 246.899 256.098 cv
cp
f
428.163 227.862 mo
435.389 228.295 442.81 228.677 450 228.264 cv
449.999 227.083 450 226.003 450 225.003 cv
439.976 225.003 438.712 227.037 435.144 227.339 cv
431.608 227.637 428.225 227.857 428.163 227.862 cv
cp
f
369.769 246.753 mo
369.769 246.753 382.09 256.511 382.794 264.707 cv
383.498 272.902 364.952 302.553 364.952 302.553 cv
370.241 302.553 li
370.241 302.553 385.044 272.293 383.636 264.098 cv
382.228 255.902 375.659 241.86 375.659 241.86 cv
375.577 245.977 373.675 246.016 369.769 246.753 cv
cp
.537255 .184314 .117647 rgb
f
28.42 218.794 mo
29.0481 219.201 29.5135 220.005 29.4711 220.654 cv
29.6006 220.659 li
30.4091 219.389 29.4476 218.777 28.42 218.794 cv
cp
.843137 .929412 .203922 rgb
f
30.1866 220.582 mo
30.615 220.468 31.0361 220.302 31.5543 220.496 cv
32.4077 220.814 32.8534 221.415 33.2008 222.118 cv
33.3306 220.27 31.752 219.834 30.1866 220.582 cv
cp
f
23.7635 215.453 mo
24.2728 214.323 25.1659 213.492 26.4399 213.838 cv
27.4696 214.117 27.7367 215.731 27.6816 217.064 cv
28.3011 214.724 28.5704 212.138 26.2189 211.655 cv
24.4052 211.281 23.849 213.279 23.7635 215.453 cv
cp
f
20.5619 216.98 mo
19.8535 217.206 19.7632 217.781 19.9905 218.444 cv
20.0853 218.246 20.1385 218 20.3035 217.848 cv
20.452 217.71 20.679 217.635 20.8676 217.59 cv
21.2885 217.489 21.7435 217.54 22.1525 217.662 cv
22.2745 217.699 22.3777 217.75 22.4784 217.804 cv
21.9888 217.168 21.4263 216.703 20.5619 216.98 cv
cp
f
33.6617 200.114 mo
33.9524 199.907 34.238 199.738 34.4268 199.63 cv
35.6624 198.921 37.5363 199.571 38.7666 200.103 cv
39.3804 200.368 39.9604 200.717 40.4933 201.128 cv
39.5454 199.642 38.2745 198.258 36.5175 198.061 cv
34.2515 197.806 33.5304 198.742 33.6617 200.114 cv
cp
f
95.3345 205.496 mo
96.4253 205.623 97.5538 206.058 98.3502 206.537 cv
99.2554 207.08 100.195 207.959 100.597 209.005 cv
101.433 207.771 101.727 206.457 99.8351 205.378 cv
98.5742 204.66 96.8883 204.906 95.3345 205.496 cv
cp
f
86.9647 203.422 mo
88.3285 202.759 89.8822 202.398 91.3704 202.849 cv
92.3081 203.133 92.8175 203.792 93.1201 204.587 cv
93.2979 203.36 92.9263 202.277 91.3914 201.96 cv
89.9109 201.653 88.1675 202.397 86.5488 203.63 cv
86.6882 203.559 86.8276 203.489 86.9647 203.422 cv
cp
f
80.9922 229.406 mo
78.9617 230.305 79.856 232.681 81.6008 235.012 cv
81.4666 233.669 82.1444 232.633 84.2772 232.562 cv
85.6479 232.516 86.6868 233.384 87.7661 234.131 cv
85.498 232.096 82.8945 228.564 80.9922 229.406 cv
cp
f
96.1558 230.162 mo
97.0179 230.559 97.1857 231.252 97.7793 231.812 cv
97.7904 231.82 li
97.7028 229.918 97.2505 227.685 95.0062 227.426 cv
92.2603 227.108 90.9894 229.808 90.4275 232.329 cv
91.0568 231.495 91.8715 230.82 92.9503 230.388 cv
93.9258 229.997 95.1544 229.701 96.1558 230.162 cv
cp
f
101.146 239.046 mo
101.181 239.045 li
102.094 237.385 105.044 235.625 104.937 233.671 cv
104.804 231.235 102.495 231.301 100.433 232.017 cv
101.541 232.113 102.76 232.559 103.238 233.622 cv
103.988 235.293 102.558 236.711 101.731 238.04 cv
101.503 238.406 101.299 238.743 101.146 239.046 cv
cp
f
321.255 209.949 mo
321.298 209.175 321.635 207.628 320.6 207.462 cv
319.995 207.364 319.437 207.917 319.046 208.54 cv
319.831 205.776 320.944 199.41 317.494 199.41 cv
314.044 199.41 315.234 208.203 316.723 210.491 cv
314.638 209.646 312.705 206.406 310.163 208.292 cv
307.621 210.178 312.968 212.048 314.883 212.663 cv
325.059 212.841 li
325.343 212.378 325.935 211.218 325.871 210.521 cv
325.661 208.224 322.154 207.734 321.255 209.949 cv
cp
.764706 .870588 0 rgb
f
275.082 210.787 mo
277.293 210.335 278.31 212.531 279.216 214.12 cv
279.318 213.948 279.433 213.813 279.554 213.697 cv
279.342 206.087 273.69 206.519 273.277 212.375 cv
273.585 211.591 274.139 210.979 275.082 210.787 cv
cp
.843137 .929412 .203922 rgb
f
273.135 216.323 mo
273.074 216 273.022 215.641 272.988 215.266 cv
271.665 212.337 270.323 208.06 267.697 210.27 cv
266.13 211.589 266.788 214.277 267.859 216.666 cv
267.956 216.368 268.056 216.119 268.13 215.98 cv
268.673 214.965 269.457 214.301 270.647 214.672 cv
271.485 214.932 272.457 215.811 273.135 216.323 cv
cp
f
284.227 219.379 mo
286.465 216.015 285.993 211.216 281.997 213.656 cv
282.516 213.945 282.987 214.352 283.308 214.754 cv
284.381 216.097 284.3 217.751 284.227 219.379 cv
cp
f
321.255 209.949 mo
321.298 209.175 321.635 207.628 320.6 207.462 cv
320.389 207.427 320.184 207.476 319.989 207.576 cv
320.618 208.393 320.651 209.356 320.764 210.359 cv
321.732 210.108 322.755 209.627 323.795 209.89 cv
324.812 210.147 325.238 210.948 325.575 211.815 cv
325.76 211.367 325.904 210.882 325.871 210.521 cv
325.661 208.224 322.154 207.734 321.255 209.949 cv
cp
f
310.163 208.292 mo
308.795 209.307 309.713 210.318 311.151 211.131 cv
310.836 210.099 311.041 208.873 312.219 208.57 cv
312.642 208.462 313.129 208.385 313.622 208.373 cv
312.558 207.689 311.437 207.347 310.163 208.292 cv
cp
f
315.342 205.449 mo
315.744 204.232 316.486 203.138 317.257 202.919 cv
318.866 202.464 318.883 204.583 319.045 205.571 cv
319.108 205.956 319.22 206.671 319.406 206.988 cv
319.421 207.01 li
320.068 203.933 320.402 199.41 317.494 199.41 cv
315.459 199.41 315.039 202.47 315.342 205.449 cv
cp
f
420.99 210.058 mo
421.578 208.788 422.342 206.621 423.73 206.021 cv
424.594 205.648 426.19 205.558 427.237 206.075 cv
426.551 204.694 425.29 203.927 423.06 204.322 cv
420.461 204.782 420.128 207.353 420.834 210.459 cv
420.881 210.318 420.932 210.183 420.99 210.058 cv
cp
.705882 .8 .0117647 rgb
f
431.094 200.292 mo
430.519 201.239 430.104 202.169 429.786 203.093 cv
430.166 202.43 430.585 201.766 431.229 201.381 cv
432.287 200.749 434.396 200.659 435.529 201.105 cv
437.721 201.968 438.772 203.732 439.268 205.799 cv
439.491 203.898 439.472 201.964 438.987 199.96 cv
437.613 194.292 433.32 196.621 431.094 200.292 cv
cp
f
386.658 211.506 mo
387.162 211.127 387.826 210.908 388.701 210.934 cv
389.637 210.961 390.579 212.089 391.363 212.101 cv
391.062 210.299 390.652 208.603 389.451 208.322 cv
388.36 208.067 387.277 209.6 386.658 211.506 cv
cp
f
385.299 214.413 mo
384.608 213.323 383.709 212.212 382.565 212.407 cv
381.434 212.6 381.313 214.01 381.558 215.592 cv
381.815 215.371 382.636 214.452 382.932 214.338 cv
383.892 213.968 385.276 214.632 385.299 214.413 cv
cp
f
402.181 216.353 mo
403.97 215.945 404.828 217.231 405.856 218.508 cv
406.47 215.737 404.19 215.236 402.181 216.353 cv
cp
f
396.544 207.931 mo
394.962 207.343 393.619 208.917 392.799 210.883 cv
393.017 210.642 393.274 210.425 393.639 210.289 cv
394.573 209.942 395.646 210.083 396.454 210.671 cv
397.459 211.404 397.512 212.553 398.008 213.529 cv
398.309 211.18 398.409 208.624 396.544 207.931 cv
cp
f
401.62 216.035 mo
401.773 214.576 400.224 214.002 399.008 214.531 cv
399.936 214.958 401.278 215.081 401.62 216.035 cv
cp
f
379.183 184.948 mo
381.363 185.825 381.896 188.865 381.878 191.054 cv
382.876 188.033 384.933 182.05 382.165 179.919 cv
378.731 177.275 375.446 182.689 373.064 188.24 cv
374.588 186.48 377.123 184.12 379.183 184.948 cv
cp
f
382.386 196.17 mo
383.377 196.252 384.318 196.765 384.92 197.572 cv
385.827 198.786 385.471 200.309 385.899 201.574 cv
386.889 199.382 387.924 197.046 385.714 195.796 cv
384.676 195.209 383.513 195.482 382.386 196.17 cv
cp
f
369.348 195.594 mo
369.219 194.323 368.905 193.097 367.174 193.387 cv
365.595 193.651 365.428 194.938 365.573 196.431 cv
366.003 195.813 366.688 195.365 367.546 195.207 cv
368.174 195.091 368.929 195.13 369.348 195.594 cv
cp
f
219.299 200.276 mo
220.844 199.352 222.96 199.664 224.618 200.344 cv
223.182 197.868 221.655 195.523 219.038 196.333 cv
216.774 197.034 216.845 199.274 217.819 201.824 cv
218.128 201.208 218.611 200.688 219.299 200.276 cv
cp
f
247.637 205.82 mo
245.648 202.87 240.098 202.052 236.84 204.186 cv
239.57 203.425 245.494 204.54 247.637 205.82 cv
cp
f
227.952 204.451 mo
228.021 204.604 li
229.031 203.969 229.576 203.03 230.884 202.83 cv
232.002 202.659 233.225 202.874 234.264 203.264 cv
234.68 203.421 235.07 203.635 235.469 203.819 cv
234.868 202.156 233.447 200.202 231.674 200.13 cv
229.045 200.022 228.666 202.761 227.952 204.451 cv
cp
f
190.448 221.982 mo
189.198 223.239 190.344 224.727 192.025 225.991 cv
191.921 225.108 192.186 224.223 192.972 223.63 cv
193.483 223.245 194.047 222.924 194.635 222.742 cv
193.02 221.73 191.383 221.043 190.448 221.982 cv
cp
f
213.618 222.826 mo
213.789 222.827 li
215.015 222.944 216.356 223.514 217.268 224.342 cv
217.735 224.765 218.128 225.295 218.509 225.835 cv
218.628 225.74 218.74 225.641 218.845 225.54 cv
218.416 222.563 215.918 222.001 213.618 222.826 cv
cp
f
204.919 217.952 mo
204.309 214.169 203.067 209.963 200.463 208.606 cv
195.232 205.88 195.228 211.73 196.346 217.364 cv
196.81 216.146 197.216 215.536 198.539 215.309 cv
199.725 215.105 201.014 215.101 202.145 215.576 cv
203.125 215.988 204.153 216.923 204.919 217.952 cv
cp
f
207.049 221.485 mo
208.023 221.432 209.465 221.873 210.142 221.983 cv
210.941 222.114 211.234 222.813 211.87 223.006 cv
211.953 223.031 212.05 223.038 212.151 223.037 cv
212.732 219.349 209.33 219.585 207.049 221.485 cv
cp
f
131.589 220.78 mo
131.653 220.905 131.706 221.029 131.755 221.153 cv
131.862 217.547 131.542 214.03 127.255 213.412 cv
123.885 212.927 123.495 215.769 124.401 219.212 cv
125.12 218.122 126.346 217.437 127.836 217.835 cv
129.361 218.242 130.872 219.376 131.589 220.78 cv
cp
f
132.934 223.882 mo
134.439 223.559 135.717 225.142 136.22 226.515 cv
136.403 227.015 136.378 227.493 136.841 227.798 cv
137.378 226.26 136.739 223.592 135.238 223.252 cv
134.173 223.01 133.435 223.317 132.934 223.882 cv
cp
f
137.388 227.963 mo
137.74 227.974 138.117 227.888 138.443 228.053 cv
138.928 228.299 139.327 228.85 139.781 229.121 cv
139.634 228.294 138.605 227.561 137.388 227.963 cv
cp
f
162.255 227.595 mo
160.561 228.147 160.452 229.153 161.128 230.297 cv
162.119 229.046 165.482 229.452 166.611 229.661 cv
167.037 229.739 167.458 229.835 167.87 229.955 cv
165.74 228.598 163.378 227.229 162.255 227.595 cv
cp
f
175.864 226.234 mo
176.137 226.718 176.372 227.214 176.591 227.716 cv
176.122 224.435 175.468 220.685 173.697 220.46 cv
170.496 220.052 170.341 224.511 170.74 228.11 cv
170.968 227.495 171.281 226.913 171.719 226.398 cv
172.873 225.04 174.959 224.635 175.864 226.234 cv
cp
f
188.493 234.713 mo
188.866 234.753 189.189 234.746 189.471 234.701 cv
188.473 233.624 185.818 233.587 184.087 233.587 cv
185.408 234.237 187.21 234.578 188.493 234.713 cv
cp
f
178.676 231.168 mo
179.685 231.393 180.821 231.315 181.766 231.804 cv
182.361 232.112 182.687 232.632 183.183 233.035 cv
183.266 233.101 183.365 233.16 183.457 233.222 cv
185.915 231.104 181.293 230.104 178.676 231.168 cv
cp
f
58.5333 205.174 mo
56.2935 205.125 56.366 209.148 56.333 212.609 cv
56.8557 211.427 57.6381 210.322 58.3669 209.85 cv
59.8615 208.884 60.8 209.829 61.58 211.099 cv
61.6644 208.511 61.1851 205.232 58.5333 205.174 cv
cp
f
54.9225 214.981 mo
54.6283 214.177 54.2899 213.394 53.6304 212.973 cv
52.093 211.993 50.4816 213.18 50.3149 214.743 cv
51.6761 213.791 53.5159 214.105 54.9225 214.981 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.2.1
%%For: (MSI) ()
%%Title: (2002.i505.013.P.m005.c25.game landscapes set-23.eps)
%%CreationDate: 4/24/2021 6:38 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj9?5de<Q`Y&"#hZ]IEPUXh'+i0?PM&0Uj:KIt!U[N$sBA3N,jrN3);ac]_f6fMZ<3l?MlX41E\b?]>8d_\?%n'oOGqGl,H
%B0F3b77jUr[\9KrB&KkIDZ0Oc_SWY%M:W['26CYKM>d$pWDiERmGk'Nnli/c?hKnjoi1@W>>H9N=7D'9HKS;/rf:$elBZ>GSBRRE
%?E@,>U>N&_m?F#>W)5XSP@(`U/.d?H;nI1d=+dAKYMFpVJSa\eE3bsm?4pH+=T!-t>ub(qVVA9KohS6527$q9dAL<gjWB",Ql$g$
%n6mg8?+QSARpRu%m0185QVo5@3H`ieQ56$&_M&gIME(B<bRPSDA!Q$Q]&!44_r'"/QI>SONfWdV%@),kQ'?1%a/V+Moj%Q%(28l+
%_5?+g\]pVpQt=1LB3q];Fk[sEA4JN*#';U@47,;2rg)J!=?1hfU$-3f5nD!jdi,RZPcEt;g2WcW='/XK/6eXo[1_qT`VZp3HKMbL
%Y:5DRdqkXWre3em@@Wd\V@?JU`FgQhWn2VuYI%_1HjC3hbX9/3<FHSI)9&UKjq5uTr=hE?guamR#4(u`*F-e\PcY(\^$*rUgn,Wk
%/e]$]C3]D-s##e%R>slHKS<$62GDpb;G>KG@*.@\VFE*[OGcG%6m/")lkli"W*-[2eCSh&CXlC+@Hb>J9"Aa#QC>,T&"5uANr8&C
%s,#.?gtQ\L*Xn[?kIJKda!g2i;nR4G?I&@(>_s6qR0?rsK,[hh/+I?J&,H]&F;eU@e8YE(LD).['`@]40DK2Rq/NeE+7;&c:1LJV
%l2U_6@]&L!GcB;$WU2WQD9JoRMm)Wj;JM?,3H`np9-=?9%f<'X8n2Ro5aZ359CYg:>l$8Os!6c[X$bD$$K/%?qKK..2^3j!^EaGQ
%X)?a1VW`Y/i'HHdI,]aL\g"DSf7'2[-5]AXe3['3:QPDc*?lRO\^WpAhC!p/gh-G=hn6c/X&_:r;>k+\qo9X'nash:Q`b[HMUl.#
%HL/)D+bP%4E\#W@s0Jb7e2hM@1@q#?X]DTnDWA<+8nFK_eog9%pT("[!M>-KMLJ#:iL,O'(>Z?#5H=>NoNtU?ke/*l2h'$d?S+BU
%d$<P,=h74uQpS=b#!0[/8+ntAiI\lf<%\e$j6=nDKjUshC8(95b;$M$V,[+_J%"';U8W0;U;7;e;>d1c:SRYc>5I&V_.C6[e,_"o
%:-4`LfC_kQej,1_3k]\U*bd%dH.j!IS3oc(AusP5^]2_[fm5KMm5Ed@"VTg@C@P<;ma`L\?&>GCC4Mt.bllb+jhLilnFp:Olo3nd
%*WMUEM/:fF'"`Xm,7\S+U%]R^@Xpik4NuGd.opmSOWtM\=`NNeaMC_M$6Tq0.Refji1EVs-4ZRVK+<eLLY6WWkfCT&Vk_=j.d3!A
%K`^b97Y_J/$&8\>%7^V_/0$Z0$?-^0,"rn.L>?u3%*aICdMr^(TpF*3E9+Ag*(<a1_bReG)nH?2V)ru-Ni\i$$[PZ'JqBA`)Ob(O
%-3.<*a;A&)BB5&(;)D]m?n`LhBUG*"Ri+"tk01J@0T.VFe^?"dZ7OaNXGiFNo!SU`<G`bp=LN'Zm&XKsMkF;i#,aP[@lZ54-gTia
%+t-WKJJ]7dPKDl@Gu-JQU$Gi;CM02S2Oi#.6"+M'b8E;rBBM%\CbD&)^lgCA>i*PkH)NR.aVEcaN#]-Ja8`#=@Nd]r@c<Z6r3-8K
%G5o^E33iXH9]+eC@G11K3:,:+71M+o(u_0H6OOFo"-A>q^r.BY;bSe<Q_u&u8!]/D*=a)tSHXo]Yil,kN<341!W8[b_*S'$?uUYR
%P:BBGrl`+Yp6j7B!OeN-o+i>((LWIs?75>DdEhjl$fVC@Wdq!tq.AU,j;^/GS-<MAJoU*aiYiXpb:0)J*+U,%A[<7n"7Vtb"YO56
%@qZDY5[mapPnr<+\P*cD`rQFN1+"uDT$b?M'Mr`L#*f9Lb;_DiSEUmKI&b(("k9*PF!/s5pU%_1F^+b?05t(uP`Q+dc@@ELQ>,UA
%g<<G[/U;;\#@-/>&>5H8<'Wl4#SE)*6-.CrF=<fd*!?r\Jr;o)q;:b\gI]&CLF2NWTg%7UO<K4ogNiBuNtu%b`j=^>*V]!#Is4&G
%]Gr1dr*14XLo:"DHJn0FIg=;[qL$fY:%EStp"]"_4?qj&&aotNk5HGjJDM+S6ii/IKHl@2/05%:'F243!+Ne%Iu.j3;`(.lck@";
%@mV"Ii!?'/L^W:!H>;D$gEa:dA<Lf*FiQi:$C[(p3fga^>EDC<C=5hqYlZC,X]gTj,Q204578U<!?W^q.CV;BYE@(RJU.=7PCdj]
%)$nN])6Q(1S-Q8R%N5F_aIs_a(BFUYJ:8AfI2i:qfZ,-.&jd$-+$r*rL]Zc`b_$Ib9+_2NBLE!s"OQ1*%m_6>:)2>b5Wqb_HGEhs
%9d^#<'EWYU_g`[""i(WZ)ib>Y5Ce7is)J/BJh[WELbKAnX:l:)+BD^X9a;pKLu&CCF(i#;&I:BANeKSgn.5Vp5p4R.aDXBBG5s+)
%#VK`:jN3CsPm,H6#rj,N7.=k$J4'ZWRh.:sULXX(AdM;ra:X=5.N):m%M(4F-NV#i$"P7(7%fr8=5tG-Qd'-,_b^Ye8pD53+=Mh<
%KV@'A08118$9JN0J?OA:<h382esXoH,Fg],I3!k-=^'J[XXL=u`$tiT#hC#"3ES!;kc00q\2Fi5nc4iZ&<>cXE%$`M7jtO'^2\^#
%b<97'1hr[JTb^!L?4=Z[%_Ar:93KV;6,7Kan-3UFL:iT+,;3Fb"&tr26CNE<*.m8U!9QrTEskt1!5cfdTRs[Oa:nrVX'(NTdDlkr
%4U:MV!,u3UJ6aPDDF%fS"DlEIM?M_^W&67a"RijV2T/A+rcuRX&7(3mGViPW,no:E%IlI]i@d^;[nnKI)koE%h1DMY"osEGq$8bk
%Aha_G4Elh1fA"!(6]b/tCtR!S5rS&kXoOT-ZVusN-lYIt$*mEiLZ8+Wa?B(+'?-H[`&VILed:nB4S&\('XA81*6^WjOFnq`"Z]*]
%o2(O*MIAE[Hk^+e$tU`IQbY@-Ebe&'-d5DSUNi)6=BC\a$XpKd;8tpRMeEmrXA,&t;(^_[^],KoMs+1dKWA!.XUro4nt_<2^f63/
%E(Ge;s(oQeLk$'>)h`id#HS`a;3_\I*X^lc+tZK[n8U(4@LH]U=gA*uf&*-Ca#-q3Xn/p:)-U7&el8QTA@.3t>.lJh)3h2/?G&bC
%2,ZhZO:ua;Y6k\h!J61O=qAQOJLjplaD-7ue,rIA,1+2qTHL7d%+YRn/M)\n<#\*p^tPG0We2kQ#<#Qf#1Wu/<=)*o'6:>D)6+E&
%WYT]4<[q,Y&CHACk]s0I19_0F`&<gZ#7VjuDCH@;$1_%aA7171Ll<Y`6(N$3dhQi.!Z6(j9IU(k'ZLDueV*^t6T2laW.5Ns_!H,M
%BGnsh(.;^9@^?89R]-Y(B)rtr#:>f];T=<eDEr<q+NcKp'LEDfNj:iX!2PIEfRXG3_BE87]nd"m%h-jj9\QIUoV\I_KL5qdUiCed
%qMOVedRQ#8r?)$BGfm5qi[JQ$i[Ji#Y/s/+Ci2d(.tWK])#5"r'h1kG6l1TZp&eDNALfTKDTpn/R;i#<iBs@E[gpSW0ZY4OUIAap
%8nDePVedq_iL6IWeKeX7A8#XgN\E/HN!kdT)4!ud74(G-L$"'.A<J*e)3GMN"1$!u6Lu)5U.3cc%S^%6Ql#mpg*&E^i<eR276hPe
%5Z'n!;-Q:#-ilX_=qHca$+WM86-TtP3$IqTYVXEXEl\R$$>sJ\)CFZ:n:LGL!+$f#b/F@8-6S%3+<pt=Q4lMN+fM(HfDrGo\.Jf^
%?m>jY4UsA*$/n>s=%)U*(bL0Q5NA@O#`qFt8K<t6=9?9kdVj[jKgNma`Dd;g?)Qb#;C].)$Y:a6LL;E].ibeW"B]sn$O83aY4RF8
%1k\Ju=M]D-BeVV&BIpW[!HC"'"0k[DMfU<-Uga'>6\>k0X>onf-gH_oBR%,iXK8E>IGsCu-RK."rHB0YqCT-nf\l$+R\O(G?k3<4
%gt=D>'%PqG80%/6U4^DqO;RnuoR=e'>4cck6]\m1ESq!'ja)tmG\"dU$3*4W1oCug4q@B>MDuA`KFn.I*<+>]<BrgW$N^-5+;INe
%U.[9Vh5CeeJ7K";`".Mm"I'$g$G]O>QT/A.WLSs"V@YXO^?Pct&2oB(Pn@tlK;B]+AHba_,'b]b_%Gf]Lt!Vi6$Pa^KQ%45&140b
%aBKD\+G^Pi[1N$Ski%UnjV`rr::kJSa4*Z(%mN>=LegD8(j-DWcojX'n9`J/U+LgRYp9+k$4`.7q29(;'UHk%Y'gNSNs?nF7=/TV
%Z\X<l7^3;feV+/CM.5F399qI?\34KG\SUdL/__Jt_4XL)K1H95BH.0e2InXA*Yc`Eq0uPA0$rS[S$terTQA:(lOQUB]\%,+\K='k
%_$c$CnW4bn2KXi]S+)q>jT6,)U0O@#!HJV.3rAscKgLU]*%DSCne$Oo]KG-)/lilYI)WbQ@nn9f@h(<%<B<C>*`@90hkB]_lHhm3
%<mD#gm\'c=e[%V/)dtj\j&$r)0f\ab"$,oRn7P$X#+jb70A,oh)>XL1$_:C'<Hn_eIusbh[)n'Z!T$=GBV&nN/.n]A+-,h%PGg]u
%]L8Ns\8IT<HmM.UCqm0l95H/b8,5bRq\ZuQ(0Mn9I)Vh[!G`gL9Cg$efMi$B7#\1R5Ei!k-0d!3mONBD_As[r,B:XdO>u[#2WdhY
%(-OolpTM;8@C/AIOc(75aFW[FLq?3JLjPQK&IbB1O5I;gp/Jt*?!\Lu'*E#BW'iYq,,_dN2.Ho<7M?IF-YYP7PGc!W1PQd)`0@,I
%*[>M(pkC89NTsk?L/eoj:0qbmA3&if</r9mro&&(O_TJVo)gHc[HG9"s7+uPgj'Y0b.%FtgLFtD3l;Ji39&E.#1W,e)a?Ssn9]&g
%Omb:;Yp6PYh7]3b@Q',aW]7Rb'*JJ+*;lET%\=`@5bWFpTirSk'][Dd+l"'t4-dVtR7:;Z]1L#K:Nr:ek:4P^OJrN5nZ=R_fl5Ms
%o/6Vj'6#m9p*S)BKFA@?<!,.NfToC!_<LMLK"VcON@sYd_MsB>2N\p5h$'Vs1,&m:/VIqu9e8r/\.uEMK3F@0aVOK"4kWM:27G]F
%7cF\H#Doq^Kta>&)aNC:^ZbEOR!1ssK<W!JaB-m05%;NZUrQ-<O+`<<n<7>F-`kWi7X7V1V-G-M#s:XNlmYf/Z\Ril7\bJb8'G&9
%JS\tclO90+JEPuEV\S_:A2'.Z7,AP:9B7Vp6[XRsop'MtEQ_j,,S#_#rK]V5(hE.]llRJ_nUs)ELj;B>B>hFa/6e#t8n3Zqo]D7F
%J+,!5r.F]2qD1^p7ttXi-d3pS98FYi)[c1n.Q@Wb#/bAlkk^.g%uBQX7/$g.])pn@UN9%L?Qcp1&C2hpfFMqA&/R@a0CBb0M;^sB
%+*i9FoMtGsMgQi&j"$ORYJaOgFl:MD^$Wmbj)/375p'h;?T7Ej)bbH38U!h=>LM>jmZqt(Uq7r/rPp4E@m)*n/a7.EG>#MOdbT=,
%,i/E7"JDR&-/C^]Er,2M9"J6Th3.2$G"B2KdbXLjGH6A\DH5-@P4"WX\"pV^h(@l/8U(2SM;q\K8U!h=>LM>jmZqs=T+";8ru(nd
%l#'(::R%B`H\mpRQ?9U3]9=7umZqthr6sKU@(KR+FLS'X-/C0;DFo%F\m*V=IpCtmejImAP4"WX\"pV^h;'GGdbVZ-!(sh,dbPQ_
%VsdrdUq7r//a;\6LSVO.h*(d[[m$2Ieg9-(l#'(:9=e?Uh3.2lFS?lD30*ZnFLS'X-/C0;DFo'HacLW=Y7Z;JmZqth7*4]*QRM*9
%8U!h=44teADFo&u5M^/bVRm:/G>#MOdbU)SQ?9U3]-Z;3a!HaU4XAi8l#'(:9=e?Uh0h%(h>M*lTVT1Gh*"VUqX,Y%\m*V=P3u(g
%8@i$Rh=FEdRtKsC;psKbmZqt(Uq7r//a7.EGQ2Z>j&cg`G>#MOdbU)SQ?7>C$qY[C)?D8NDFo%JPaoI7M3@:mFLS'XP9#hSQ?;m!
%e(rS_]%`Bi\"pV^h(@l/8U!h=>LM>W>iI`o6djeRmZqt(Uq7r/h'YS<h7lDZ9"J6Th%M*4mp;`a]-Z8bl0`);Uq7r/4o]W54dbZG
%-/C0;DFo%F\m*V=P4"WXpE,_]NqJKU\"pV^h(@l/8U'pNOEC6#&V-&4Q?;jham$F(.-YV@G>#M/fcfTt8U&KFh<bWJ],aIe9=e?U
%h3.2lFLS'X-/JO?-&uIu,i(':DFo%F\m*V=I53)(rG)P/Uq7r/4]-7rmNkK:>LM>jmS7pr\m*V=F&."\"5.QlP22;fQ=RHM]-Z,^
%a_j[ns)EnU3"JT(9<qcbh3.,jA9XXS8Tt+Pr?o^)8TmmoR_F-*P3eKF[j8SL*KocTAG?"ch9'-6>EO$:Uq7r//a7.EG>#MOdbTCX
%i],LVdbU)SQ?9U3]-Z:h-UZ><^IA2q\m*V='.'RF?D=7--/C0;mUV*K]-Z8rs)^1=9Qr9aG>#MOdbU)SQ?9U3]-Z;3a!HaU4XAi8
%l#'(:9=e?Uh0h%(h>M*lTVT1Gh*"VUqX,Y%\m*V=P3u(g8@i$Rh=FEdCP1kh:"%j\mZqt(Uq7r//a7.EGQ2Z>j&cg`G>#MOdbU)S
%Q?7>C$qY[C)?D8NDFo%JPaoI7M3@:mFLS'XP9#hSQ?;m!e(sk.\m(MC\"pV^h(@l/8U!h=>LM>W>iI`o6djeRmZqt(Uq7r/h'YS<
%h7lDZ9"J6Th%M*4mp;`a]-Z8bl0`);Uq7r/4o]W53LK4m-/C0;DFo%F\m*V=P4"WXpE,_]NqJKU\"pV^h(@l/8U'pNOEC6#&V-&4
%Q?;jham$F(.-YV@G>#M/fcfTt8U&KFh/*Uu].HTu9=e?Uh3.2lFLS'X-/JO?-&uIu,i(':DFo%F\m*V=I53)(rG)P/Uq7r/4]-7r
%mNkK:>LM>jmS7pr\m*V=o1sSbKB[8XdbU)SQ?9U3]-Z8bl#'(:s)EnU=:[uI9=e?Uh3.2lFEa>c8U(1Q!@[2M8U!spSA'?,P4"WX
%\"pX"*KoiVFSG^^h9KE>gQ?TeUq7r//a7.EG>#MOdbTCXi],LVdbU)SQ?9U3]-Z:h-UZ><^IA2q\m*V='.'RF?D=7--/C0;mUV*K
%]-Z8rpN3l&OR:UEfe(<`8Tmb4>E[g*m$;2V+."sIo8mLl,eGAU/]hm%G5'+?AG<:TJ!0/aAG8Kkl+<91a_j[n9<pY4+j"UnG0`>)
%XUc\hF\-aLZ<NLJP3eKF[j8R3g&8r;NoN5Ife(<`8Tmb4>E[fj1*kQOC\45E]-Z,n;/5sq,tbIIP22;f:3K16>E[f`:NdZZa_jJ/
%h3.,jA@Ehr-.sllDFo$OEJ`^8%nUq;Z<NLJP3eKFGFo:8G5iKZ-cp6tG#+?k^3b^"m$;1k,eK6\P3eKFpY:tgKATNT?Vr8oDFo"E
%Z<NLJP3eKFpRdd3Nq8?C[j8R3fe(<`8TsjMOC\*hd=7>GQ=T_XWTh$].*6?uG"],&fceIT8TrECfff*>Q1>*DP3eKF[j8R3fe(<`
%8Tt,ZM;pQ+8Tmb4>E[g*m$;1+T+";7ru1h`a_j[n:R%<^H\mpPQ=RHM]9=7um$;2VXHVJeErNqZ+#b_CG,9Yq\f)m2US%J_f8Bi]
%`YAF2l0I/7V:tWN^h_otWHJ"%mGYkh^[0A:q+@Vln`t)akEq;g;N(S)Wce)UeSVdbQ&ADlCFuA`TOXkPFF3nLXt/%Ce#QCX279ko
%Dg+Fa+75[0O$6eO/M&HLekSMEr@6[g]3FZY?9]q$p@XMbaRiCa(kChZ1=_T!p*s.qm0'a%3_jEN8LF%)JpI8Mh,F*:?j]+G2[06@
%X&j%KrD($76d5DE1`i(4-+WoRHDTFi0Xk0Q8^0#sGFkclY2+.WIX79"JluN[Q"2,2[[>_81bUmiY?pe>l[k`d<Z@b%M+gG\5EC,g
%G#W4ghn:9N)sobe3S")WG,8I_QB`XmCJhjQ8i>#O@_F-H3OHTl'5Mor:,PTe$T_$6$`"MIr,aRHQ<.mKh`B\@8TI-ns+J4#fF6E2
%)2sXOhV#E3&K1H/FdQWrX42oYP$$qg?B_\&8q$Uor.`gFgO:rp>e42g25*s`dk#c@R5D&sV'J]uBS@f$00-eun6;0$13`OgUEJVT
%IK4//mkV9o9=_$kN%F(fCC7A3S#0(YQ_iJKdtL,bqSKGCk,"G<Yc>!rPJu<q/ERRA7'`,B[@F>[A1]0E\R-n;oQdIu&kutMC:R>e
%%]['MPF1oe%P"$NpYDmA?FseKLYTHBgf<_MMh/3j20lp3CA)POjg8'+X`c_nIBU.?Sj`6G[/5MR^olF+[46&W45:%<)`RY\QS#C(
%@ed:n64&URS0V1$-^^uubTTQX.Sha"-&^!RK(tDJ<G'\&X,%heDSD9@opb83Y(tU\Z,$:DRY2Uor?c)eXbKn<l3pma=c?\o5TNV2
%;g"Qi^YW_;od$m/5@n<q;j'q\n5$s*HafGOpQS6D0Ys;%X\SK9/U=6?2jo`G])T5@qQr]?<C9Ur=R`\!_t76PRBMBIeR[/(2o.?M
%SN+VKp+,h05r)>OjnB5E<(,.:JK&26oZSC0\0X!TpH#2&jCY7N\_SmYZpfL[V1%]2L182+$ipZ,K,ZDY4L!9CGfeHjYU&OsA.gg7
%S3mAMF>Jl9MTnGZg`5*]V0uY@g.A`?B.B`'=e&ni(g@t<C#&8$^BNPFeGQ]8f%Y!\bfYMYHHdrN2*'i5B0Or-[uNf3j`=LRM93AW
%L<X>iGPN'^Ai&h]AtgT>E`2Kno;.G:moQhichfZ;G3$<na-;,'Ri.Y=#sW]njdaC3b*AurA=ItDb/sIj]8WR"4QZ[:Dq%>k'SDF0
%7_O8WEU?j+Wru"/$HnNVqVG#2YE[*^2Pp4<"tpk,DXHp"q#&g%??c>/J-jbIo5Gr@r,?[4Hl),hIPF%&NJ@"^nR?B7n\t9],WU?T
%&r_tV_>Nb/MkA^WRel*5#Q`.?igK<A'O2'Y.q]V<5KRH5hDm=t[L%!+DS>I<:VEc08lco*T/*DASKuk2\c)I&:RUJR4oKSdh0"[J
%a<VD:K3$E=\qFF1R:NbJ='CT`>OlN8]m]*&AhrJt>S*60lYn1#SVmV5_!L..4+9lZoR_U-%pV^V3)Y1>ZIlA@-VM3$WC2B!'97&m
%r%dd#W$!hNna.M$q_:/U+i.]d59qM2CXX=;P'm0'%m7..g:Zf.iGCWBQ"i20*D"]eLAbOh3_EZ999#)G<kR<(S*OY7Y9d<al8GVe
%<%E+;9lMmKPR"$P5KQ()Ofjn:P["+Fr_-^8OF>i#1LZm74XW+`"F7$7-RgG@aj$OIf+UP-[oDYB3[='aLe]>OGuE++H;q3tQs$t)
%Bii"rRTJ-a;R8uWCnjo:0)gGL0n+TArY+n'"@8cPj;DI?f0h+s[pH$[Egi9N21di50O&7_mR0W%RAhiW<c*+0au!r@au`ItM4[N5
%9J:ZA8k94]_6#,^q77=&cb+.6C0,08dq9j50I*Q0`pZ>Fc-s?S8L?7dc6;XFRI,>u&k2$K^DH"7A+W/9Oe>C3pS.TM7@C3';+gG%
%01qDL9RZn6"9PG`E/hC/7G`qX`UU&e:\US/REY;Y"F2ZC5Y*]7YKrWUHYO0Rg5KtpZi0C+7(;'qQ'f6T43Yu:r74_=EWgIVr5-\7
%H(LV+Edl'Aj"0>r\U:j0DgYaY[!jrLcCZj:j4\A0ROR9cN,(3\f+Q`8N,(2Om@>&^cm%H&?],sT6:SA^NbT3/af'B@W$]?LN+t-[
%eKe1Z;(YXEMs^kAhsm6DZP_I1W8KnJ!@Zdfp24D42bK_Eksj*\@Q*hMGmVf:jWC[P>]kOfcbn?k%4,R2\3Z-*s!5uTEfn'l)ZQ74
%boce)J,/T"M+shs^rN%*T8n<_a^cK>_GY2;<Dq%kT1TIigOS2?s#8kgeF0pe=$@J_m\X!`QbCR7IJBjh@oh:Pgibm/ZSj"U-T/=-
%I-/V^lob.UHsoUPfK;@fA_Ng)7A<jcccj*"aegle."8ne;^gmcl&Gcj^XhmY!"Y)N$!s5f1U5lh]1>m#"m)GL5-#WN$,cFph!gmC
%r+P5f^cXc./\t\0L>@"cSHj>,&Nhc?JLnp3,alTq"QtksA\AtiIi4`.5.N\`bt@lEk-^E6a-fON8JYs+&]PTA9l:HMK4Y(n,WUc%
%&\#uhZa-J!Rsll.s*+22J*5cNK6%!9J5YJ-muWr2GlLjZoO9`PIjq>S%^;sL,RcAIcWBQ1rjHJmpO)(omt?T?\`Z%3"L$VP*R,#6
%4l<kpr]/X&/QXPX4%Wbn0f*5\nVj>/&gV]=>H?5c":TC@oL[?5mSb1*V`hC5+Dulbk578>DY5:3ds&eGc]3?u;VR-&T%'ijHI]%q
%A,OiVQ)j4/FBC-R'6t88Y4mU&H"l!\JRlhI6RE\Vs#%N,>W"[J^&`N)gSiWFPq.@EHc<17m>[uEhXI"PIHUm#Us:6.-E4=Y%?_$\
%p)NR7s4+U>:)d:j'C:3n<VS'fZOuF`1#&uIbfTgm;X:]F]acg[0gX+ldkpk-<Ds,>+=;DQ8tMAn#9m'jUtN3q?3sMNF2#@7OQ=Zg
%_9?gpchF%e\[7KHJq\[mJE^r/_<raN4[I2V9b;CV,?uPb,)I+-]L_&DIk0*4B&U[d?t"k@Oi3/'?6o%bM&/arpiAg8<(GI.Za@P%
%#p`(bh/XX9U>2%CdaU!BoCh;4\U2K;XitZ`^2l<h&"BLug;e)B.+(#4@3EZncDUV$'?T^:SGk4.A3K!0-N4#01p>5m8Fd=UBn+.@
%Dg^#k9TK-gEg0@.R]c"%9,otb),`YP8S6&#0@$q;aQ/W/IkEb,idUbVEpKg.VgS?hb2;dS9/HG:V:04hm/OT]=7=@BA=BiCjj2Q1
%fb6Id9R`O\P4A,6ZK8K6pe@r^d-,)]PnL_5ZTKd)`,7d6B=d8fi)R)4Bi9#>YG[X-Oj!Y=COfau(:1<H[jqZ[D.VjoNg:F6r)IE(
%<u/e[k`8=rdJZh7hkW"HdumDeg.QT.<7l1gdog6OK'=P39G9ffaX3,Q1JJE9rRZ:Q4+;kT/>=Z:@n\V<@7hSNWWDToo,.0@n/+aZ
%+F+C;@n^[BR$C[:4N>SuMW?L(J]IQS<+p,-d2c9Z?CtL]h,<"0^@3XEDY3,TNR^NIIVPM6;t&4r@,BcSIDJ/%GuBj+qkrgR]/5I0
%N)a]Hn#TD]1q-TU8PQ@PJ1-hR\jf7=GQQ9Hg[^4rmp!i5Q]`$g4oM:(Tr.hdeti].m5JljJ%cs\Pf2T7Rsls29W6^AAg3j'1`OaY
%;UPm.B[ZU<5UCoCQpNtr83T"Hndc4&!et=e\O$8G`s2JpiodDl]]`>2A7h5DPg9XR17-+4>qJpU1F#ldmCqX-M:1qF_3B5Vi@E;d
%B'+iO,a4YegV&bD6/Lrc*ErhU+EB[4R0EVa%>FL8=>jsL#mp%iOLkg.DH!g0J/1+Gq[(Cefhe%]5*`N\?NuV"g`I%5ZC7!-S?1k!
%B-XH;=j?n(X18A;CYl,&3P7L+_6XAW4X]R+hcS2NYWu@:a`:.BF0_>%G8=?,-)c?QGq.ti9kJ"[\Q(Nm"^SE*aHCF%9"Hsq?bU9d
%8^cP0f5l$,3/3+D?(Ub.,lGY8Le_`B/Y=OJ@p]tCR@)onH31l570WL[:\fO"]+84lo72eAOO7&.Er>=AlPER1FL.+h9n'u3<SB[h
%'2`PIp<RIdQ<NpMPgq(-M=SlDjb369CB4@Ggo-$`2j7Q)f?(cr&)PLc]rfQ';Fs&uH=P]g5_Rg>?XDa$QHi0#9E$!`Bb+k`m\jfA
%R[7p64"\"b:g0str0.JNfkO&SX`7Rhq=ReC*Vpha=R"C``Y?aZH[8TEMtN[kXF=D%qP&<OGC?.%lDRr&SQtUi$$4P%AHSC@4?U$k
%9^l"3Y6ob*A5je%-g$LoJpcMU>H)`XmF-eQ-OcX<'af$faYm[2IcisEnfA'4Sk1b_X1.H@%&-CVMLp]B,1H7X19pX$#ZecT$i`']
%\p(1]G#+5c<WZD1MLGjG8PCBad=2Z?SVe+*6.+25,'hr9PgeEs1-8'Ns-ZR+?XQ)g@3@j2^DZa8Q0:?7e"l,fS?\^c0U?64P"akI
%b3(JFereT)oZ>@oD-#BB2)!?]$YClj,ToHlL@pBT%\#:uRCcP5aQ,<laYAXU9RCfm-&eAj"IWdpA:g$Po!^6sZmWrUZ1pPM)eY:!
%Q7j2IIF'dBlg\1L0p<A-LX5IPYBZPEL\QgV,g7f?@t3^aXL#,M1E3<(`ZIlRF$X&_a#)".%,ZcF>9e$GRDj\qRj^5g2pnjo,*"t(
%Ke;=t9"u^p<'eQ]=*@TYGrWsuVE7Jql$*#R>=P(4DoTt5A5(@,Nop.QZE*TdCl-[Fi-X`2/hrt4g'g2V!bkqFPdC13lKk^-ZPhDB
%S%F%6DG_.n8hcY"Rg>bY+MmdXB-nbV0$[0SS7Y@L!A=KHKH9=EV:R8!Re&rC9JBjMgBtFGM^3&)$$K3@-.l\$$,96XDT-ot31:OC
%p!UrUL66a:ZF#lp;Y+d<]@+nMD.[V`K3<Al2ht4dKAT3aCV'2iAWeu$9VK_k/3(a8B,L$eGNVWU@hQ5:]K2/(a.HHI]&bMBXo=n_
%0T-[kD'S,Cf]fKn@elK_E6FRj/S+RBEaG]2_j;NDRt4;s0DtZ$8>2r8XGZ_QG?(V45Pb2[(Cg5bk+<Yq47Mit?H`HQb*;i409pBt
%>1]`@\*dRJc.#Us$tC:O@>]Q'F0!j6(!h6$l^@3CfAL;>F?SRB[A?i+$j\0l+3nelg5tj`%#0a\M=+&G.fE.?keG2YpZ$JmB:3B/
%'V>Zf!e5T(pOC]W06G@U%q#o#KXFT`3\S9BaCe:![78[S4"7-Rr"7^QK?%14>>F*Hg+j?W5^M.k*7NL&(I_>(pr-*tWJf6^B(1K3
%(7_iunZRB9m45RB!(E[n;]e1PWUes9i<_OI>b_]pU&2[R@&'%RTIM.L)R#]A\*CBU*hUIB7IkFOIQ2oM>O<alWLtQ-`7oc=F7Be?
%rp.'N85"kZk]oAOj.tCLBm\A^h1u^\:UZM;0)V'l;F4NDAgjMWVlI1V10%U;C`<PR*SjO3pbcpQNe5\Ra&Y$P$U36AFU$9]_a#9L
%lqjEoWfDt7)&?.E#L?IFVP=,cJKa&D\umd4_Ns*uWX8^,5W3*jaG+\F\'2!cc#adYl#^P'GQkuA/5uUS8'u"+Wb/2S9g`Ir?!Pu$
%'i#)=)\*?]dr<Z-m><e1_]dF-XtUd-Tc+=mU)9?$i@edsBL?FVU<YUj5W!-q7GB*AkitOACkcHKD9"JIOG_<H)U)#8M^3'409cb&
%YtWt_TkM\=dEDU<NnGG[UF?sM2OMH`DDP)l%N:YK+iuEbK76[bA)[j]TGTbb&6_Mf7]f'hS#W4A*&YcV'U$]\<C`#u\mj;e9Hg9B
%d=UTOIi@Y#Lec)n,Ka%-K1;gXQEAS\VPu6hS,u>nU.EafPpG*Rd2K-cUOsTifbV[f:aPn\TKkC`<,p!N/Q3f%BTAokAC-X=)DhO0
%,gc[8eGrl@*%V;M1UQT0.?8,i#ao/NQsoLo_r`kt$pCKImOFC?`)R6"7)S5g=FmG3.Q7I[^bKW%6/t;p$Y7qh@o<I),q(;55-VBL
%/JSs$66e\2@/:3jZ3#Y&VZTl5jW[j+7+;?AQXZ,m=C=7b:i\Y[OAa=oOK^Q9dJ<@s1jMe!GL>Cp%=bYX0Cb0F^Taj.8/3/i:*HmR
%A*\MuQ9t*hm;T1N`s)PS`#*/]TWP@O=cQq[OXPs`Mj^:Yd>14&MmsD>5`Aug0bDA6FA<OF6KBi2`IOkb\?l`)SZWgM,VaJ'(fSm_
%NR*8Di3;ui^m,mscf?-,/DEI7%&=at2$G52Wcg6&6O3YLA(&/b\[$<:OW;g3<nn^ZJi9^1]jjrJXTM!B.`>)eC_erja$s-g-sC[_
%d;&."(^*nr&7a_1A@nKYZ;VBi'+G*/UhNp7Pg_K:#Z8$)L'd*pX:ZS69n?/='QR#jZS;2OYSAo.ng&uaals9E/<6G`KQKpC""]Z`
%>GAdO"&r6U:"n0XiCWbHVba<HH;pS)OJP2DNhmZL4ESS!S--<`@Y%?/$^Md1Tm&;_L5Vm<][==%JTu'0\5@7*.JtZA?r5fu9V*ah
%,Xh6b:%PY)Eo(]$JY5`BcE_:k2n<RpiPLCE&QhF.%\b05a_PST(@"/k+sXKQgYadiOq49B#j8dTO[6,V%:A(3*JdZL,`m_b#]S-Z
%Lt*5=<I$?#+_$7l@rP+-GqibM4_[3k\eYoQ$OXg&DS32s[R^[IOMDhg,TLb?%r(u">U:VX^N@NG%J!+V(HP'^h;t?kJ?*P*Q\N+=
%2n,`oj_/gV;gC;K#9g;jCM4E^)?Xlg$MaqIc2b,J"tbA"0U5J))'fZL)dV?O9M.mb()mg<#u0N[N1nMe'nhrH\LEUc'H`.:=U7a5
%K*0;k+:c3/ckmiDjEaEl@8%\RDpCUp"4,E:MuiltT8&TI7iRhdc@[Tu!5a++3L5Le3?["nd')]iZ"f.cCC^FUE@6'iU2lg(-6YT8
%OJc$c%#5mm$"4D\"^@+R@]1&L"9k-VL(*jI)\1oN,VY/Y6Wjc<;K/lMedYB)%2=gD/Jt]9bQa/fR'IKcE'/)Jg]YFF2-dZ&bma.s
%b91YR-P64E`lJFe;e&B+@O9/Rd>4p-qB3sq*"8<uIOXAF&7Yb\"=QCN88??Y1%FTC5_@ZYA:bWg&\qih@"ZN8<$aY4FfQ-<m]r'M
%79-'q&I!b4.m/PGNfBVt$FGEk'o/q9ngd0?FB&<G;KnL_c7pm.9M:EWbnao#'"j)49iVK0RncAK_3$349H4+7$4O4N0LAF>)I.Z;
%KW7e'[Hi-nDE:_t=f/1I@Y<e[V$gLYOn-:@>YmhBhXI0_%#i42L.dU@Y&*D^"lWhqPb@:S^P&2;YlS\q!d\](n44[X;>"FWLn\u3
%ar46X1.hlZlkE+24'ea8kl_<J"bBp8"'\*?<:sB+P<]+d;WpfnZW6p6dPPO9kfG`-2<ASnJec^f$n]Qt9"\7Q)7E+%+sI/i9U..K
%9N'DmJV;->M0gB>C.`AYGA.JaDbNLj&8l/e9W5dA=Y0kND_ni]Wj#2D<_h#!oAV,qaQkt\gBNne>cu>bfS!8%d&dMlW<@d.`U^:Q
%."S*AFU,!6fqNH,?iujo/-`YGna\M-?!Z3DBp(2>(oJ9$!hf60f]>@VU`b=[:YF7%+T+!de9KN(@+-<5`n)\2A/mbm:a8#?FH*#t
%%DgDb:]sG/it%dtM?%(n;$(;_?@<*qP\X9NRh77T$?hCOU]nl(?l7sMi\9:8W3.Ptg:TO[!U<OmE^Eb;L;Xp?"QAE$gSM2B_Wl:Q
%ha+*hNj3p/Hl;DDMhE9QpkPb3CDVF77K'tLQe^%Nlj@4KH,%k.H1c@;D1b_%cI[XP,TZF$fZjaZ7(,eoHouci!]l+k&:[<r*F37/
%DSa3caPEGAo>O5mf(jO!g"I:TeH;B4K<_m\KVN8#s."@7ec#@>%5I'Joh.7#fE[>`8:mup;_c+H9"bW8*rgXikR0:ilEt!GC_BDu
%gANX`idY%Pa:5P2o44l"i4VI64<qs?:YZL8.$Qcp[U8ok@::WtH+VG4r]U'.Z1"eGrO86ZHHX:P3m=;ULWM.@:\`3!q!ZW/l1)ua
%/%7-\9RhA\"ug6r/#E%Jiu1nQWO3DcXcAe>O%O]qCGoi;U?>LoD@K50Zu&/*2f=)r?BQ+Fcqo=s;_c2[.l[1Flhp$H18!)bei<B8
%lnj<d;_f^+3*G,\24k8k%3XrO]5/QH.p(d"Q(u1fT/8DbJc[444YZ2GlK.71&s2"J@N78/m?Rc]h8*Khs*6:/b(:s3A93minaMaE
%H<qJ+nT@5Z1GrAM,L#KXHq_hfIs5+pQ%/]/,I>EmlF?)d]]ODkFlrYO:)1p:[X1lN<n`*`1Hgs.]gIqfcrd3.3cOCd*V[]L*W(gk
%,FIMHB+V=H-XP!"G/TAAiEQUZ.9=9+]Xl_UK5%5-"f\APF3a,4WC*imP200nCKCG2S$sTn#tD#9cT19t)kH]4Zhi[G'nhuqUQQC`
%!aV&gC,6]7R-Y`/\_LI<Y2Yo)]'4'I2>hW9Rp3!_J6QV=Q0G[SE6)@(GLBr.)l]=<?b5c9MH<M:>_P^U-e3/TT\WYFeu?6C3=h6R
%!S+\s0*S#<Qj;$n:j(:uNPS2sc1Zk[2TmOq-XB>ubBoq\N9u!)Z.kuN6jM0p1h4$L(;'.icHVI));@#(aKZEDMH(nWgA&@OL>0XZ
%.`*kiAQXY*4o;KuDo3c>coQ&J.OO#qd<28QjVDhd::2qo[o6dbU2!iLX\)kVn=DU,M=ug#&o:?jn`!!WHMR8ooB(bg]K(7GSJ]D8
%Li(`/I[c:pp%hVsPS<i-DUlL@X!_5K;f0M?//#D:r'iMXod%XQZ^lF8C+l3*men,Mq?b$TVuX^F3uiTAI)pfLo%i%(?(Y'Q_E[F*
%"<Gl-_eH2je30&GAJh8ZeZ+nGQYJn+*735pFEQp:8d_*C%D7%M3GC>kjmm:EHc8af)T9SG0IkEhI%#!gX`i1.#pG'FYrr\#nL?1R
%0#mP5JbS!$%TI50i([1S8iQ7?kGJlupuCW:no42[0BK07IHItH@L%A(X^Y+F;2;sq+81GIHHj-NXDdb&1LpUWd_ge?S\s7iph1,o
%g=i@k%;&e*?<UXXl5@HVdk+XG?E/TcGidFhgM`n]l=KFVLcr$e.oNBJ)A!C?dJ4$a_%lf;E/G:UB(VT?L%s3eE&i^ui&`PS_f=a[
%)F;O>^O+30m`ks%=Ud\Hc(p:s!H1W%?$C$"@N'UdeF%>&$?pi<.i<TLR`]_F[l(gRJtJKIqMe1tF*%,(T?qX;d'QDoZOA>M?_c-)
%$bm_^4Ht$iqT+K>\sFMs!_*th**<.0Wo1j_?>'_U7k;f>J-DgI+SUV&i7?'QEV,uZ(bFWY*M>2toYRp?9T;&jV$b8@8M1b`1uc.N
%QX`ku;"qTaP,d$R:;o01"DU$jb*>_=3,YKoNl#Q$+G_-EUL+5#?Pc.!NLD-Tctd[=CJNkqe(aUf`4XQ$bYs7=46m)abD8PBm)-*Y
%g2$,$fj;^Wof_U5ZgeSCQRKDIYkL+gELA&YV=\mOYHE,bLq[=!Mt]iB0d3i(A`Ft"+CVBV7B_.40@D,aX]>P:(!,_+]D%8W-QoUn
%hH\Xd(VgtVh(cU3O>WLZc_iEVNUGN3WAH4m1H.tKVDWNT%K(ZTA0r7(h1gs&mpGG30E'D)F>uP5_a])PC"HT`/b'qr7\4;n``;CQ
%I=\W=^V!6]AgG1A6i5Kjk"Vn[ru_Ka`HPK,"EFPm?2kT48>P*e(Mg2tGPQ$051H]@e.JH"EM5PD9>h,A?+\XiVTW4(X\lUfKB6Qd
%d4\D/O6G=Hf)S*:lcDZE.$'Y9G6PTA#H`!@d1lOKBc]<llNVmm1",@&22/21o%DSsg9HG+N3TmFD$kShC1-Gn.KK"3B:9:C3:@7U
%/M^489^cS('VboWqo;BQ&W@4:A3"f&1R2lFg!C^JCj:Cl(@1k$;<l]hn6Y-ta+a?KiKrTCp%I^X!pW7?l^2?ep0*`^HB_<(8&`(J
%5u*H)8Nm$q8p+B<jrq+Nj4;jB)IJR).9E#'>.:jVetqHZ@G0C+iJa31Fq)jM"aq+^W5fh/]ie,-9gjOqm**8:QN.&hrT:lNg3[3d
%6?cr!35=r_HF+-=:;P49;hfIjkE1JH`ch8DAu;\.UK[LS,$aY5V0ZpQ2++9bV:n@<_e09K<co>fe0-l5RK+WgYE!2WaKUWZ>'OuC
%8/%k<4FBY(@mj\.q0&UjFeZ6X%*d!-nIbfo7&(?.H!I7Fdr132K>=>cfO\=&B&oGmA$:e!`J*&_NEX+W\qh]&n\*])H&_,09f<;c
%;.LpYH?VlBTQ>3#KDar=hG0E<A)\U!e7`1boo['$qmAI$ThfEU<iZDQNDWQ*\m/2G`K'@bpT@bsn4*/hC)<O[CQ&^27n>i:1"*'1
%jgj=Q#KJjgfXc7"AFN'&$[[/9,^8N-^?umKPh4C/)AN)KBr'cGP,8Z!/p(n&JUJ_0#'ITt<#5u.-k^'D)BE@,h2\#=*7GW8hWV!a
%c0E;Ak93"e7VPi?TcU=5b>1:DSIofGHF,^B1:JA#p]/(@0fG2(l&d\)YX!Wk8s!AXgL[9h)J*'aP@,nEUFU0Glf'8,phjTbND_>8
%\e\Kt]@k\?+_NRN1fr]oH-^2aAeZF!=pF2DAQbinaq.,WB2_I2T/Ru/)<pCpYJ[@o?B/ZMrm?<[_RHJdB_F4FH/nicjdUB6mL<\F
%%F8l$@YR\EDWAu!.,rVR%Ve%[TQK#1SqW_1!HehoQbq)?:%u],cc&=\+Fl\;r<U"kZu=."_V#FWSke,1hBCC:Pt'<IoT2/^*Pid0
%\)GoUZn[U+=T#C)X`at4prue!@4@$NJjG]Ql[>9VSt@kj[6r0B$2P\Ff\)16SUN4#q?EF"M>Ln[7I$gKS9S,_!=s4,TPI:J9N[_$
%j#DmgN5`,=E0caCoMXU!.D[I/+P#FP8Qr)8f3UVjEm[?SDEW^>[)?I)==s15PhX%cq'17E1>s!k3q]LAK&L@#T,/1=e*j(NO98F1
%4TuuF5G;M)TiZ-.SuU<9H)ZUVXJFdkTn#0t.Fn,h:ru@1Lc'BT<L9?P'0"_&7\a-9nN.(]pt-]+n6S7R<H2(W^Tt?jBWqT6p+O#[
%WjGZpq@,XB-U#C+ObcIaKB,q:dMS1&K1.6#XnE_&icW6;O^Q0(/L?[Eb[o-[A9S]GJp%U00had0YKC,X1`GM_+X>?*'7pfiCn(`9
%F?N#ENSq22f#nV]7Ui8\n=a4`9@lnQk2g%Apq>I8G%$,3NSg1V)kQ`r1!aMMI#`WZWW;c'"F7K273!A76q3+05_6O?c>E(JJ1BDh
%4>:@s6%W-mbbAks>nucNop3/X6Vp"O_?k(AfW69u!lV)\Ie0EU3g36#"1@EJgHKS+HHk;@o[.HGldccr/+mqWRGpTg7ne#H6j=r+
%XspgOIn<)V8=a9oF+1erAC;Oe&m$\9+oW?7ihY>g"7(r_b3F%!o+oK+/C5tFGSiuh)_(PO???Rk(_V.Xh5dE6;ukY+S[h2+!%9[Z
%`>L-X(5bSLkFboodJE'lmKilg2U6ZWSF#[X;'SRe]-G)5Nn`5ZF:Z]rjUn2/Y?lg:h7Giq&LcP46Mu$C]:XMu)'a'.)Wc0+\r7QC
%W3bt[;!ZJF-Zumr9`h;J;k?EqYY0L#!&p&fcD#urC5eVq^;N'Y$ggJeE8%ifZgd;J'/[a_-90@h#'"9QL^rucGO#_VesO)$7aI]s
%ZUY%kPD4=lim0>`XV"M?OFoYSB$Rm.9M%&(5W+Tkh8/l\V;VtT]sg+O'A^@V81h\k4H&:;K!VqBm_(CgMs>sAmiV]49ODYEdj;aB
%\Nu/&(45_D'Ro/YLT_9.GDbY_L(h4p""L#&cADUi>#+]26+e'YF[X2?.i#=S[;7-+DWWdb[q?Y*(il%9<k=qg4aQa/H1T;3iskbM
%b.dT5BJmENgoXkc?e+W4([nIW50d0`FR,Xrl<1rNYeK^DGPb3d\pj/=n_m6L;mM8ap!@#Q])Frl>5>AtWtjaTcGo&>PF]s`7Vepp
%>[<!*ltdZsCBhKGgY&W?0+W4aFmh.gg"J(?e*4nSIFgM.^Olntq;T9&omXB@s8"1F^L(9geGOr"B(**T]tA2GkS3Xb_`-8Pe]2Ud
%1AORSs'hY.LR*!q]mfe9A*,>/IQdV/d=1DRFuF8rT6Adil.U0,AYE%-gaumMAOp1I0Alp-b>3&XCiuZPG5X1Ch9K;1mo`=/?QS<%
%m,6XDk0q@h\0)W1/,/l)ZOaf6qNg"hn(l0ig0Yq6:0/Oeq&nP*jUPP8q7=(@.[5mYMn*X%Ht+t=TKQK(^0(3:]T[^?WgNB=:UXX!
%5IfPuQ/!>VXg23A4LjO?B$-QX2(K3PXB.USQa>4rViOoKb9&g6K@<?JDurZo)uJ5*>fPQDrFmWX00QHiD]N_s=ga;p(!Bcr?##d>
%Boak'XKt`6.DObd%@XUEHe'-1.BcfnCG%.n45="E?1G4#laXstnEs[m-b$S\i([Y!1%6p(q7R=$K5E.%IpUuZ?2h(2?9J!NEjt?B
%0VrXXaTGe6&*=i&AK=dYS\8/]=+u4>/fuM.dt>R9R_/BoG]3D+'/*kT#G4QpFb.^a(\dZGqI=f_\1)m]HrG:8qr^ue?aqrcS[o%A
%r)QtWhCbn.q57:u6I;4(c&M;G(S>D!_\%O6UT>&4#'skT_]aEm%Y63LSR=*HV`*RA2LeKeL+)ap2rC*39:<-afB)qlg@K4df7!QN
%CL4Z"\bRe+^7@9r0"!LU%nh\G1K?dUaB5(k4b/a=mgF'K4RIf*il2qDf$?9\Bm)AiHkn9e4$S4?=t#S,6*@i,]_u6u%::EG%$rE5
%ZfTeArU#&RVqJ_3V6:uTGtP,J)jR9,/,3Xd3U8c!HaO``H;sQgWqbSJ.(IL@nlBD.R'3fsZ>Zh^O'SU!"`9_Frm&MdqgR[D^YS/+
%B$Y3]<$/4@gZCY842[HZ/R?KjWiC."Gf@WlNMYF<H1J[gTklp7Hd1]1iZ2rSKHoFo$.X%"RlTA=A946@?]+'QcdV^'YEg]5!+/b'
%oNU^.k3-m[YaE&X[h\W7U0Pp-C[W[7%TnMBCt7<edhQc/&%:>-T:J-tl59_0#0,UBj`bVY4Litc9aiqKEk21hmiQId^CpIQdb\ir
%^Mo_)%K/_V:,_fLrai7\WgFJ]=$I\*9+U`fFm$0kXZrh::S023OW?&mmD%NhY'TaQ@[[Ln/f[",D4d/1RF<hdq6eAr@Z_&.I/M44
%S/qH-40R!(gg\*Kq%bTh\Z?K/L)Ob?<r<bKnWCB]()FXE'M:=A*X,Uf8#a'^9L&CCp]+dbf&OtG[IGNrn"omi6K)G13k9^&c9-T#
%>)19h,'qVpI-8_"FHel^G/du?jN41pA`iOG=@tP%(=/?8?.21a!7sAQ/`WSge%c*j_bD]R6r&45Bm&#\XIPQa5`m_WJ;_0j\@fLd
%C@l6&FChAAX&NDkEH:fXb?=i?o4P,Cc%<2gT@.PYT%&&cZbr>fCis)Vj*H.;3iZaUXZY!T?=0d:a3P5kfZ!#T)=>hbLBVhbiTD38
%boQ0/Dqe[aCeO:Net975`SAqHD&Y)@5DaT\2Z,@h&Mcjhd\#[dJbg!Dh4iB9/**odb=,u#=,WBLRQjZqh_tnpAJ6:Fp;`JHGc`Oj
%HI3JG07t("bLd,V^E&oN6!\Fha##+]"O72SAb]YPVL6ZK/6't6[V_,5mU\pYYEj.SK<@gr#"h7FVf@F=8K7FR:#p"iS%LP;N[qDa
%[IH"O_C;H@]Zau02Vf,'*kB"A(SbUhi%dHR_,!CGFbS:486'YhCsfo,J!-c"d_"=$^h)L5\in.(7P5&j2#S38MdNmhVm*OZk)mG;
%Yk(.?YHGS2>-=7;:jm3N\WR1$)VOE$)ET#MdVFoe_IZ%kDY;41<6KSm`ma^%Entg$e"3TECX[FALu$"8G.VP&e/=O6);m7hi=M'f
%0Z$OabbdqB,e6Ls*>uddUEQb7$(rn<iS0!Z+\aT]dG#N`Xbfm.Ap=Itjb[]XV'Ghr00qR!bC#kpKQ-oj'8b)Xe2&J==3gnd5&^)S
%O3H;CkOmgE@lJ@ph1a[+:lDSl7M&5UjhbX"]RBKaB1"\n[p41Vp0!L3<Zadb7Kb14Q;Q%YB[Bj?E)6X>Gr\d80aA&Sk?7C2@)A`N
%6d%&sj8D7uUYS&fV^`iRV.D+ui%haUY?6M/PtO:?r96.'HC=-1QT;%;^<2tSpM,EDK=/\nVq'deZd8tmNg$;WH,d%lpYkICjsZQZ
%-=e>t="U9g-rU_K`TJ.*+P'$HeOddW\:9\!Da*tP83k1>p1Z2Or67mQcsggp(2e;"7p],%_?2S%WVg6e/1o;F98h2?"[S0AZp8>k
%p$.b84Fd14Fh1U6rW&%kn1D\s\>J-_0Y1F+=t7@"U=E/n:iUNg&:^00.d"L[3R:^>RVNk/[=p,]^/#TEAc%BsSWnOBh.d`a$&!Y/
%rR;R9"tcXq=5dRO$&O<%r71)\;gsFeg@c<_E(>t1f?<W'CR+:hFg57m<Q.Rq)mK<`Z!/ei9T-'knM=>M\>o6&=b[#rqnbfI,8jO'
%4PJr[hXuN]B2pKF]&c5j2M_dl\ac9S?qTPBig97R-boQ(\qI)sTIT60Ib61Fjh7LO4Z/2&ZpJ`j0/)p`YEjAUC)?L,;RsSKOigg#
%#n@JTT/RkJ%.c-Qq"`C&#K9$Co0lr(C3EtdRk#$$51ip#?pFPZGR%jPY4b0n!M+EBR?oR%?Pi<,jktcoc23P9l_\`CX;j@;BQPch
%??/A\ItMO#]Dd%nI<g26r&h3e:MEqNo^hFoiA(E5j3+UsXs5Ig3I@N=h<TM$&dHL)\Q2]aVn>9K^[L_;=;27TqH[H3!2p]2-Z5_e
%/jFdOILE;tB'jCsIs2u,bj0UqiCB<bh==WLS#rR!oBMo7lTgB4[Fe>>1qZKX!+Xa3lW/dAg3EuJ(,#43"W:sT_Kgc>ltj=\S;r\G
%W_pIEES3AORQ5`V^4Rr;=-_dc*=[bpCc.1%]i57-C"8r-3QuACf_$e7j/B><DQLfJaO-T\W+P0hr^-?Sa1?8$,j<6LB[F_pj6B)g
%DnK/<\)2U[dP!?V)\A-Y&96as_>,sf'\?sOh!a=Q-frmLobUtR_OPa\hCmH$JkZ@]>]"l[/,?T^)`rUC++%eThWHPjdZta+DLP63
%dl1J8ApuUA45.]](5!hbo^#FFHOoC*Bbcr+R$WpLf!R[u..cDMDt_KQRr=ROb@_Vm46pgC;,KH)o+Krk5TUiMpu]^\o,.jqjE&^K
%=bLh0?%Oq]^QJ7/7gF]%bQeCL")Lp-cd**iGHYquXra*!k'Qs/E3@\TjY+sN8.ZS<r52:LfZALhP`De;4X`q,R9'bT&7(k(<bq*A
%lce%u%f2s,g->M[`LZ.ke&`T%XF49UI't\:e_`L*[>COtStEIB^hsXR!,VK+Wd)6t^".O1Fo,AP<r2+<cF9\tYPS@'=!qKb1p59n
%g$9C##0VrbmHif@e`*=l/G4D1/e7U)Y)G'rih0Y[AudfN&rbu8]t(h*oPS<:iNW='M12fid+,F/qG2k>U+Ycno#8*;0(2m5MY$ge
%1$=r`RBsQLZ;pdQXf*c-.Qcrd0<;Hnd9tF99=2=9<I4NCS0rfR3B>jieo)ZA>.Mf,@;BMh\DWfOc*t<q(V/-n6eH&Vq8V-iPWn1&
%8ghY^rJfP!>Q)kYmQiU*?5=@OT,ou<4r2lS+H(qIK=O-(2kE7X>ir42I+#.i7QLbsWUci8MSh`EG3Sg9HQP/4*\NtXO`)!ff%r@F
%Yagd!5'uqk[!;T.d4*:Yq.&CTf63!abC5`E[L3o)-];r3ottA.6g!b%dCkph4P^D,*XGY:fZ!q&ahaSkLKM[)#K9s1'4AkO4_+eU
%q3<`\U`&uQSXW=3/7U[f=-!8+>D$X%Q(_J;0=Y+W/ZmT*c9g.fFkYO7V`-],gC;pbb#[iNUB*-_m*4SaITCrBs4+HXO8@m)Eu"I'
%-=nq1OY1^]pB&L$Jff,#F2u?!\;pbA9\@]55R$]7l,m+@p:V9]V0BuIbk$%[*4b@co,$M9\`U!3G!'/KM\,NADQ^RuR"o5PbI%q%
%fl6D4LYq20rn%(EZX:sa4K0kk#@Eph`D![gT/b=AUHoR/%Dh]R\[@LokKc*=3/1@=Surh:luKA@SiO>'XQl9D8-ER@k#O4CSM_3%
%7Xi[c0(ajllL>L#kL0_Aeo^oehL-Z\H9>n_V/uR;\>-FW@H$Mg`HtB](t?+"n0CL-&(81B5<cJ"Ej[9Q9=t84cE,@.p=ISVcPE,!
%_a\WcYEj125JDA=bT@pu()IlM`0iR@eW,rDYBQO8THj66Mn<XI0OpY;aCX;EB02T`l(u4__-W1GO_"Fs]a@rXZTYh?k_n+qKuMW^
%-]BLU='nR8jZP0sGjt"1iKlPfaJqn"B*2_La89F!XIj/'l_>iTdV>#iP4aT!iCF1ZH2A,ZK7N9ak2"MBO1Pe3T563MRnfc#qk3]j
%9OR$,i=jr1,RePX*9P^?f:*B4h)8@4ifg2R'@;lU!0tQ!Q1caf4K%gTm,ON2YG-)tEYVC#il9.>DOo['C!fo:-sm`+TC4hgPpV]C
%q=+K7:sGM:1bO&>WLERbZF0T'f*Ho\H.Ma+\n<tZct2'IS$'0ho&r&Sg3KOg-Q&VHhlBa\ON4Xa(h2#HIQ:YPL80?qoh?^CEeib/
%#D:Vj!#i<+YE]G2rj1-0rQZItq,D=Jm+p"=Q6/P9G%bS%9_.hp>?L;cj?A)8Bb:U:Rk#hQbB$e,B2?5B*8c)T-><ga?^m,6(*@Z;
%?<6N*TbN*14ArahQeJ/CiA=i=B"rdXhT>5O?afS'Mi1$Z:Yk%m:RS4e,K*Pp5ME^c>^@L$<sR[;K0eEr+Pc+310WR-k2heJaI/kC
%M[&AC:0ZEKYe/TK(;Xee[Zo(g?[TTO'Yf#rCM7Ec\2XFOC/A,@2NeNrj1-KPPa`2F/)Do@0-<%mR-j)(Xl=U`]b\@Vjn$V0X@VZ6
%[JkII'R,e-He1_kWbVSIF>osZIdB/_c1A?%^"[;^I0]iFp>!,=XeiN$o?[.qIEQu,TC6t?NE66iF@b/Q%>Z8Of?EoGUIRmOa)`9"
%^7IJ<T!pqd(3^gHBCR!*PPdiPS"OXYL2=Q0H>UP'=*AfFgLhT9(MB-pq((K&V'hF[5qIh!@H-Dm9.W_eQ36T)^obi9onUe1`Q[jI
%A,WX^n`+G[BmsR;8\UF1Dt6[RCF*ap.sQdBQ[=FJd\JLni;9E@bZ/Q#?;9<Iemt*k(g#G]HgC%AZaF8VPG.BgQN0AoYNCc9bTUNH
%Z_d$5`oa:O/Nk;]+P<6.cH=t46$QoS6=8Tq)G<N3c_aNFcX0+-Vs&*n5\O?"moAMg5PS]*Ip9L@(=oGHm,Q?C_TJeC4ZHNFFX^VE
%(M)Qe'i`o\[jV(KMmqOL\D?kbh08%A0,-*-2]AFhE.J.u\-:i=[J7OR^3oVg!7=^Nf[%<DBhT\HWkM_SUK)0"YE$eAi3KOeM@454
%Wp?!!/,B-jQV)?0]Q8^nYJ4@T-pn[b%]o=EiF-B+[,RkT=7uKfs(RmWVLc[pM#:Bp=lm!G::fsUoDJQMh),5GV;Q?ee@GV45'j)s
%3SMXT7e(lfom6(C6:#5f^F,;e"b"Ku>o+UC*kE@2F=<ejmUlB8XYmb&j=(&-o'Se[lan)Cf(\"PLKtY5MX?a\N=Ur.G8H._C15p$
%("A_.l2:PO"!`-VCAVG5FKn`@gCiAA:IT?lrZb\HEs-NQ0ol0q[BoCK[?EVo=m&VLQD"js>BM`N`[c4&a/*I-R>mbs:Tq')IIE-V
%5@&\8OV^!Zm]6T?+ESTi_%A2e0]s9F/JK;o*]1I;3i2:.EaG6tIc\^7>CH6P/_jRTY$KZ&mR-1&9bRa.%%k+tA\#ss&!,+VQCjDU
%jctV%F\;JL^"a8*,t%&`'EbNkG*-ZJ@+tWtGOO@GhendYkM,S)gUggZiqF>MUB#\uYP3TS;%`>f2+N*g02ntW:WNq4-g\S_1%MpE
%SsKU4i9Q-egO+K@?<K\R^u-jVBB!4WpsX7]psr&`[o^_feq8mqs&u5T.CPI%W7*na0Xa7XHH-7^Y,?O5F6LkkVjp-K=5i3$E1lCh
%=tk9Iq:d!@s4%G4S"AtPOgfQo\uOCP=u.-C[Am@6aB'rF<MO^N?YO._]5FGsI"a.0g:"+\UOhmeV+)\H.I]&MCA;Nn1R00k)SX6k
%$ec%_LX)3L2@Y9F#o:6j(E2\J!`u6g43d70QQuSmCPEaL<c(YoLo"/qF0R4/p=$lJL+`S*0k_'2__5#a+fP2$5jGCQBa%j?8E3]Y
%:=uL+0E_i?!'TT.B%UeUX!Dg?_(sK>c?*f&e!=K"*%u&51W9omV.n:i3bcLj@WagCX5rbA5W_mr<N*`Q'HDa>j*7O47]tB'#LgQa
%ATBrnMoJ^`#_4)NN/=TL.P(o`)R'j/.^!AE]#,I-&15t%0asUGJErYaTa*q='q@!PLG?'L/Bo/^H)otUqXL]O@M1^q'%F^)g7SX)
%?jkl+$9mF93\7p=&e'k03Z9ila0q\h[1!LOAu=N(TH+9]XhgYhr8Qfp)df4-;OoY'';]FJ^9Wi4AuPL5E?P>99me<C(B=f9c5OF'
%<>FNq]>-=j2FGA>n--cf"k?@08iR"1:iWkhBW@@MK]6e8TZt??g$3#H$m/qQ"&NF;pc:n$(LN..D(<)fckjpAKLY+^H^]Ys_1sRj
%5-s`aiHtVP>ZP:G0B5M(f@'1HUEGetD:@G[1=Q"64ZZpNFUD&(@$u*j,R-.,B/-ubM6En2_(lr\8]?aq&M6Hu@qIV[Z7Xd=[.lh,
%Anu-bZ'[*]2%.uffaJj$kB\lQRD1FYP(52bJ/C[aJ<ASEN7V+g1g:A]<FP-ZjZ*#B5&.Fn-/gaV_,eoVGVb_>almOUj`$>C3$G@>
%SW>E<(4*5'=9`*hEaV?+eYq9aF>S>X">*hO=<,&@*SXt&\e[iE@'h`lm&MTu,+r=`2*DCW`=[:WJB_LI95>"n7&/n[8MgS):(&T!
%na-s^D[RAt?tMAJ'ifeC:UNkN!mQD>5pHA2!aDp^q4dOK,JKUD-k&dQJY:%7#`FFK"eLBeT*>;c^iHq.UO@_?6XRKZTsJ,4$A51O
%i"Sj#SAOE.Q.cs)CtE[#)$U*H*Ip)K0Kn9+RqC$GJ3EHX@"<i[#j!af9f'].X"iQAYe1=W'%t],n6ns+NB4eFP9ai*>,i73&q%#1
%##\Q0/PrU&n)Ui48hXWV%_b&jjoA_*i%$#S/a.F6E*\*1JSK;M_-s;c'ORZZ)]a=G2N<6<*]6%+YD$nUB95j:i$O$DM.%i*n@.AD
%r:8?JUU<(YQ)[08Ab64=;LF<i:K)N3!Oeb$n0PWX*E"+-&C=Z#T:6kR0kBCq_"8&e^V#K6O)p\]$CDADXJr$>3n7oBY\9!9EsN9\
%>RH2m@F%3OJW13m+TaqSe+'!Ie-78YJ=lEAWcB+G]7lWh_#1+(?0TiVqugB#R_m[mVbKUXK`[p@@aq'lNOd9q&IQ)d3^n<_iHZ(U
%*BXj!$%sS>$sWf-K;N^*[D=Cn`c6Zk(lD1H111UIYUiU+pgjeT"(?gp.>qMD/=[dZ!0g,t1Xcg^'C?,ZiG]#\=l@BV<4Mpj)9Tc\
%h&hGArq4lia&-7B&e#Leo*%VN.XW\<*RY&*1klUZjI1`1!bhfR%BUBYXsjP][`8siA4V*7C64es'B'Lu-g4tA&In:o8H>Zs\LkU.
%22?r#BSYB&YaT&6E+?7&#R23_&s6BAFkbOS;97,d#o<@>8\d_8"CR$\fG22m_Ek#LnJPQ41qrQfA1nUE,UZ?AZt,)ti'\(D%(9mW
%cN=]q=[=S>0+O]g,WC?_T%O\6eK>c]Qf)['O"2Qd0G@f`Xp>>o`j7Y?2%t'S`dmNqj\Z?cT4?o3!AZ>tp_a2]8(5#@ffV-$T!p:E
%pmHkT)Q1YfJYPQa6U/JtWq/>j@@Xb<T+HnCM$7n*/qUY:F6?+';\uc_Nc,Vs@i"\boP[:OTKAVj.tGl*k$uR%i1(A0:#T]G(_#c4
%K,\gjYVCbQ_Qds8#u8j'Lm(J^q(ePq+Sc&"5m]Ae*Yp;[:^l*oH>K0fi*uik&.*jm@ji<m=U9Tjb<R#\<L=J4@iN_0_MlW=(F'ck
%@gWst_mWPqe1UEJjbIe&KUNHjYRqNrT)t%giTgaNi")D_@0RL]$Q7Y@cg0@K@;0gO1XHE8M.)50!t-Da'c<f#r!(jqSYg13E9HYF
%H@_4Z)Ze*KI',BAc.Fej#d>T5H,N$+K:j!a(AJ>G)eamBl<LEb#dLn:N\06:_Fs;E(>>^D\^`DHqCrR#_-euXK*c<C*s;G@3^NlL
%?\hU+&6'LdG;('<0"d93XD07h2dg)_1*R<o/r];&8kff0_O;uZ_gI5PJfgp0#:uNJ#I3K:b3Q:'!mOkMFP&Vbee#I1FYPG-()/>W
%9aB)[+$<4=]I`OTI%*$;`f.iY!r`;@S&$BNn8Ld-;H5$)i#psQc48oJNDbBu`;kl6Ybd&m2)N0aL/$9?&?Y0t]J4X>^iga3*':2j
%R[84(UnIiVC]]6s'U:V/b,etV#jY%gTSbS?!hSF<=A2?n^`o3Z;R7h?fT8usjW\V/3ts&sOR#`c"AB$qL9AMR2"Y11!64.9^!6$e
%iM'l$'Z#$.A1JG0]USJmb)nAQMp)`f!6,":ahIhI/!_ck3i6(m4/*bH!Z0;%oOnTF3/g*A7L4Pk*A!Qd90dV5o-Z+N'XkY86W%6s
%VGI=]VdMK,L[e4.TE@5!*%2Z&GU_bt+@X2cks0@PSKT$sa2'8NLDuFEI]Ee^'V6;lY!<^BG.,Ai;kBeVTHuHL"Y?uN!nb&\ncB1N
%Nu8d`1kb'4.7;J3D=g<%1FRg"-%nNT;%+%8YjC@qJCn^K<C:1]iCO$h"oVFB'cF`,S822)/0TNf2_Q/UJC6;]H"so+=K[7ZUPHh*
%lt`n7[Xs<dG$$Vma!>='F/7+>aqdL`W(0)XfLTJ*_DRM\!c2+b6S&eI+00Tf*Q-j)EMsd%?jKLOp_ING`UTdHYb\[kTJK[nG)!*a
%BO\go<c^rr!^aA02M+-nLGGu>@(JWeU$@6rTS_,,L.VSF"4F;:-<(P(*?E"_:11Yf9j@^p&X?F]QrP0d"H`?:YnMa^TE7gAU-s[l
%*)mo!*.5Z;YYQhMd5IM&-paM7N$AHp,af[SY(Jh`?qRp[LP6iOQ51FUOMG!#PHu8N<5=(70^[RrcOb5RjdX4D#2"UFLlb!h`Sl\C
%^("KOVkS:/W)R37OB+pSGZg[odK`@Z5]6k`&(Ljt&jQo7@>-V>;J-5E-OZfQ3XC2MliC!eJT?hd+plmS=@'/rE'C?o!97bt$R1+u
%+T>9C%T>cs:b_?Y2#pHn6u5:=:dJP(OKT.S**U(2_a9AOiuA-r%1>W*0ud%AkRIg\nBO-K;/&@Y)r&.VF:m2^I\[PuSeR-TK*d(%
%)Ng)e9qD]R(UI,e.Vd257&+/u^oUYZP*q>DVdrN/,ZIsYcj]!)'[_s[dt5PIkjk70ZpH)UqAL+nC]pH9`2]1YppnNd_5=>BEHEG`
%<l#/#&JPq4:q11@/fNMn_>4m;,:PfYJV0)O<]OJ30%_q<^`K1c5WthmTl^:,7$U"^";=0N*4)ZL`Z2K=#U6VU6if-^aoNEmYR$u4
%`nNl]K417Hb,JC^_%:JYaDdU;'8mR#:3id(5\d<$1Ip^`_D\9Q5j^\W+\j;Z1JX&n+Z,p%%B/2WU.b]:74=rCCPGM8Z2b(p/?G$Q
%dOsJ6i7KLl":F$=k[so_oS#+a,78r\&R@*YcjkmJTaq8>7kj?j7uLIt."`M[$t-Vt.?<F3'+$$j+>&C_`609X;1c(p`m6W_d53-T
%7g`TM692I[)p$3r_Z7W+i,,bB69n,d;Ek<b"?T\=BuB5i)uuG-)8Hh4ktI*QM(PSi"XOVR8I^HP,C9t_#>+\>5`qd^cY!8<-aLb#
%3<6oW'paP!_\tP*AW'(`D\DpULb6ET*KH#M&.Gih6#TL5@dV)B&SPumEir;M-4`[/L'`cZW/;IX)*e]L^*Z18J_L3U-8<7+1_O%D
%hP_VU/[B9$SZ`5N%MTN.:"02%!\uTaeUaNlKuK8i,]h1_VuagRG-G_I5c-GKEn^o[S;sB,^dCJ,,<f5*M0-G/&V^a]Mp7OI#)&R!
%=@k2;g3*J0.Z+tglVG[mQkVQn70XR*#2.93TX=jK1%h"#A8hUfi2>=D_IF&k1q^ao'^T4.64+-810nui1C0*C!-M9IL6>?qYQ5)i
%&9TrD:MEd1"_q3@l>X'<96^VIC`F-1j?)6*,7p*g"eO(8imk8`d#=@/<!=fVPi5"L"-C;T7>l@Zc'WMFUBGE:AJ4D;=^o,Q^]SIQ
%"uqBp$kI5g7MhUCD.+I%I<gFbm7'I&RPSMabnOb##%I1_8U=:0.c[K7k+F\ocn?l6P)pu['_h->^5WB]8rF+BmlEeT<0Rq3>6HX!
%Mc(/?=dV/p0\t<N4q3%mK"&(BgHbbRBYY!=9O[/%PZ02$d%Km=U'X"W6"ujpJC3QjnQ@PaL8fhR&5&:ZfL$V=$p02\L\2o3$KW1p
%mJr8n!(#;-"#q%KiS2]Z;4o7'aq5"sgj4.*;Ss8^&f57#ODHZ)5Uf8fR8,?$CkA^e"M64I?3!!*40g"UQjte;!GV*3#ockm.X4dD
%0WmJQ&#q<ogBdKiGe%[$m)KiN\1aQF,]$so;FO-mHIYtG>=a:5f]9[u;p"<A'k]k@3M6kOitH7YK;_<@K($B^]4Hlu-AN]RcHW-t
%9d(9(BJVu4M;a2DD$TG:aT7@#R_Y0/\`!`@6rfIHoc.\c$u/DiY$c";0ib\:#FG^5qkugf%"UU]<E2u77KCp^Xs-lDRA(_g!\6V,
%9E6b4B1M(F'LG.0&F)"^a9Ugkc.OIBNfK&*m<i)"g1"W)'&AAnM^-`*!)i"]pLtA-Fr%;f_jqf]`8X?s64`#O=:jFT(>nYf<=SW>
%"CXlKqHSW4eN$5U&MirKJa-5`>XIZ+=g5K;fL^.g!4>g8+Zb[!M#A%.%W'61)AOSL]S6HMZ#kQ6<AXheN)0i?2@25"hQH7%7`OX%
%#E<h5$K.R<Nek,G%[h]T\/hE=o-srNQYR1gTVqq4Rs\9UHZll"!$g+rLoDC.S:^0)AVh_9B(@jI,&S%ufYuc@:r/02.o-TW.hlb!
%>+(ZtQibp5@.-O(:TLN"d0_f?7$WED0o5!^Ic%R8.lSK]G9\#TJe4%0#tmf?+g].s7<I%f-JC>JJ@((,S_9^f9nVn/W",`AcnZ&m
%c5:HQlWTC:FcCREE/?DhGmZ0dUN?BaU&r1>!3OV/Jglu2>!]%<_#bM5L;oL5":m7_FM!EIF5)C"WoKBNYB))skT]a\()99"]+!F#
%\290]57kuRLP&&a+C'MQm"Q0).+fou>.B3bfS6mU;lTOXVdX&nO>Q*D5C`q'\/Ab6G$F"8%Mq#\.qmEi\cmaF)U&2i)M,4;b1E0!
%IK1Rb_]+he9OSR2`B?2fIq7t)iN.RrM.5T'#'^7k'3ABs"04=#75-^4aTD`.$Z8RX/;NSDWWm6T@`T]2.^U1J0X?]8H$np!/HkWC
%J4BXD)FBEE`tK"XEDMJV6B*>>JP^fP>:iZ+OE:XI`pI`9#96ulPB]/kLLAdMZm!#]!k3Fh-\-ZW*>"*I$&aEWJqR+q&@Z'<N.?^'
%3HD^W!9uHi(mcNo?s7_iSh@8P1T>2rd-l4^@CWjDg]+.*pMGW5<J/PC"5.^$h4W29nq,U*A!oo4U>V%q5kVqCbTQC!43^kEj"..r
%GWDXgTsJ3oiq4:UMErHq:/J8.<M2U_`#'JHD\+&Y.<5mSkWq`>4]E)(9n#/?8PkLU[_dQn)W>R#(dicG,E=7)R9+n<jeNZY;K(G(
%We!$,O=)9Lik9(Vr*#kd&.SBKki+Y_Esn<B_`DuQnlO*C)gI^.*C)&))e_#3OgE>3FjPS&m?j93TNu'Kk1R>gpVMSo$kL^@"?k)s
%Ll?>SQ@f15d^b]@Tn<8s`XE0/1^N8!NUQh%q^\mJa1=Rh,$&/&?Q3Z;0^qoXAVcF@SWRSS>1_`fi`nX`+7[?-*Z9+[oi8^ZDi(1p
%[rN4pV$^)0_d,\1s6Y6XXt<.egg!,E_jLf"KL!6n6g6oA$kSM/fEQY41p5K:!FEl]8Mp;4>nJS2pHJK(TdY&)-B?0d3jl"DZSL,W
%+r9Km$A>R=lT73[6k.471]86>b,X'BMd5qX#7e-)lX`("NUX,#HcCh`)-:X/@8)N_gbi9%k8M+biO-i8JN"u5G)Dtq:>Y`F87Ek`
%Ol]h+QH-Fifo$lPAd=\Sfu,LJ9-b[ah0't$b/[VKM1^"%Q\Y9lc2AQ6e767ro_',V+ibG&9eC?o7QqFiCpH2=-6rg-JDh>EA:YV=
%>u=(V2ckPbSFRj^L*9g/N?]2$m'XH1hU.F)='"hT/Th",p4+RLj)N5kj5uj;,.JCgMksARbQ>rWq5CK9cdMgN!oOZnpU(5K^_so7
%RZ#N!iRCoLT!%QW;NABs5b30A=MWF;>2\COT(H)pSAOa,?Ddm0GocM.O1+g#$3I?*_g<Un%l^tm<aLJ<c+3qm1W).AQ3Y_q>sm@t
%[#7ij=fd=m0>XuUa25!9PgMAM^n!+(9eFE+>_/W'[1PfgO?1i#?;TH&ZkbiA<OAu\D@eLPk@1M&?lBq>gXcIpCHfbJ"3R^*2ZW0C
%>CJ=c]^._T&qMM9IUdX==q0Ya:_,eX'u9$#^ESu8+rGse^PMMu`'6@JSZMm"L*'LmX6Tlrf*^=0IK<"_:_T6nfrfRs#@aBOKb&P=
%H@j)!:?K`X/$Z3:!l=RtBEER:Y&=a=:/_mF0G?<T^Uuqh!%>i-]/UoaF@[H<=1giB55?_/L=pK,-Za!'R'iF86"M2O:6SFHXI!ee
%"\$oQ:-CeXKoca8*e\3uZ+qL,M6+1(\rhUU`rVH(]`D$hMZs$<,K6;8MPC+CfX2KEbfN;%i-:]7Uc<93Vo;Sb?&X4t_d(+[9^e4]
%:H/)@R+a9?jBj,cF>86Fiss[%giK&U!+R#EnA!9il6%_<ndgKL3?2/nLZ6[q*pG^kl8&tZShq!*h[9HeG6BN5\PsBu8((!1#),fC
%<J:M[(_Z,N_\0q!HUis$K\r&!bg^e*5]rZ^1:2L]_VHhA,8=qV"QKfE[*pmTc)9"R6J7CYO\SP>-mO`:Et'"%/??rPoF5no_d]`B
%^XiU/,\p]F5hB.m_C%GcHoW^#H!nPSS_a*4?U&d6ci8I]["'^n=Qkm2+LqK[TljC<mn:'`lQL\2&HC%ghj0mj"m/PPq>r:YEpB>k
%@]BLkhA5u[6eVkG$js)f[m/uMPjT""B^'c2lN#t*KT'H#&YRlLbLYq3,\FP&],l4b+m0*%+[$Y>\_N^3.%e*c?9FCqQY/&R0)d=[
%H0MS`!peR0n5_=fZu?BZ?6C:OC\%rVEX5PRjCFd5[XV*MjcZ_*F!=/%,If83Cp.sqm_Af&<BV;$YuNssOp5'm]ML)g"rE:gN&[g[
%Gdm"S^aTkn1H5Re,"B5&J434D#/5ZA=s.+[G>NfG))>!a3q,%-%Lq^E2,845.C)Qj.H!Q1n^/3J'0WK/n6-Jp_dVY<AcEZn'hgh+
%K$K/.@HP:1*"m)uY7?E`OhgBcU+E^pOJ@gtGIp:_6s7I?=oGAP]n9p[g5lEE`[h\Ln)%g9E!IWG76)s):4NUIH(9RT1XB?SV5Z]:
%+_L:+iR5h0[;-9`#<RoDR,[nu5/UGLIYhI%b#;_&0V")_`]OiU7Dosd3FqN@GFI*'NcXmI?[Yn^H7D&0X!1l#SKH9H@7b+iA^#j*
%4cqM%BoJ0d4scd\WfQktE#)u@4O3;5#=U,K:S$'"E01`d["*eIFup=WY<[i,-q*V7_@F\+Gp\4Qf?!4F\J_elQaR*S"@^^WWUVk<
%f&Q3*2ioc)+G>DQRe@1MPOqu*aSrH\9cSWYcqi1^+LF[?.!jOq8]q*#,7;UVh)\IDW0hAni+U4R7"Q]W"NW\/*/KDlYNgd5+Hn5*
%kqdaCA9%tXUiCj$<:WQa@$^D;?&]DfS&P$]2CsX8f2cl2eUZr^VTnj]8WS,6<l"93?Y=BdYVL;JF&0M*QYePid])ET.<0Y>:Y)%K
%JBM$u9G+=ZYrVig)9=/NASKrd_2IO3rbl_h6V`atTPsIIKY"V:$%t%Ig%>_W`_duY72be]!b!?o#N.;JQVC]S`X%F$,IEK2g[.8_
%%lrI!HMlP&%mD`l"i.D'^i20nGq.^eL9ICVnlE7$?bZD)8(k%F46F6'dfWBZbC*fJ0e1t>NFJlS9aoC-qE<W>8RLj?Apq16eiM[f
%q%XgUD<;CeiK;8t-r0FT=drC`!c[G8^p?W9@9aqJS[qNi^@U%](B`]gU1T"210ODR<]$h\3<&cEjksmS''2EqiPcbpRI>+N97aqF
%/DSPfdY'Cf?l0]i$/afFY--!k$5O2P7sc[dJSXdSKXa!mJUD<!BuW?6c+WilN25F6($Q;\DK)/OIXqOG^h'g:_@(3/iNXkfg?6@D
%CC&T2`K\lB#22(ac4ND.1M8%to*_KnnbUmT.9ZL&$D/m<;8\t":AOFBFc[ae?X4akOi3g+IUjgrF)E3pC2Il*>T/KsL+8.]HnBl.
%HNmH`"[A+u=JTN3KnDb.V$cud-b\>f+362<2PS9<\*`@i53DQZLE$T<GQbtRa\^b5m(Cl#AIoYb?El3WF0A*r5<C0I+QIutHf6al
%dN1SQ7^ccA'<`Xp1PT],&L[;kZ^ut:hf0(cIR\a[aETc]\!+hkqsNPke%;?1lX>^gG@5&b5hIuN5?Z"WRBX4CG.D>rAjTL4"H^jU
%S`_@HJOV4P$nbp\ACacr2JI8V"sfm?S;b3@7)B"Uo.Br!P)SVhFqp_agq'UX=P,L.m5Y?/%\&U-%`jB^,lKJ(pS.nf_:#lD`>E:l
%bm21q*r@%89?a/>74AEj9]HB>,W4+U!C,#%U-+b<WO4X[>,,[V)\P9/m:8PX?*$KYX;_.9W4^.3qsa%f4O%SEA>/MjUFBW+dRk:q
%-4qKdq^,3W!8e*='Ak[d?!dipA!kDi6C9<K:>l7'0iT]5%d3a^A_s_cE[O*RikX9#bd6I*PnU!f;fsYMVP3?FSigJ8TtoVJ+DQcq
%i$d)2N*phI*>#TJB@nF772+P>50o>RS$%^p';;99<`.pW^fTG3c/E;k_ZmHW#]0]$DKcV#fnWL[&9rKBjMW5rVF68_%'HO0)5iIk
%Afku'*0/KkP]fT>>-_GKgL>+dcGV)7!Us?0q3E&ZlGt@RdP^`$MFBd,\OX"a.Kt>(<;cYW08H(=^(.pEN`nW*H[4&-LZKPfi*X8W
%VPPp`ct2)8hXoqdJ?2bs%8_Mn4#Ee=!-_[JK`GN5'qSk]1I$6%Hfq>V$(qQB8)Y-U!+,J9I]*TY(B&m%dRs7d"capO%K*fh2!,oc
%[%_(ib'Jqk!/""BqCPTX(%F%keH*0QjS!U!e01_'P&Q01=WW]S"($7j080F92`$VlS2FVIcTnApHr>J_&W23^7<ns3p\>R`j7)l#
%[Gi$ROo@:N:WH]mOYdb_ki/slapU:b;i9RSGBG#ids!C)(,]gsNp&Okr4F<u&q0S&KQ(/5KrTc6(-o:P*JNCUV\?itP7WcT97%Ds
%$iNB5fm3juRp"_SWAgH:-TDf!A+4KB!'6\W)<";NZj)B-%0nYb8UrK!ep-,FH%9=RJ^sL^@h+=$W&V+R5;C4?l@lPMQ\US+MnO+l
%<IBW+Q"JHm_coQskHOY@F@I`$Z^k7h-NGY;KL.3#mHjD7Ge>FfarJSY/7`kbpbSUgB!0>mcZ"=)qg`7G3+`JaWMjMf+S5<qJ@.B3
%(iK?d'Q+(U0h7J6g+q,hoHFXi[5V_]=%fZd7jsK^-7;:X[#'a#Tcsdb'dKI3iub'`6]&XVYKkBf`$:\/W2UK2C>6MRFEZVrhUT89
%Y?C&bQ!&#02nR(iE>^ER6cR^]EKX1K3nXBVhA-*%\JZQA@TtCrhSAH`j'O^n(*N;tHf>*5j6:/3HG&C8["2tUQuZ#tTI8Sa\d;ji
%O.DAqFKe'f/J]!+!r!h&2$=.@4qG[b)-9U`O1i$Ko)LQUUNK1^/eEA+#mpqI7O+I\*s62HSA<49Zsc`]$M;6:`)$'EGIe[.:EltL
%Dgcu2$HUiV<.F*XSRA<K9ncbMc8N,NC0>,lCj]5YVh1&7OmdJ=YMCh3>1)o/!MiS,bQ]l_$T"Fg($Et>kS;b[Cn1ndONAMG`gS+<
%_&Ok,B!G:f_@04n3"\8S3V])cEW?bGEcm14ZEag8Hn'4?iY>jLe7M`G(Pg.!Xmp<b:/s9Krj*+"BuQIUJK5edlSKn`nDdJqk&/![
%E(gWJR(TO58OhA6h5&f]"?"G9_PD1c)01M<@KGJ9\$hk8mUej.)FH7r8e00d#eC>DI6&Em3?A4b*.ned8/_pLTKl5E&4+Dc'+AA3
%nOPm42V*UK'?Z-_ju1kQr-omjX3_GL+^`:f#tW3&O_,ftCX\XDSdH)n#>oFB!mKY?U*$qPZ3sd.+\oEi#HjUFd%_[qiKMV!%X0VW
%"),+Xr5$/)l\)6:h1BXUZ_;BXE<tg:Ke_aRc?N]'Lt<6&ljOH@Z18q/QLXg&A"72O!9H9J2#sQlUSKk))>pWC#*?VNNegX!jTJR2
%ZG2,H^n?Y%%`Mlh5RV'`J@nlp3Ua1>R#1Mk'[Kb/<Ujia:DD,#B,5M_`l]XtG("@]$j2JX)3<"YCO<[aM3tVrEOc&@>s\[93DrYA
%G^o\DJ+`L#^O5oss7jpTHYU_SH+<UOfUmi>^SQGuL%F]2FtUF&E!/EpG"T>)WW`tAlZ@57M(&`+@'CUVb@"dCciDV3Sf[GQKhs1q
%`)e\a!#=r-a=7Y]NgYE!m0WF`TX[?T6MZ(h]<[jo2h\_SiJ%7=,_C42%;I2gXL!k**[*1h-;cU(IL4qdE&#WIKm03E0Z=?-oe&_W
%Uod6PKjBojKnko(0<PWi7O1c$LmQ=,TcVq[#i$t7^i8utI<>gu$1UY#PYM9!nC`8DRa&`;M53*8fmoBAg;-[;$*>g(1%>8YgNl`5
%!AiC4QO>dhN*3?0*oPKo4YYDg!&67J3T3B@Vk4!*D_K<$O8MQ*&QjQI\cPj1eJ.d9VC/4%C;D&P8f5Z,j>I)5kb0!XS]gh`dl<Tk
%G'u*-#s0L>WL#3h3E9'+jJ;KgS.9)c1oIE+iq&;MhE$`hLo(ajYd7meln`"F9/onA7XhNT?(?:=Tb(4E(h_3YBe7TPL6*>cN`[%e
%d@8Is%c&P)?E6SU_[kl:q+TaA?#S*jI#d5fE"m8p5b=m8c;6\5kg#d%g&igBBSp%l`BYX6RNP-dH?<d?mkK<ZMN)-(b9rL$FH<T`
%Tg.G;;(L;HY5KCI6:<<Y=g;ZL`)WnF`U;<^]p7=ho-Q;gq['GM&oH,0a:tbmR-c,UZ-*'1A9lA=]HqHE7e-]T-m6,=Z-7MXjnU+&
%H*+`Y80)\\p+MP+o0rOK(C9a*=`U>ia8eK^#:jnahMGIa:Nd&9klU86?pqsDJ-(ltp#k9$0'Hea#6bPQ/tp)n^ii37YmZfC@f/f"
%[cp'[>pnXpJgujr]6b,_E$*L,?5`-2K/c!p6Q"oq\u!#oP^*_4*>%2G:k\sQ9Cq?!G;iL74&4\2r'(nE9B\t+>3<di.nl+`gt2du
%U7?1Q\jQAoi#k?GT_m3L,0(96V7RN3-?GFG2Ns38_q<6[\lD7UT[chZ)P4S!W)%IA%@fr2T&8qi3u_iU@(uR2E\2;;g_9dh^!:Ne
%o:(iM+6P5Q'W;*JoO=84S6Ol]#6IKj`0;<"8R'PV-=(=*hfm"@6^g3EBQ#<.^\uDir7i5HmnX.NI:3'2;1rlO`.W+nduG$k65Jg?
%U<FuX'FsC(7]::H)PP)P\N`FpkC3j0>+02p'CQp6'"^73!gd4;60g!eN!;NN1%TAIb/qMj/H>eJVGll-$eSa,b3t]ZWh$IQJ.Xd=
%H=V3pK+L\s5,dC&E9cQm$!r&gNLGA>=2^G47K5&6q5^%Y1f[.\%<"r'oi>[=3$[&eVg=&+`H.dABFI<&%+qK=A.I*V\M[tt,m!9S
%c[lDl4Pm-=5s0JU0_/pM+LMJZml@'0Nq5,dlQQ.dJj5dk0eO`r-ZHU"T[qH.pAB.DD][]?]:dt?Kq\rNcanK'pr;fXFBZOA>:WU;
%?%UE63<1VO28.I]BbnIu=R>PGPmm$q`e#rt;jm,J6])$$6Y1$#Aid^)R7.hm\CEqTiEH1C7C>!ke2*niMLD63P?(g0%Q2!R%5qVl
%G#6>S:,fHnQf6Lci?(2CCFeiSinQs:E2:%&A=-TOJHq^4dUMunY"_&i4)4+k,sh+E@X8=EH&,_'IYgH-CGOSu#=+_(E!]ZH1*?<*
%jeuK4P3Y%_^.4?pl4hu(r)g)1P=gb:=>HS3EF(2VK>]\o\bo8a%2!W[nND_j?YcfU94-#D\O6-7LD5tAaM3UiT<("Dm?o74no:Qn
%^-9pe?b5r&JpbKZ^6]t/LubT>\\o-<99;f&q7QoV/=DP+jRFD+.$05Ir(_fjUq#^q"`g/^:C?.g?)>^P#XT;>81_1o6#N2\ZT;`e
%9QX\H9?cinJGa)!^Cq`^.9d/Y8V"GndEcG+o'OPI00nBj`r&S^4<JFuB*%R?);Y#gj8h,b&KmFMd<c&f=Y)c8U-QFE(B1*p/u@iW
%$KP-0I?br$k9Z]FaJD/o:4g,iX&Qi)O<;#R8WZl"7Ot01W%Sk+O!Hq9aM/)H.bS.4""dPkg!KI#jKj>4+=Dk*-Kd-[6nQ'LAYUWi
%(YXBpPrLQR$W>m=.%F7.Fb<4aj6rse(:MbM=1m3f^]'X]I3Q'sQY[X6JR+u-_iLMnfAcF!5U;ci?3<lnLei4=Auk4',Ad!4c-7,d
%HASEoq4*0Vr,m\,o<!J+cR/Z#MZND+cSk&:PpN'iQnpaL/R6,sP]4G(?QKPIEel\+83&XJ+f'a#r@PnT;Wu$R%*ik&IS'-fN)8a/
%SfJPOT'QQB=E^tA>Ddga[Ca[KKi48D0R-mI?cLcSK?&4%E`49e9%gd7r`YM')mUriW.^aab/&XfUS$\M#>5\-KPar`)3-\Ee!p>^
%O`:ih[)9LjQ570B/7)!u`R69<:0CL6PBFhkifl+e_^r[Y!fDa]Zs'`C<V_@^i]pn?e#:<J9MJ-@27/&^/[;A<c;k6a/OtiXJQJ<:
%GnAIGg%J#)';ittHNk_6Aa+d/i>_-I^]S%S/#'ooB!r;GP3n)%Xi<HX/-CZQ1PMhtpcMAss/*"nGTH&qYH%A+Ci(%G10-X(*YK>W
%`g1Ca_^CTs4]H&A=[DP*,SLR0@e+Ds)l.OM:sp:+8/oTV):UIX9M'RH)&UQH6B8=+H:TI'LFs6j3Q95W7\"0g1!F%2[@AUh)295_
%Y!`8tU/gOUV%nSH`QojZ?r'GJj_DY&J5l1B>jma8ME."k5H#[>r*C0`/.S:m!&%h&cg-OqL,^s3X=PS7#\anY))NP<OZk<N_sgVm
%Cn0)]cPO(XMf8];PE$_=E,q+thBGgUl"T9s+bE`u\5QkjS,>IMcRmppaA=F)!XS.nicQO",YJNL&fW,^%L9h@I/D4KlOG@u+s0!W
%E51TR*g.iT>W'KgM+#%1p/tUg@>o.IA$BV?5n#Bb[eO0soOUA3Urq=?_<`8AnRp$AW!fHXatI%1s71(f(Z>5poGc!PqAYt524kb;
%o(aPdPoQXR24gR^9=^(t*@a]uJcYV2],GDr8eMW"[TQ6iduMN;0epKa.ZjIp4#@>L\f`IYZ%Z)qP@Y&n+4Y*/i%[9)OIo-;BYdd<
%?0raG-J)t*G-1rdCJEC'O2"1;+^=<<AW'\ro/q6hN#=5B'>/QIm17kG=CVFm2/2`W(d574K0?iSG\2jD!msgh[j)Y1m+go7Z6cX"
%Z2Q^?+#1*Ob'q4kVE;`6E=o$9l5/!BD=7i%\e.>H56)ER#(slh(sj?lEcJU4SPu:6^d>=n%5o>0PF$%M4hL[:m.4(IWB6bPa9ZAb
%0VH3:NctG[q?g?ifj,2%EkW>$Y,mK"Lif@R;7Y(_K$&51DU<nZJffON1kpG`j-osj,4u\lZML?t8jk/Yo+\2\S\P(.TZY2r#<?XC
%dipeml.<(">cs4IeQ$X0K2#i"f$6h_-pBu?![R]ZD^_R')m=939$MVieKK0iPk<)7k6M%naY^ugcE0#U4r^G3V*SL;_WFms'AV%Y
%gqkK=;.98u&pY%Ff\UMtfMDN>d62&ojM1U`rC)&R"WC!0-J/;)5_3j^n)_PB6j'4F<h&tc>eV7jSA6))@R2@ag(M]0R&P-;+[nQB
%2_ENO\YqQs64a4,mb@0o:`Q`,BK<lq5rXYq\K,$MK>1.">`cS+Jlio*>"M>WQ(BT4bXafD<#tbEYU!$b"]AUeMs`:K0T)E,0FGl1
%Vs_!%h"E?Fi!]4*Yj_kl#\f/'NuO%.C1h9PGKkP?e?O`lR,,"]>R*Fn!R'5E7R8ctHeI^F10/2o^l?q-piQ.qTBd.M:?h164%V/H
%R\S5t0Imjbo$B'^EP"D0PkF3mEY,otR:q*filK*uOJG!@e^:]2`VZYPYl`?Nj1)$'8AD#-R=[Ef2M(u\7CQ#W"chB,/8NSs0lPgs
%VICcoX7M2Ko-5>a1V%it-!CQoPZYG^':Ic`X]Sf9jGTrUWKRn`)Y<N]LhOKt-!FssLRt>8b[1jSj]&"#<^L2():Mfo_%Ge7q\_Yr
%*Ua4*l^p8Dbksb;,>fXQr]IuZ=S[h3_-IIKj#l_P-Gi3_cNO6dlV*,Qc['Pb[HM'fa[;`>V1rsilaJ0G1J+Skeuag;8R^.0!N3@1
%WY%7)[CUoI%ABVP_rs7PD7'F^R804uIV)OZ#%\tiT?L>3JqF*?bjeP+,&4$I!Nf@2<DEo$PUI#,Cd<lu.(=@X._s#uqrLkQ0]pFG
%<H*hV]W4s:FHoa3kQ2U.SL<`&4@@!/.c"4qW8Xte?)]4.h!Y&/eMT??Q(7X%g-]Y"Y]R6=:3tFN]rB[TmJ)730rmBb$<=Orm;5=B
%$RF*\c(Nf\1]IIKeEnM73g7o%>M7?6UXKMp2u;c,PX./(U4I#=4tXc;p+\Z+MqD%5Fg$<Lc-[LgpIW:=??0'C,M@>u\i6tjj]\DQ
%N/*b#9mnN=G&AYic]o;offGbcHS@4Z>;JqBXJT6TSottPS$,;kYdDA#"ee6`M/tk@GM$BPVB!S8k<#3&1ZR!p_X'+RPR]C4:6pR%
%>_N.;ld&-KRDp*rM2h^^4PMpTN2O]U7b0HM60[XsNd>c:_l*dX91uX].TA[kq\5I]d@`*+&X!<^J,EiEJ%QB8i/OWM$$LKRS*a+5
%[GM]+0B;/PDUiPjgA*+&$f$%eBgU7n,_is1%f`<,*W*&n+tb=oB_?)\r?^mD!]C]F1!>k(fBWMD\rEF#,?Hg^=O![Sp@)83j30tk
%aXpNbHn<]0`75sY\!U)3rHYR')kWGI41gBZ]PYgA3*fEV&:DbjNS3!"Qqr5#<VYF\:e"d[NGpc,bnI<S@gGaj?4;,t.8YR=E,9b"
%Hh`727F#[2s&og@RUrjYh%-LfMO:4W?q1@?]0#eOq<D>1m6t[fH-H4I_cX9S)b'>gEp*$"g2uOp6mJ37n&Bfgfqeq*_g_MoU&:j1
%lI!u:J<.FXg6&RT4go&?%n"0\_$AUeG!l@GV"eW@J<Qn@Y7-`0>AL4E_G_BX,bpU;4*pg<cDCGunLIu.O7&.cJZ?(#IqjfL!1`/p
%C)2!3<3_]#:odhsc6;0mZs-tIrRhJ(LSDh;Qld=c1A/2uo;_bk0&D3H(`iA=@\Ub]f:='T?f.t(^2pbEXP-KjFR#e0'9]I;7f.hR
%&B)79c=?3.cSk7rRP04eR;^:e%EhfTR[EuA3cLJEE\q:*+>p5K]dP`3FK&90J,=Po5N$b*#O:Wgr@u/brAQQHHj*IaZj?bU'uL$O
%U/!9.@ZMlu4LfUk6G2s)^+=K;W'EOckX<Khb5^iV?d/8]&n4i"9XhD.2c1'R>apKY5?P/Tj5pm=h3GtgIPlo7'c/`<i5OdYKNVDl
%Ish&P\(1h>pf-i;&q^=s.qe^N+62m-P:Brn2SI%1&MfAP0E%tiotJP``rZ&,[%@*bYX%[HXl&1[=q_@LU<+5\XWQ+;YA@[JmQ.W*
%G;aZA7JARe$.b7X28i[$#m6"!danpFIq<gI*\6@Z&hpD4Fc&h\rnK7F.9_4tG''7CqPQd.JSpT#L@b':YKbL_]=$;-\.c7aF^^L^
%N4eVPZP?+8:S>hHs.A+9AE77W89NQo"@"CKhZ8&6s50Q#DkOs3BoYBoMEep!hgguA00m]2k4RKHhB)C3a\:s\LFY;-(JIH3O2WrD
%DYgH*a2c1AGPsfklQpT+GiZ;%ali%b7S7hmCS=]i,m/p0C54,dFS43G:;BL#oLu=?hD\i.Da`*6F;V])\G=,s/*shcRqXV\#uI4u
%blB._3D`@n9!/OM?$(G*N(iE'IFe#;o7QgP[0CiQ^+eXkF\8`0U)U'Wfc;*1)E?32DQTCUT9`EG<PDfdR]/at;&pU4:JL0&Pt!Oa
%d"=slAV5*EYQeVK]`l45"1(H[-4r?P?!0Q8hcbkce,(QmK/V5c>"',s.m/5D\(Ks656Y6JTX'&n\bI;WDkZ%^\F?CS/2NDGN@)gd
%TklES7jB[u3l*(J`,.a&KTdkMNK]O3>MMu2Sd*8d!'U!:fL;>W9D!dJ6"]:?*_&j>7&JM#1$h6<Q^$8,X@:l-e5]!a5`j@eJjk-_
%#lao0'pHK#fN`NUX^G0RK.VTsYl<*cnqPs^dcA4/>pC&A];rd)U8E;@F@0p$fITu9!!JQY8JG.56U_9dnhW&;Mb>0_Nk3bgd[Si@
%E,sI9[F=,V&0H+Uq,#e3D$p(bU/4"6(;Qq=pe@go+Y@-#PT4)DDSuk(!qdN6l55T/)Pjj`Zbt$phKbJjjVoRYhZ8Lh2gardBRQ].
%IZNOV6bCC#BoR:s;oYOmo>c$89A@s;]>mfeg-+k"\iobVDNC%dO4S91qiboY]YdCO7qbW.gZ(lV8-7d<]>prF*R1_2H721/D"lT%
%D7dj)`gcGN4^S#IqF-FHZNA([:V&^[%"$muZ1;"EC%f'#AZB(*4]5hU[FsT9d+(dua5N=f0AR[PAUWt>3:FFA/iT;JfBmQ':>0Km
%a6:_>dd9o&&jLJblu*u84dlWMh!@m6OEi`P:^]63o$6"pZhgg<rNj]%mG=f6YW;r3Xdmro)%iEkLZW7P5O)"[:(%Pf\%DI>lP[<;
%?]b3"lJrZP:W(g[>L>=,D#iTU4bZs7ClHiV[F5A+Z6p;,/??Jja!Q10<.3R#(BPuT;kkS@'2\&aPbTO?+9qNFFZuP3H9LYJHgMTJ
%JL]$p8nTMQ_YKAA.O^05"97XKKdH"$o*."_HNP"(i+l/MB(,)W[oR(-h)dCZ@Q/Rdd&B@EhBO3$gZbWj)3*WShkt\S>[s9pTt>g2
%KYZO\:O#h\')4]MW:t>d+QcZ#ERakXhB#`AaKVr2pc2q5qd261a*]6ghGe3h9e/EP-&_imOO\f)+j+5G15^GrqDdFNne$E>%H.Yc
%^Q9XP8+m\3+m5f7+aB4"$d)p!DZ5WcWkL;>T?k$W[Ud`^;tok+"#*Q8-lkJPUaUoN#JbBm:r=%XJeTDt+bL]%^Sr0O=e-=Y,:ZM;
%!!6H;nl1%dk=^#Y32*nM6&]Z\1h(luK2Dr4Ai.:a:OUfMH?`Y/R0_ro0&rBka?X?ka/IXp(7EfY3N?$^1q%\PMuN1CnfgB";[f1T
%4RQq@Q\r+::!OOD=f=dgU]PD9JT\fh(JXt9fCSX29rSI523uUY-'[3"$59h[jJ^S9h``s'hsJZ_m%",-`<5VX`4cs]_FkR>BZ0bq
%`.$k'-MBOW1pIkpkZn^GkK$tUf[%/NpA?mVHJ$R@(A@^o[>"Qbs8(+R?2pmR4mRJ;qU\f7]jLWfYP^ulH><>loWO>D9eZJ2eaQ30
%la+(g!._cVYE.fG+&A`:!o#WA].hR#qLP_X!@fin;5EPAJ<0mY-nEDF9j%"c3SJr_YroVd[;F4eR-\,8.<"6:c:GneYt3cP]=P]^
%OF(i:?Lghfo]Cm\6rr\r&onfF<#Zj$&+cGY$tN[*3a038Di:EG'D4VENu#n&l+oCh9jYK$Uf!/7cN'YfJWV#jK>CR5-a?/T"f1@8
%L<<qK'/Y*G__4k+Fib$WpF[007O2u013uY'.rg-/dG(sTG@O.$!'K`iK5VY@:Wpai.P)d0d"8-C1U'D:o>[`<*Y@$FMR.W5S>B5m
%WT<N,IgSKI?/4Ec^`TNY1t\pVdt>mI(%NMs$aQLbIM%J/Hhibqh;op.3dR?Uk4/rEk0"7M?mfR-G0R$#@KfqpXbiq]%1)'Y`H"7^
%;eu'FIMgT+K"L56I>%MM%QWX9?qaacC+aXJo0cJSH+]b:4gXl>-([UHLPr8p23-l:d@9Ng3r.D9j\s'LaiW@)lZn7gZb).C'n:H_
%-'/R&4+Q59a:WrKEh?r.G<cK1!+\e5'.;D/2Vk$@O!])=;"(=)PLjm#DBZHm6B\C_Ou-B2;>E1B+aT[74-E8!&4Q+,.0+!DN3,dk
%%J=<f6N(^BC_kh'd<l%B(#Ja5ThJPCEs4c8EmXo?*=f<lMi(Sl]oMl:783*,/'C_X%5,9-LW.tl0XVBr]ZXI2<9O">[2tgSGQd]8
%$F^Ru0DSk`6)!D[<!b-;l6EiBcJHP^k:8FMfb*F0a^M`j,'\B-dW-V?N47Q4s,TYB1(X#$^\Ne-d(O@IqsV]YYnE0&&nS@,,[$h`
%;RNi+8uJk+h/s_sp'c!p0DZg-lY4]A+QhhYk6>BoIT_RIa7C;mIMdEcmQ&Fr4o1Q.a<!^b@FgO%a\?HH(>[CU1K#f<R<"N=2%U,T
%W,Z.2nmrn5iQD[`qG0PZOLR;<NU32k%W[J!%7QBjLkID@JlBq?n3;C8/[fMqn,hQ-B;?6E_r)Q=5HqQr-0BE:K-,f[<k?5'K4gU2
%kJBO3@&3lsi;t>F-:*gKI6]O`XV1V=/0<^rU@fPg=5,G6b2[(^:6q,X-hIF/)%,GaCEpd4@SA<'n.)Rf,8>Do$I-qq!p0,oEeT^q
%2@"QK#&#&m=4P[YedR,B^AGDQq3Coo96Okl@GaEgGPUGZZK,73/7'6al8Ou90L*I41)>?,!L[P`LmrTB[#OX3!juOmS5ft+j@K4n
%S"3j$b"0q=QK/-?[Zd`=%g7h_-TgTfB*Q]o/Y[gul/P,\kXk;se%d+WJ(P-a.RBAeIVndpU.lM0>t/2Y_6:m_X11SE'XWgT-rVO%
%gbKSH;#T_b-Z8YA!X>oI,OW`;OjLHj5O?(i=ND6e_s@l@$qKD^3"GF>[`E'ESKG.'H+@k<;\+ZdW=STRBK$>7aFSFHB4kgI?Pq5W
%%45MJG@PTHk9K`>@,TQG?u`Df(6!;SgjUEYF:s"nN:^=qS,JKo_@HHF+n1els(E6R#TdK^8_'W*Z?1O-DpnT"R>IudL;JQ;A*ZiE
%Xp6V9ir)>+P]^)W>6/e/jANi6R1:D^]::tL7sDP=%;&.#4W$:[lP_43Oi,g<Eff`dcR5;oDq$`r4O5Wn;<TI+pm)'TE`DOt(t&2=
%/FmBq.N%?r#_;=*W7:r\2Z^LZ3;g-h^O=c0UHc%?6gDY;V!1Q,Tm]k!#K=X^FYL%l;>fK"=A9#%#;oIn.6j/t=bX2*a9^%[+sB"B
%L"ct1nh7RADr#W1:g;um6M;5#qq,mm$H+b=)rqgq);7Fi!5r`3Ck;&N&?c+RZJKK>nXL5fqFWadGs6+[*+]94V4/Np3pBk);FBLp
%15IM[WDt5S+D5=A=84i)qOqZr5f]S$YRfE>bm.r.O6aDcs"r,g$&FErjg_h)0,=/q'Np#9&K6,qoZ+pD&5aIoJ/q+$,Cl_["[gWQ
%l@QtS"r-lF(qad[bU3BTA.QHr$9gD5lbr_aCU(heHD!dm%[r<<WWcd#EB[4?DSF<2=;(-2ho+O7i<;Wrb[RETd8-Dep`cQ%cO;59
%BY`tN<T4M#`6m,^$^PXI8FhoH"d0a8hP$)[;L!i$'[qGF74uDp_:&ENSs1!O74<;%+Xf/Z(i0Z@3)E'X:CBY#gUeEHYFdl:s)NMX
%J!VC$_k@S]qrNQilkA*/T0r-K0dF>*\i5O.RGj]&&o-\[A&C3uW6@08'fgTH1#"q6r)bq&Vt61#)\'+RFV_;"E#O29*5up?cC$)$
%7(&%N8]^Ue@j?e`K>&fmmJrQW]Q/\foJc37"FdO-4EkcoAp"'30-?A.oB;Am-mnN%!%7iN+r,l,rH=U-1aen_'AhlsbTUinOjdF.
%&hoT'TWq_"!'X6L,h65oCIM5k&2Hl5p+rNH#X0Ng4(UF>K+V(/Jq@WF'8d`GB1B4*!>K@*AIWfo+U3YaJEt$RR%rX7ert$aMKK(]
%"gT5u#"9J*Q4#^((1L29Ah(O+hM*N@Z\7+5]a]D\k**JNp0d6BliD/DT4fBq,+NU&Z1+d6+GB2p?V+^!/(>%q.Y"q&BMh>[8a1'Q
%PPNm[[eMI,,;oh%:);Bo%OtpXUG40V9'$@NQYnu_81!OO]j/\l2s>ZMpWqt(EH"GKO+:N8L>rTgYqIl&Ls=ag*$MubFupAH&ak-&
%,l`K?q("3Gs4sqC1a&!61SF[hZd)/Kp;25i@>:5f>`n0-2r+o2TET@i64q3\&<)C=?+:9pJOboC83KRZK`sj]0;m/uZL..l6d'Z=
%HD-3AOrcOK:2R"fAE>r6038bJ^>o9GgDNf1JAXYteRn6h^kEunGcRRK)BI,<adsab7c&R^nJnMJ14BQn/tb3Mb!LQ)p<s%kEh;]>
%$$Z^Keb&%VG450?02_X-9jcoYU3eUebKI4H1WKnTnU@4:S5bI%lr6(E^l(dEN=8/*Hr>!*KJD*>EG4%E+!:RHiPJ*C^cg>A`03<g
%amdi8jR@ohTjKYeer+)_OWksi90*B4'KQChDW]r:2,YmRA=EJ>k+uK^*mOM:L)TAh"E:)]$*a4^[FD:P!LR)W+:]n"@NTS%ZgBO[
%MsKn^pnWb/XD+:#>=,RPdHWcf=ZOa2dF'7XF8H#GIN:*:f/mQ*a&$Xmp/,pO?5@q@R@4eW$.GYJ,U?7B=Q58bN39!aPD9Bk2$-t)
%l,gmt@LJ5sLjLX-pD-P/!n<laK9G)a_PuQKLS4F,6DHDpdGYRnB4CMF.p=S+iJ+V`,HFXe>3CjKT*",_7"%QF#4dUi#7eVSFr&jS
%J=L#_CE7)LJ:1_CD&>(LZ3OeMNb%ifYc%@7h0CFm64LQ(Mj+&r@f;-rA.OrBr=E\nd6(V+X/o%.)V_(k<.a]_VBNkk9HN"`-dHX"
%%QT$R74SOf2iC5DHRBqj#KLsFM3]-6DmI]d6j>P^b%IAuQ,5e>j0QnM.73511th8/Tn>gZ:C**EB.\?AecEJ`ZQ)3Qr_uMMiMg,G
%=-pU<2L1&lC">b7m<e%AC(gJ8B;X\VS$8qJ(@8g;auJrH:-Crpa4;M=P1U/X&Uag&T!ftGY$^,PTqV5WkisJQ5u94+`'</'`%Tg:
%C>3.iTKdN#"[Bc"eZ9RT*HX6m48E)rW;X4.9V9dkNWjBpk^?p<UIDO+N$TRR3(J^m3J%DPR:T&:[t`,0Fm5]]G4`.p0\gYQfNjNV
%3&$cs6e/J1Y83pbpL=\jHH;mq.hC\,;_:6h2a]o=pukbc?cclM0-U[&.8iqr$LF/R7=W(J],DW=)H-"D<][PTn2cU+VGIn!],ji'
%1.;sG)\Yl2Z7d\3;ZO2%^]B.[kSSC.6V8]`6S%.5nD_hkg53uF\Ec2a6C]_NTa7RCTO9fKklU]h7;dkH+U\3F?bH9q[%$?O?-,1h
%AQod:(;7E)8V]`5,8Nscp)GeC`mST6l5X51D5ZACfj[WfAXae,i>00qh/$]GB'[@P=EbkM#t@+aYd:R5/F#UMlNOSu>,aFonOq;E
%s2IhA1l'KOkl?^4eUA?3%]/]@E);9+q2]FfROAFK(/NJn?lWC,B^ef^<e,V)9u(?G.\3sfE4um^)FkmcJ0s!6V,L6NiXnTp]fc3)
%)q!is=30@s0VT=+?_P^._j5%M[q">0GWkh)OT%MG3t$BED=8lKFV6UZc6P!Va_3dMDe,?OMFZ*p6VouQHG-;R"2:^M#5o_].9"-j
%LbERb;ce!.HjJ@Z_uY8Jjj;2AePEsh]Bq0q\F@@6)K=WjZBTbn$=DSdK)N"Ab--nI+i[c]n5KNnDFq)YHAEIPjgd`sbE]'_Wcecs
%d:Vs/;:1=AA=)K[94=IUO&+]U]?qjE45E'FaY5)XqjVWKa8+t1eUT\'N(3Shm:^ts.0-C\%rEU2#B3m:X7Ed$:.m.td\Jl4%\GWg
%3.6uGhc._ernYK,5c(>"offqqE<G.O@S5RM<r//]i8epqqIRBkdI=(<%s.bIg.BIpo>k2R[rb(?6-7ko\o,8!lX5NVJ@KEeL>6$I
%/d[^f*A-BIXW83_-,jO"1cW0ZM>WFTgV>43h4^QJ`nM8q/.p6grc\/I^Ol&C.bfh^K$4dZLqf>h2Sq%6r>uZPnTF8=lHi'MKuP3G
%>=0uj"l&U+i$3#l;cfYX9"sA$JYDq#.dCl5b4M*Z3`<5f!L=LK@NnO814V4cqDq/!OXEDbFEY4TZ\>Dl]Yi%m0k@LWfcW,glLM-R
%@!<S%pXQBD:J1+8m5#qb^q<"XY/T!,7ikQSH=]erGZ[P^S._e*G!jeT$<^^$P$b\[Y+dtPZe1PO#YL"$_;jBE;P2rN<=dI/o'^Xj
%r>&o9*G*<I)V2_$M]Ee-YAB?8f.lc4">Nk5*,+!Gh;!?2-tmc13d2f^EPt?0L)*"K?OtG.,[ShTD@MHQ2hb_62Fp1WZ#9)2X>*EK
%,hUS,#*$&69+CQs+Kd<\)6R(aT98VWL:!+/NGKLee<+B6%nR[0(TckD)#jG?/!]"MRd+:7A>T1%3iXAd&o:6>Tlm)<!/XG8#Z+Qm
%Q;!U?9]kHKB>KKFUc4\LNP8jC'I%aN7\q/@(Y*pBLqKF$))+;j*pVNVG#ONAgpcj6d&A\ATS(XlUi_BD75fC`d/D!>E&JE;D'@*]
%hP/H;iFsiL3_6E1HLOY.F*Z#g0_C5M:3M=/iq)C7I8C$Wc>H);>0nM8Ll5Dp\:"Qo!?jP^'stc9;9Ne0[E?(lY_I/L@glKg0P=!A
%-$AOc&Y`V1e;`QqfXeLuaO1Sc`h=ZiRZ1kaMR1FYaGt-D?t5[Z@Q4OrN\)BVA^jYlf:QP#fcFP0&nUB_A>g1ca#f7.U'=Ge93f"O
%+#b3g7h_U(;7keA%&<f<PD2T=Jk[-bNR,n-&$,ksZo<'q.t"6R9%khH!Y2uqp'"!d(8BR6CAK77W)C[%\i+(47#(afgQcccW2VAO
%KglZ6pgg@MK_hkJ@8$_Ep;(W*AU>g[R.tGrNlWtV;FOt5WXql]m>2=]Jc79JYoMOg`&]MAXT2OQ+t!;9J[^D*%\`oqNa]/M6jGeX
%a29ko3j=<-GE&DLDkL&fE]CpOi\`&#06t'7&f&4hF(?X'dA/*o3[ae\2'S'ZH"&s$Fs[ar,Y8'W/g3lRGOjG+L9H;\hf\=/[$d2F
%k4gs%n9$Kp"'*b!e60[`Lesb5DmtA_I0QP:C^aWU&t+?^>(mkS&Je,,%2'3n*rBQclX#=:]f+A^!6IItjpRqfpOPq"\eNAh7/;TF
%\mIil=eZ"mg(9F2^e!Np&`Z%-C'uGgHE'm10F%S]G,3V,k6Hq^lXc8@P_2\lgX.cMVSR(HLE@7t_QcK/VLC"Z=6<*KE>6aoK&X.r
%p>$9"Nr`R)5#1Su5ArAhCC6<*)c''+ZG43hd'k_>bm+<TZM2@u&3:`;Gm0NMGKA,9Yp="h<r]$@<]P?on#0qR*\!&SQ8%HmO3P<A
%PcSZ/ZMX;DYBUAQ9S:t7b4Qh]iRc^QiM$_Z!gI_+9*6.:`kN^1'2@'2&'`*P6;nWEBD84o[4Fh:V2>rGm7!2<h:%Nsg3uL'(#fJS
%lJ32gCh[__/3@Mr^^)'%G4BCU.BFZMbe\F4s+/H:%#(=6_5AeCkob^!fSrRZq,!l6B%t@r&n#!D.i3b&;.'3eEAUdq,*,X(6sJ&4
%4,+T/ph_b>]d[cR2G4g0-',#tQdo?rNEXt9;6="W%jX-nYZ9pa9LM<;^4agDSLPp3WK:?IBn]#_*Nu$s=]:0Ls%G9dh>5Dof36r0
%eaRX[c!Ed<HQ@\k*Z`b5VOM4;J$c0CCdN\=n8M%.2N')=Mo!Q4Yt=Zq=0<hf<b6()#M#^=+FVd\aOtB87cRH01,OjO6U2nN`;J8d
%+bcpL]#Ad_V(]<-^YQWCYOSlX6C0<R,ulhR"7NFo^F't^n6:N?DU2olpVl!qJ6,;?"@1!G<GpSN/!_H=SL4P,5m7ld#r:Xo1??OP
%L^>#F9M2%0s+p^6D:;$W0oT[92fjsq>MY0un8"mM!iX3.^2#D+YVk!A&/kCc&H&A!Ld>"`,nGRdf]-If_H9@*;-@Md\?VATL.UC%
%^_6@B6^8p=TgOs"+efE=D&d^hAg>^BmqB4Bb1cFc(Hr@0)qb"NErd*"qU-8:U`%0f(lkIu;j4FS;5!$SIFn6Si;66pWn`TmD*81$
%X,=$acn.^14KoP7.9j;\56N]!ik63tO7$0V[8(8551IQ?V]i<jd5Qb$^)j^6S(W9F>.,?YSO\2Uoj*/$\[$@?;W61;`kK9n1<'d-
%4WG$kTGT@B[RHEAE5:*@mcFu(b!Bn0JReq-5M",7k(CL/+cur&mS].&$lXu:f.YH)N*.\`l+92iBB00;D5;1rh7fbOQnJ,pNQ7,)
%W&D(5m17jm3&oto0F`t@i#rqimgf>c$*C.M31sC7q>2JjUQ#dhp/)".N1Bd+_slaiRZS#0:BeQ>DX6"(GGS+9*%ntt<Ged#gf&":
%q$>p[VoTYbI9%JETj`Y<c!FO1;P]4?^"mEN-k^-e=DDI*)sa5?P+&@GJFcr/dq]V=*e*uG/Q+M&0%_u3i=V"\HJkE0DMP*73Bm)s
%gl!i;+k3uk`ZEY$mZ:T,a7kE;4[107DV,ROpDcWKf!F[6,En%<>XJ/Q';la9MiV@1)P7FP^-(AD_Vr7VK9+46Isfg56u>68L#;q'
%Ab`>+df7qVr57E?s1:Mpn;$JH]*s2b?[qhE5Q(7?r9jU_pqn2&o+uoV:VZekLUZ1>_`sg3a:J=FqHn/js+_]ql(A"G%mR`*e,TEf
%rs&r2kkr8(roN&8m=5,[?i5D22h8F~>
%AI9_PrivateDataEnd
